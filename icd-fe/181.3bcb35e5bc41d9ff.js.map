{"version":3,"file":"181.3bcb35e5bc41d9ff.js","mappings":"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","names":["animate","A","animObject","setAnimation","defaultOptions","D","defaultTime","numberFormat","FormatUtilities","registerEventOptions","Foundation","charts","H","doc","marginNames","svg","win","seriesTypes","SeriesRegistry","addEvent","U","attr","cleanRecursively","createElement","css","defined","discardElement","erase","error","extend","find","fireEvent","getStyle","isArray","isNumber","isObject","isString","merge","objectEach","pick","pInt","relativeLength","removeEvent","splat","syncTimeout","uniqueKey","Chart","a","b","c","this","axes","axisOffset","bounds","chartHeight","chartWidth","clipBox","colorCounter","container","eventOptions","index","isResizing","labelCollectors","legend","margin","numberFormatter","options","plotBox","plotHeight","plotLeft","plotTop","plotWidth","pointCount","pointer","renderer","renderTo","series","sharedClips","spacing","spacingBox","symbolCounter","time","titleOffset","userOptions","xAxis","yAxis","getArgs","chart","prototype","nodeName","init","callback","userPlotOptions","plotOptions","args","arguments","optionsChart","typeOptions","type","tooltip","forExport","h","v","zooming","resetButton","resetZoomButton","key","zoomKey","pinchType","singleTouch","zoomBySingleTouch","zoomType","Object","keys","length","Time","styledMode","hasCartesianSeries","showAxes","push","firstRender","initSeries","defaultSeriesType","SeriesClass","missingModuleFor","setSeriesData","getSeriesOrderByLinks","forEach","points","data","enabledDataSorting","setData","concat","sort","linkedSeries","orderSeries","fromIndex","i","iEnd","name","getName","isInsidePlot","plotX","plotY","_a","_b","inverted","scrollLeft","scrollTop","visiblePlotOnly","scrollingContainer","box","scrollablePlotBox","x","y","e","ignoreX","polar","pos","len","Infinity","chartX","paneCoordinates","Math","max","min","width","ignoreY","axis","isXAxis","chartY","height","redraw","animation","hasDirtyStacks","hasStackedSeries","serie","colorAxis","legendUserOptions","isHiddenChart","isHidden","afterRedraw","isDirtyBox","redrawLegend","isDirtyLegend","setResponsive","hasRendered","temporaryDisplay","layOutTitles","stacking","centerInCategory","isDirty","legendType","updateTotals","labelFormatter","labelFormat","isDirtyData","enabled","render","getStacks","updateNames","setScale","getMargins","extKey","eventArgs","getExtremes","drawChartBox","visible","reset","draw","call","get","id","itemById","item","ret","getAxes","xAxisOptions","yAxisOptions","isX","axisOptions","Axis","getSelectedPoints","reduce","acc","getPointsCollection","point","selectedStaging","selected","getSelectedSeries","filter","setTitle","titleOptions","subtitleOptions","applyDescription","explicitOptions","style","color","fontSize","isStock","elem","destroy","text","useHTML","align","class","zIndex","add","update","updateOptions","title","subtitle","caption","titleSize","verticalAlign","offset","fontMetrics","widthAdjust","round","getBBox","floating","ceil","requiresDirtyBox","join","getChartSize","widthOption","heightOption","containerWidth","containerHeight","revert","tempStyle","node","hcOrigStyle","hcOrigDetached","body","removeChild","parentNode","contains","appendChild","hcOricDetached","display","overflow","offsetWidth","setProperty","setClassName","className","getContainer","containerStyle","indexAttrName","containerId","getElementById","oldChartIndex","innerHTML","AST","skipClone","position","textAlign","lineHeight","userSelect","outline","_cursor","cursor","Renderer","RendererRegistry","SVGRenderer","exporting","allowHTML","defs","definition","setStyle","chartIndex","skipAxes","resetMargins","marginBottom","adjustMargins","getAxisMargins","getOffset","m","side","setChartSize","reflow","hasUserSize","target","chartPosition","isPrinting","reflowTimeout","setSize","setReflow","unbindReflow","globalAnimation","oldChartHeight","oldChartWidth","duration","clipOffset","marginRight","plotSizeX","plotSizeY","plotBorderWidth","floor","clipX","clipY","setAxisSize","setAxisTranslation","alignElements","chartOptions","value","values","sideName","chartBorderWidth","mgn","bgAttr","plotBGImage","chartBackgroundColor","backgroundColor","plotBackgroundColor","plotBackgroundImage","clipRect","chartBackground","plotBackground","plotBorder","verb","rect","addClass","strokeWidth","borderWidth","shadow","fill","stroke","borderColor","r","borderRadius","plotShadow","image","plotBorderColor","crisp","propFromSeries","klass","seriesOptions","linkSeries","chartSeries","linkedTo","linkedParent","setDataSortingOptions","renderSeries","translate","renderLabels","labels","items","label","left","top","html","renderAxes","correction","Legend","tempWidth","some","horiz","tempHeight","redoHorizontal","redoVertical","setTickInterval","seriesGroup","g","addCredits","credits","creds","mapCredits","on","href","location","removeAttribute","scroller","prop","val","isReadyToRender","serieOptions","Pointer","MSPointer","getChartPosition","imgCount","hasLoaded","onload","callbacks","fn","apply","warnIfA11yModuleNotLoaded","accessibility","boxWrapper","role","element","textContent","replace","addSeries","addAxis","createAxis","addColorAxis","showLoading","str","loadingOptions","loading","setLoadingSize","loadingDiv","loadingSpan","lang","labelStyle","loadingShown","opacity","showDuration","hideLoading","hideDuration","complete","oneToOne","updateAllAxes","updateAllSeries","runSetSize","adders","isResponsiveOptions","itemsForRemoval","propsRequireUpdateSeries","indexOf","propsRequireDirtyBox","propsRequireReflow","colors","collectionsWithUpdate","coll","indexMap","s","isInternal","newOptions","hasId","touched","collectionsWithInit","remove","newWidth","newHeight","setSubtitle","setCaption","showResetZoom","btnOptions","theme","alignTo","relativeTo","zoomOut","button","resetZoom","resetZoomTitle","resetSelection","zoom","event","hasZoomed","displayButton","initiated","axisData","mouseDownX","mouseDownY","displayBtn","pan","panning","hoverPoints","panningOptions","doRedraw","originalEvent","setState","nextMousePos","panningEnabled","spill","mousePos","mouseDown","startPos","halfPointRange","minPointOffset","pointRangeDirection","reversed","extremes","panMin","toValue","panMax","pointRangePadding","flipped","hasVerticalPanning","newMin","newMax","panningState","processedData","getProcessedData","dataExtremes","yData","startMin","Number","MAX_VALUE","startMax","dataMin","dataMax","threshold","paddedMin","toPixels","minPixelPadding","paddedMax","isOrdinal","setExtremes","trigger","match","down","format","F","distribute","R","stableSort","allItems","contentGroup","group","initialItemY","itemHeight","itemMarginBottom","itemMarginTop","itemX","itemY","lastItemY","lastLineHeight","legendHeight","legendWidth","maxItemWidth","maxLegendWidth","padding","pages","proximate","scrollGroup","symbolHeight","symbolWidth","titleHeight","totalItemWidth","setOptions","positionCheckboxes","unchartrender","proximatePositions","positionItems","itemStyle","itemHiddenStyle","layout","baseline","colorizeItem","legendItem","line","symbol","hiddenColor","textColor","symbolColor","markerOptions","marker","symbolAttr","isMarker","pointAttribs","positionItem","_this","_c","checkbox","attribs","translateX","rtl","symbolPadding","translateY","destroyItem","_i","getAllItems","alignAttr","clipHeight","checkboxOffset","scrollOffset","renderTitle","bBox","setText","renderItem","itemDistance","ltr","isSeries","drawLegendSymbol","showCheckbox","createCheckboxForItem","itemClassName","itemExtraWidth","colorIndex","f","squareSymbol","setItemEvents","itemWidth","fontMetricsH","labelWidth","labelHeight","layoutItem","horizontal","alignColumns","showInLegend","getAlignment","charAt","alignment","alignments","test","boxes","alignLeft","lastPoint","useFirstPoint","slice","reverse","size","allowedWidth","legendGroup","substring","legendIndex","handleOverflow","placed","lastY","optionsY","alignTop","maxHeight","navOptions","navigation","arrowSize","clipToHeight","clip","div","addTracker","circle","nav","spaceHeight","currentPage","fullHeight","pageIx","up","scroll","pager","scrollBy","pageCount","visibility","upTracker","downTracker","inactiveColor","activeColor","animOptions","legendLabel","isPoint","Point","activeClass","setOtherItemsState","state","otherItem","legendElements_1","itemHoverStyle","removeClass","strLegendItemClick","fnLegendItemClick","setVisible","browserEvent","firePointEvent","checked","defaultChecked","itemCheckboxStyle","select","extendStatics","__extends","d","setPrototypeOf","__proto__","Array","p","hasOwnProperty","TypeError","String","__","constructor","create","noop","touches","hasPointerEvent","PointerEvent","getWebkitTouches","fake","touch","pageX","pageY","translateMSPointer","method","wktype","func","NaN","pointerType","MSPOINTER_TYPE_TOUCH","currentTarget","preventDefault","_super","isRequired","MSPointerEvent","batchMSEvents","onContainerPointerDown","onContainerPointerMove","onDocumentPointerUp","hasZoom","pointerId","setDOMEvents","followTouchMove","Color","lastValidTouch","pinchDown","runChartClick","eventsToUnbind","hasDragged","applyInactiveState","activeSeries","navigatorSeries","inactiveSeries","inactiveOtherPoints","setAllPointsToState","unbind","unbindDocumentMouseUp","unbindDocumentTouchEnd","clearInterval","tooltipTimeout","_val","getSelectionMarkerAttrs","attrs","shapeType","zoomHor","zoomVert","abs","drag","clickedInside","panKey","selectionMarker","sqrt","pow","mapView","zoomX","zoomY","selectionMarkerFill","setOpacity","dragStart","mouseIsDown","cancelClick","getSelectionBox","result","drop","hasPinched","x_1","y_1","width_1","height_1","selectionData_1","runZoom_1","Boolean","zoomEnabled","selectionMin","selectionMax","scaleGroups","findNearestKDPoint","shared","closest","compareX","noSharedTooltip","findNearestPointBy","searchPoint","p1","p2","isCloserX","distX","isCloser","dist","isAbove","getChartCoordinatesFromPoint","shapeArgs","clientX","isNode","scaleX","scaleY","offsetHeight","getCoordinates","coordinates","getHoverData","existingHoverPoint","existingHoverSeries","isDirectTouch","searchSeries","useExisting","directTouch","enableMouseTracking","hoverSeries","stickyTracking","hoverPoint","isNull","boosted","boost","getPoint","getPointFromEvent","onTrackerMouseOut","relatedTarget","toElement","inClass","onMouseOut","elemClassName","parentElement","events","click","Tooltip","normalize","ePos","changedTouches","onContainerClick","pEvt","onContainerMouseDown","isPrimaryButton","buttons","onContainerMouseMove","zoomOption","onContainerMouseLeave","hoverChartIndex","onContainerMouseEnter","setHoverChartIndex","returnValue","touchSelect","openMenu","shouldStickOnContact","runPointActions","onDocumentTouchEnd","hoverChart","onContainerTouchMove","onContainerTouchStart","onDocumentMouseMove","onDocumentMouseUp","pinch","self","touchesLength","transform","fireClickEvent","runTrackerClick","cancelable","map","absMin","absMax","res","pinchTranslate","pinchTranslateDirection","forcedScale","selectionWH","selectionXY","clipXY","outOfBounds","xy","XY","sChartXY","wh","plotLeftTop","touch0Start","touch1Start","touch1Now","scale","touch0Now","scaleKey","transformScale","allowMove","delay","tooltipPoints","isCartesian","refresh","crosshair","drawCrosshair","hide","unDocMouseMove","hideCrosshair","hoverX","force","hoverData","followPointer","tooltipOptions","split","useSharedTooltip","onMouseOver","anchor","getAnchor","updatePosition","ownerDocument","snap","seriesAttribs","getPlotBox","markerGroup","dataLabelsGroup","ownerDoc","onmousedown","bind","onmousemove","onclick","parent","tagName","passive","start","hasMoved"],"sourceRoot":"webpack:///","sources":["./node_modules/highcharts/es-modules/Core/Chart/Chart.js","./node_modules/highcharts/es-modules/Core/Legend/Legend.js","./node_modules/highcharts/es-modules/Core/MSPointer.js","./node_modules/highcharts/es-modules/Core/Pointer.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport A from '../Animation/AnimationUtilities.js';\nvar animate = A.animate, animObject = A.animObject, setAnimation = A.setAnimation;\nimport Axis from '../Axis/Axis.js';\nimport D from '../Defaults.js';\nvar defaultOptions = D.defaultOptions, defaultTime = D.defaultTime;\nimport FormatUtilities from '../FormatUtilities.js';\nvar numberFormat = FormatUtilities.numberFormat;\nimport Foundation from '../Foundation.js';\nvar registerEventOptions = Foundation.registerEventOptions;\nimport H from '../Globals.js';\nvar charts = H.charts, doc = H.doc, marginNames = H.marginNames, svg = H.svg, win = H.win;\nimport Legend from '../Legend/Legend.js';\nimport MSPointer from '../MSPointer.js';\nimport Pointer from '../Pointer.js';\nimport RendererRegistry from '../Renderer/RendererRegistry.js';\nimport SeriesRegistry from '../Series/SeriesRegistry.js';\nvar seriesTypes = SeriesRegistry.seriesTypes;\nimport SVGRenderer from '../Renderer/SVG/SVGRenderer.js';\nimport Time from '../Time.js';\nimport U from '../Utilities.js';\nimport AST from '../Renderer/HTML/AST.js';\nvar addEvent = U.addEvent, attr = U.attr, cleanRecursively = U.cleanRecursively, createElement = U.createElement, css = U.css, defined = U.defined, discardElement = U.discardElement, erase = U.erase, error = U.error, extend = U.extend, find = U.find, fireEvent = U.fireEvent, getStyle = U.getStyle, isArray = U.isArray, isNumber = U.isNumber, isObject = U.isObject, isString = U.isString, merge = U.merge, objectEach = U.objectEach, pick = U.pick, pInt = U.pInt, relativeLength = U.relativeLength, removeEvent = U.removeEvent, splat = U.splat, syncTimeout = U.syncTimeout, uniqueKey = U.uniqueKey;\n/* *\n *\n *  Class\n *\n * */\n/* eslint-disable no-invalid-this, valid-jsdoc */\n/**\n * The Chart class. The recommended constructor is {@link Highcharts#chart}.\n *\n * @example\n * let chart = Highcharts.chart('container', {\n *        title: {\n *               text: 'My chart'\n *        },\n *        series: [{\n *            data: [1, 3, 2, 4]\n *        }]\n * })\n *\n * @class\n * @name Highcharts.Chart\n *\n * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n *        The DOM element to render to, or its id.\n *\n * @param {Highcharts.Options} options\n *        The chart options structure.\n *\n * @param {Highcharts.ChartCallbackFunction} [callback]\n *        Function to run when the chart has loaded and and all external images\n *        are loaded. Defining a\n *        [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n *        handler is equivalent.\n */\nvar Chart = /** @class */ (function () {\n    function Chart(a, b, c) {\n        this.axes = void 0;\n        this.axisOffset = void 0;\n        this.bounds = void 0;\n        this.chartHeight = void 0;\n        this.chartWidth = void 0;\n        this.clipBox = void 0;\n        this.colorCounter = void 0;\n        this.container = void 0;\n        this.eventOptions = void 0;\n        this.index = void 0;\n        this.isResizing = void 0;\n        this.labelCollectors = void 0;\n        this.legend = void 0;\n        this.margin = void 0;\n        this.numberFormatter = void 0;\n        this.options = void 0;\n        this.plotBox = void 0;\n        this.plotHeight = void 0;\n        this.plotLeft = void 0;\n        this.plotTop = void 0;\n        this.plotWidth = void 0;\n        this.pointCount = void 0;\n        this.pointer = void 0;\n        this.renderer = void 0;\n        this.renderTo = void 0;\n        this.series = void 0;\n        this.sharedClips = {};\n        this.spacing = void 0;\n        this.spacingBox = void 0;\n        this.symbolCounter = void 0;\n        this.time = void 0;\n        this.titleOffset = void 0;\n        this.userOptions = void 0;\n        this.xAxis = void 0;\n        this.yAxis = void 0;\n        this.getArgs(a, b, c);\n    }\n    /**\n     * Factory function for basic charts.\n     *\n     * @example\n     * // Render a chart in to div#container\n     * let chart = Highcharts.chart('container', {\n     *     title: {\n     *         text: 'My chart'\n     *     },\n     *     series: [{\n     *         data: [1, 3, 2, 4]\n     *     }]\n     * });\n     *\n     * @function Highcharts.chart\n     *\n     * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n     * The DOM element to render to, or its id.\n     *\n     * @param {Highcharts.Options} options\n     * The chart options structure.\n     *\n     * @param {Highcharts.ChartCallbackFunction} [callback]\n     * Function to run when the chart has loaded and and all external images are\n     * loaded. Defining a\n     * [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n     * handler is equivalent.\n     *\n     * @return {Highcharts.Chart}\n     * Returns the Chart object.\n     */\n    Chart.chart = function (a, b, c) {\n        return new Chart(a, b, c);\n    };\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Handle the arguments passed to the constructor.\n     *\n     * @private\n     * @function Highcharts.Chart#getArgs\n     *\n     * @param {...Array<*>} arguments\n     * All arguments for the constructor.\n     *\n     * @emits Highcharts.Chart#event:init\n     * @emits Highcharts.Chart#event:afterInit\n     */\n    Chart.prototype.getArgs = function (a, b, c) {\n        // Remove the optional first argument, renderTo, and\n        // set it on this.\n        if (isString(a) || a.nodeName) {\n            this.renderTo = a;\n            this.init(b, c);\n        }\n        else {\n            this.init(a, b);\n        }\n    };\n    /**\n     * Overridable function that initializes the chart. The constructor's\n     * arguments are passed on directly.\n     *\n     * @function Highcharts.Chart#init\n     *\n     * @param {Highcharts.Options} userOptions\n     *        Custom options.\n     *\n     * @param {Function} [callback]\n     *        Function to run when the chart has loaded and and all external\n     *        images are loaded.\n     *\n     *\n     * @emits Highcharts.Chart#event:init\n     * @emits Highcharts.Chart#event:afterInit\n     */\n    Chart.prototype.init = function (userOptions, callback) {\n        // Handle regular options\n        var userPlotOptions = userOptions.plotOptions || {};\n        // Fire the event with a default function\n        fireEvent(this, 'init', { args: arguments }, function () {\n            var options = merge(defaultOptions, userOptions); // do the merge\n            var optionsChart = options.chart;\n            // Override (by copy of user options) or clear tooltip options\n            // in chart.options.plotOptions (#6218)\n            objectEach(options.plotOptions, function (typeOptions, type) {\n                if (isObject(typeOptions)) { // #8766\n                    typeOptions.tooltip = (userPlotOptions[type] && // override by copy:\n                        merge(userPlotOptions[type].tooltip)) || void 0; // or clear\n                }\n            });\n            // User options have higher priority than default options\n            // (#6218). In case of exporting: path is changed\n            options.tooltip.userOptions = (userOptions.chart &&\n                userOptions.chart.forExport &&\n                userOptions.tooltip.userOptions) || userOptions.tooltip;\n            /**\n             * The original options given to the constructor or a chart factory\n             * like {@link Highcharts.chart} and {@link Highcharts.stockChart}.\n             *\n             * @name Highcharts.Chart#userOptions\n             * @type {Highcharts.Options}\n             */\n            this.userOptions = userOptions;\n            this.margin = [];\n            this.spacing = [];\n            // Pixel data bounds for touch zoom\n            this.bounds = { h: {}, v: {} };\n            // An array of functions that returns labels that should be\n            // considered for anti-collision\n            this.labelCollectors = [];\n            this.callback = callback;\n            this.isResizing = 0;\n            var zooming = optionsChart.zooming = optionsChart.zooming || {};\n            // Other options have no default so just pick\n            if (userOptions.chart && !userOptions.chart.zooming) {\n                zooming.resetButton = optionsChart.resetZoomButton;\n            }\n            zooming.key = pick(zooming.key, optionsChart.zoomKey);\n            zooming.pinchType = pick(zooming.pinchType, optionsChart.pinchType);\n            zooming.singleTouch = pick(zooming.singleTouch, optionsChart.zoomBySingleTouch);\n            zooming.type = pick(zooming.type, optionsChart.zoomType);\n            /**\n             * The options structure for the chart after merging\n             * {@link #defaultOptions} and {@link #userOptions}. It contains\n             * members for the sub elements like series, legend, tooltip etc.\n             *\n             * @name Highcharts.Chart#options\n             * @type {Highcharts.Options}\n             */\n            this.options = options;\n            /**\n             * All the axes in the chart.\n             *\n             * @see  Highcharts.Chart.xAxis\n             * @see  Highcharts.Chart.yAxis\n             *\n             * @name Highcharts.Chart#axes\n             * @type {Array<Highcharts.Axis>}\n             */\n            this.axes = [];\n            /**\n             * All the current series in the chart.\n             *\n             * @name Highcharts.Chart#series\n             * @type {Array<Highcharts.Series>}\n             */\n            this.series = [];\n            /**\n             * The `Time` object associated with the chart. Since v6.0.5,\n             * time settings can be applied individually for each chart. If\n             * no individual settings apply, the `Time` object is shared by\n             * all instances.\n             *\n             * @name Highcharts.Chart#time\n             * @type {Highcharts.Time}\n             */\n            this.time =\n                userOptions.time && Object.keys(userOptions.time).length ?\n                    new Time(userOptions.time) :\n                    H.time;\n            /**\n             * Callback function to override the default function that formats\n             * all the numbers in the chart. Returns a string with the formatted\n             * number.\n             *\n             * @name Highcharts.Chart#numberFormatter\n             * @type {Highcharts.NumberFormatterCallbackFunction}\n             */\n            this.numberFormatter = optionsChart.numberFormatter || numberFormat;\n            /**\n             * Whether the chart is in styled mode, meaning all presentational\n             * attributes are avoided.\n             *\n             * @name Highcharts.Chart#styledMode\n             * @type {boolean}\n             */\n            this.styledMode = optionsChart.styledMode;\n            this.hasCartesianSeries = optionsChart.showAxes;\n            var chart = this;\n            /**\n             * Index position of the chart in the {@link Highcharts#charts}\n             * property.\n             *\n             * @name Highcharts.Chart#index\n             * @type {number}\n             * @readonly\n             */\n            chart.index = charts.length; // Add the chart to the global lookup\n            charts.push(chart);\n            H.chartCount++;\n            // Chart event handlers\n            registerEventOptions(this, optionsChart);\n            /**\n             * A collection of the X axes in the chart.\n             *\n             * @name Highcharts.Chart#xAxis\n             * @type {Array<Highcharts.Axis>}\n             */\n            chart.xAxis = [];\n            /**\n             * A collection of the Y axes in the chart.\n             *\n             * @name Highcharts.Chart#yAxis\n             * @type {Array<Highcharts.Axis>}\n             *\n             * @todo\n             * Make events official: Fire the event `afterInit`.\n             */\n            chart.yAxis = [];\n            chart.pointCount = chart.colorCounter = chart.symbolCounter = 0;\n            // Fire after init but before first render, before axes and series\n            // have been initialized.\n            fireEvent(chart, 'afterInit');\n            chart.firstRender();\n        });\n    };\n    /**\n     * Internal function to unitialize an individual series.\n     *\n     * @private\n     * @function Highcharts.Chart#initSeries\n     */\n    Chart.prototype.initSeries = function (options) {\n        var chart = this, optionsChart = chart.options.chart, type = (options.type ||\n            optionsChart.type ||\n            optionsChart.defaultSeriesType), SeriesClass = seriesTypes[type];\n        // No such series type\n        if (!SeriesClass) {\n            error(17, true, chart, { missingModuleFor: type });\n        }\n        var series = new SeriesClass();\n        if (typeof series.init === 'function') {\n            series.init(chart, options);\n        }\n        return series;\n    };\n    /**\n     * Internal function to set data for all series with enabled sorting.\n     *\n     * @private\n     * @function Highcharts.Chart#setSeriesData\n     */\n    Chart.prototype.setSeriesData = function () {\n        this.getSeriesOrderByLinks().forEach(function (series) {\n            // We need to set data for series with sorting after series init\n            if (!series.points && !series.data && series.enabledDataSorting) {\n                series.setData(series.options.data, false);\n            }\n        });\n    };\n    /**\n     * Sort and return chart series in order depending on the number of linked\n     * series.\n     *\n     * @private\n     * @function Highcharts.Series#getSeriesOrderByLinks\n     */\n    Chart.prototype.getSeriesOrderByLinks = function () {\n        return this.series.concat().sort(function (a, b) {\n            if (a.linkedSeries.length || b.linkedSeries.length) {\n                return b.linkedSeries.length - a.linkedSeries.length;\n            }\n            return 0;\n        });\n    };\n    /**\n     * Order all series above a given index. When series are added and ordered\n     * by configuration, only the last series is handled (#248, #1123, #2456,\n     * #6112). This function is called on series initialization and destroy.\n     *\n     * @private\n     * @function Highcharts.Series#orderSeries\n     * @param {number} [fromIndex]\n     * If this is given, only the series above this index are handled.\n     */\n    Chart.prototype.orderSeries = function (fromIndex) {\n        var series = this.series;\n        for (var i = (fromIndex || 0), iEnd = series.length; i < iEnd; ++i) {\n            if (series[i]) {\n                /**\n                 * Contains the series' index in the `Chart.series` array.\n                 *\n                 * @name Highcharts.Series#index\n                 * @type {number}\n                 * @readonly\n                 */\n                series[i].index = i;\n                series[i].name = series[i].getName();\n            }\n        }\n    };\n    /**\n     * Check whether a given point is within the plot area.\n     *\n     * @function Highcharts.Chart#isInsidePlot\n     *\n     * @param {number} plotX\n     * Pixel x relative to the plot area.\n     *\n     * @param {number} plotY\n     * Pixel y relative to the plot area.\n     *\n     * @param {Highcharts.ChartIsInsideOptionsObject} [options]\n     * Options object.\n     *\n     * @return {boolean}\n     * Returns true if the given point is inside the plot area.\n     */\n    Chart.prototype.isInsidePlot = function (plotX, plotY, options) {\n        var _a;\n        if (options === void 0) { options = {}; }\n        var _b = this, inverted = _b.inverted, plotBox = _b.plotBox, plotLeft = _b.plotLeft, plotTop = _b.plotTop, scrollablePlotBox = _b.scrollablePlotBox;\n        var scrollLeft = 0, scrollTop = 0;\n        if (options.visiblePlotOnly && this.scrollingContainer) {\n            (_a = this.scrollingContainer, scrollLeft = _a.scrollLeft, scrollTop = _a.scrollTop);\n        }\n        var series = options.series, box = (options.visiblePlotOnly && scrollablePlotBox) || plotBox, x = options.inverted ? plotY : plotX, y = options.inverted ? plotX : plotY, e = {\n            x: x,\n            y: y,\n            isInsidePlot: true,\n            options: options\n        };\n        if (!options.ignoreX) {\n            var xAxis = (series &&\n                (inverted && !this.polar ? series.yAxis : series.xAxis)) || {\n                pos: plotLeft,\n                len: Infinity\n            };\n            var chartX = options.paneCoordinates ?\n                xAxis.pos + x : plotLeft + x;\n            if (!(chartX >= Math.max(scrollLeft + plotLeft, xAxis.pos) &&\n                chartX <= Math.min(scrollLeft + plotLeft + box.width, xAxis.pos + xAxis.len))) {\n                e.isInsidePlot = false;\n            }\n        }\n        if (!options.ignoreY && e.isInsidePlot) {\n            var yAxis = (options.axis && !options.axis.isXAxis && options.axis) || (series && (inverted ? series.xAxis : series.yAxis)) || {\n                pos: plotTop,\n                len: Infinity\n            };\n            var chartY = options.paneCoordinates ?\n                yAxis.pos + y : plotTop + y;\n            if (!(chartY >= Math.max(scrollTop + plotTop, yAxis.pos) &&\n                chartY <= Math.min(scrollTop + plotTop + box.height, yAxis.pos + yAxis.len))) {\n                e.isInsidePlot = false;\n            }\n        }\n        fireEvent(this, 'afterIsInsidePlot', e);\n        return e.isInsidePlot;\n    };\n    /**\n     * Redraw the chart after changes have been done to the data, axis extremes\n     * chart size or chart elements. All methods for updating axes, series or\n     * points have a parameter for redrawing the chart. This is `true` by\n     * default. But in many cases you want to do more than one operation on the\n     * chart before redrawing, for example add a number of points. In those\n     * cases it is a waste of resources to redraw the chart for each new point\n     * added. So you add the points and call `chart.redraw()` after.\n     *\n     * @function Highcharts.Chart#redraw\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     * If or how to apply animation to the redraw.\n     *\n     * @emits Highcharts.Chart#event:afterSetExtremes\n     * @emits Highcharts.Chart#event:beforeRedraw\n     * @emits Highcharts.Chart#event:predraw\n     * @emits Highcharts.Chart#event:redraw\n     * @emits Highcharts.Chart#event:render\n     * @emits Highcharts.Chart#event:updatedData\n     */\n    Chart.prototype.redraw = function (animation) {\n        fireEvent(this, 'beforeRedraw');\n        var chart = this, axes = chart.hasCartesianSeries ? chart.axes : chart.colorAxis || [], series = chart.series, pointer = chart.pointer, legend = chart.legend, legendUserOptions = chart.userOptions.legend, renderer = chart.renderer, isHiddenChart = renderer.isHidden(), afterRedraw = [];\n        var hasDirtyStacks, hasStackedSeries, i, isDirtyBox = chart.isDirtyBox, redrawLegend = chart.isDirtyLegend, serie;\n        // Handle responsive rules, not only on resize (#6130)\n        if (chart.setResponsive) {\n            chart.setResponsive(false);\n        }\n        // Set the global animation. When chart.hasRendered is not true, the\n        // redraw call comes from a responsive rule and animation should not\n        // occur.\n        setAnimation(chart.hasRendered ? animation : false, chart);\n        if (isHiddenChart) {\n            chart.temporaryDisplay();\n        }\n        // Adjust title layout (reflow multiline text)\n        chart.layOutTitles();\n        // link stacked series\n        i = series.length;\n        while (i--) {\n            serie = series[i];\n            if (serie.options.stacking || serie.options.centerInCategory) {\n                hasStackedSeries = true;\n                if (serie.isDirty) {\n                    hasDirtyStacks = true;\n                    break;\n                }\n            }\n        }\n        if (hasDirtyStacks) { // mark others as dirty\n            i = series.length;\n            while (i--) {\n                serie = series[i];\n                if (serie.options.stacking) {\n                    serie.isDirty = true;\n                }\n            }\n        }\n        // Handle updated data in the series\n        series.forEach(function (serie) {\n            if (serie.isDirty) {\n                if (serie.options.legendType === 'point') {\n                    if (typeof serie.updateTotals === 'function') {\n                        serie.updateTotals();\n                    }\n                    redrawLegend = true;\n                }\n                else if (legendUserOptions &&\n                    (legendUserOptions.labelFormatter ||\n                        legendUserOptions.labelFormat)) {\n                    redrawLegend = true; // #2165\n                }\n            }\n            if (serie.isDirtyData) {\n                fireEvent(serie, 'updatedData');\n            }\n        });\n        // handle added or removed series\n        if (redrawLegend && legend && legend.options.enabled) {\n            // draw legend graphics\n            legend.render();\n            chart.isDirtyLegend = false;\n        }\n        // reset stacks\n        if (hasStackedSeries) {\n            chart.getStacks();\n        }\n        // set axes scales\n        axes.forEach(function (axis) {\n            axis.updateNames();\n            axis.setScale();\n        });\n        chart.getMargins(); // #3098\n        // If one axis is dirty, all axes must be redrawn (#792, #2169)\n        axes.forEach(function (axis) {\n            if (axis.isDirty) {\n                isDirtyBox = true;\n            }\n        });\n        // redraw axes\n        axes.forEach(function (axis) {\n            // Fire 'afterSetExtremes' only if extremes are set\n            var key = axis.min + ',' + axis.max;\n            if (axis.extKey !== key) { // #821, #4452\n                axis.extKey = key;\n                // prevent a recursive call to chart.redraw() (#1119)\n                afterRedraw.push(function () {\n                    fireEvent(axis, 'afterSetExtremes', extend(axis.eventArgs, axis.getExtremes())); // #747, #751\n                    delete axis.eventArgs;\n                });\n            }\n            if (isDirtyBox || hasStackedSeries) {\n                axis.redraw();\n            }\n        });\n        // the plot areas size has changed\n        if (isDirtyBox) {\n            chart.drawChartBox();\n        }\n        // Fire an event before redrawing series, used by the boost module to\n        // clear previous series renderings.\n        fireEvent(chart, 'predraw');\n        // redraw affected series\n        series.forEach(function (serie) {\n            if ((isDirtyBox || serie.isDirty) && serie.visible) {\n                serie.redraw();\n            }\n            // Set it here, otherwise we will have unlimited 'updatedData' calls\n            // for a hidden series after setData(). Fixes #6012\n            serie.isDirtyData = false;\n        });\n        // move tooltip or reset\n        if (pointer) {\n            pointer.reset(true);\n        }\n        // redraw if canvas\n        renderer.draw();\n        // Fire the events\n        fireEvent(chart, 'redraw');\n        fireEvent(chart, 'render');\n        if (isHiddenChart) {\n            chart.temporaryDisplay(true);\n        }\n        // Fire callbacks that are put on hold until after the redraw\n        afterRedraw.forEach(function (callback) {\n            callback.call();\n        });\n    };\n    /**\n     * Get an axis, series or point object by `id` as given in the configuration\n     * options. Returns `undefined` if no item is found.\n     *\n     * @sample highcharts/plotoptions/series-id/\n     *         Get series by id\n     *\n     * @function Highcharts.Chart#get\n     *\n     * @param {string} id\n     * The id as given in the configuration options.\n     *\n     * @return {Highcharts.Axis|Highcharts.Series|Highcharts.Point|undefined}\n     * The retrieved item.\n     */\n    Chart.prototype.get = function (id) {\n        var series = this.series;\n        /**\n         * @private\n         */\n        function itemById(item) {\n            return (item.id === id ||\n                (item.options && item.options.id === id));\n        }\n        var ret = \n        // Search axes\n        find(this.axes, itemById) ||\n            // Search series\n            find(this.series, itemById);\n        // Search points\n        for (var i = 0; !ret && i < series.length; i++) {\n            ret = find(series[i].points || [], itemById);\n        }\n        return ret;\n    };\n    /**\n     * Create the Axis instances based on the config options.\n     *\n     * @private\n     * @function Highcharts.Chart#getAxes\n     * @emits Highcharts.Chart#event:afterGetAxes\n     * @emits Highcharts.Chart#event:getAxes\n     */\n    Chart.prototype.getAxes = function () {\n        var chart = this, options = this.options, xAxisOptions = options.xAxis = splat(options.xAxis || {}), yAxisOptions = options.yAxis = splat(options.yAxis || {});\n        fireEvent(this, 'getAxes');\n        // make sure the options are arrays and add some members\n        xAxisOptions.forEach(function (axis, i) {\n            axis.index = i;\n            axis.isX = true;\n        });\n        yAxisOptions.forEach(function (axis, i) {\n            axis.index = i;\n        });\n        // concatenate all axis options into one array\n        var optionsArray = xAxisOptions.concat(yAxisOptions);\n        optionsArray.forEach(function (axisOptions) {\n            new Axis(chart, axisOptions); // eslint-disable-line no-new\n        });\n        fireEvent(this, 'afterGetAxes');\n    };\n    /**\n     * Returns an array of all currently selected points in the chart. Points\n     * can be selected by clicking or programmatically by the\n     * {@link Highcharts.Point#select}\n     * function.\n     *\n     * @sample highcharts/plotoptions/series-allowpointselect-line/\n     *         Get selected points\n     *\n     * @function Highcharts.Chart#getSelectedPoints\n     *\n     * @return {Array<Highcharts.Point>}\n     *         The currently selected points.\n     */\n    Chart.prototype.getSelectedPoints = function () {\n        return this.series.reduce(function (acc, series) {\n            // For one-to-one points inspect series.data in order to retrieve\n            // points outside the visible range (#6445). For grouped data,\n            // inspect the generated series.points.\n            series.getPointsCollection()\n                .forEach(function (point) {\n                if (pick(point.selectedStaging, point.selected)) {\n                    acc.push(point);\n                }\n            });\n            return acc;\n        }, []);\n    };\n    /**\n     * Returns an array of all currently selected series in the chart. Series\n     * can be selected either programmatically by the\n     * {@link Highcharts.Series#select}\n     * function or by checking the checkbox next to the legend item if\n     * [series.showCheckBox](https://api.highcharts.com/highcharts/plotOptions.series.showCheckbox)\n     * is true.\n     *\n     * @sample highcharts/members/chart-getselectedseries/\n     *         Get selected series\n     *\n     * @function Highcharts.Chart#getSelectedSeries\n     *\n     * @return {Array<Highcharts.Series>}\n     *         The currently selected series.\n     */\n    Chart.prototype.getSelectedSeries = function () {\n        return this.series.filter(function (serie) {\n            return serie.selected;\n        });\n    };\n    /**\n     * Set a new title or subtitle for the chart.\n     *\n     * @sample highcharts/members/chart-settitle/\n     *         Set title text and styles\n     *\n     * @function Highcharts.Chart#setTitle\n     *\n     * @param {Highcharts.TitleOptions} [titleOptions]\n     *        New title options. The title text itself is set by the\n     *        `titleOptions.text` property.\n     *\n     * @param {Highcharts.SubtitleOptions} [subtitleOptions]\n     *        New subtitle options. The subtitle text itself is set by the\n     *        `subtitleOptions.text` property.\n     *\n     * @param {boolean} [redraw]\n     *        Whether to redraw the chart or wait for a later call to\n     *        `chart.redraw()`.\n     */\n    Chart.prototype.setTitle = function (titleOptions, subtitleOptions, redraw) {\n        this.applyDescription('title', titleOptions);\n        this.applyDescription('subtitle', subtitleOptions);\n        // The initial call also adds the caption. On update, chart.update will\n        // relay to Chart.setCaption.\n        this.applyDescription('caption', void 0);\n        this.layOutTitles(redraw);\n    };\n    /**\n     * Apply a title, subtitle or caption for the chart\n     *\n     * @private\n     * @function Highcharts.Chart#applyDescription\n     * @param name {string}\n     * Either title, subtitle or caption\n     * @param {Highcharts.TitleOptions|Highcharts.SubtitleOptions|Highcharts.CaptionOptions|undefined} explicitOptions\n     * The options to set, will be merged with default options.\n     */\n    Chart.prototype.applyDescription = function (name, explicitOptions) {\n        var chart = this;\n        // Default style\n        var style = name === 'title' ? {\n            color: \"#333333\" /* Palette.neutralColor80 */,\n            fontSize: this.options.isStock ? '16px' : '18px' // #2944\n        } : {\n            color: \"#666666\" /* Palette.neutralColor60 */\n        };\n        // Merge default options with explicit options\n        var options = this.options[name] = merge(\n        // Default styles\n        (!this.styledMode && { style: style }), this.options[name], explicitOptions);\n        var elem = this[name];\n        if (elem && explicitOptions) {\n            this[name] = elem = elem.destroy(); // remove old\n        }\n        if (options && !elem) {\n            elem = this.renderer.text(options.text, 0, 0, options.useHTML)\n                .attr({\n                align: options.align,\n                'class': 'highcharts-' + name,\n                zIndex: options.zIndex || 4\n            })\n                .add();\n            // Update methods, shortcut to Chart.setTitle, Chart.setSubtitle and\n            // Chart.setCaption\n            elem.update = function (updateOptions) {\n                var fn = {\n                    title: 'setTitle',\n                    subtitle: 'setSubtitle',\n                    caption: 'setCaption'\n                }[name];\n                chart[fn](updateOptions);\n            };\n            // Presentational\n            if (!this.styledMode) {\n                elem.css(options.style);\n            }\n            /**\n             * The chart title. The title has an `update` method that allows\n             * modifying the options directly or indirectly via\n             * `chart.update`.\n             *\n             * @sample highcharts/members/title-update/\n             *         Updating titles\n             *\n             * @name Highcharts.Chart#title\n             * @type {Highcharts.TitleObject}\n             */\n            /**\n             * The chart subtitle. The subtitle has an `update` method that\n             * allows modifying the options directly or indirectly via\n             * `chart.update`.\n             *\n             * @name Highcharts.Chart#subtitle\n             * @type {Highcharts.SubtitleObject}\n             */\n            this[name] = elem;\n        }\n    };\n    /**\n     * Internal function to lay out the chart title, subtitle and caption, and\n     * cache the full offset height for use in `getMargins`. The result is\n     * stored in `this.titleOffset`.\n     *\n     * @private\n     * @function Highcharts.Chart#layOutTitles\n     *\n     * @param {boolean} [redraw=true]\n     * @emits Highcharts.Chart#event:afterLayOutTitles\n     */\n    Chart.prototype.layOutTitles = function (redraw) {\n        var titleOffset = [0, 0, 0], renderer = this.renderer, spacingBox = this.spacingBox;\n        // Lay out the title and the subtitle respectively\n        ['title', 'subtitle', 'caption'].forEach(function (key) {\n            var title = this[key], titleOptions = (this.options[key]), verticalAlign = titleOptions.verticalAlign || 'top', offset = key === 'title' ?\n                verticalAlign === 'top' ? -3 : 0 :\n                // Floating subtitle (#6574)\n                verticalAlign === 'top' ? titleOffset[0] + 2 : 0;\n            var titleSize, height;\n            if (title) {\n                if (!this.styledMode) {\n                    titleSize = (titleOptions.style &&\n                        titleOptions.style.fontSize);\n                }\n                titleSize = renderer.fontMetrics(titleSize, title).b;\n                title\n                    .css({\n                    width: (titleOptions.width ||\n                        spacingBox.width + (titleOptions.widthAdjust || 0)) + 'px'\n                });\n                // Skip the cache for HTML (#3481, #11666)\n                height = Math.round(title.getBBox(titleOptions.useHTML).height);\n                title.align(extend({\n                    y: verticalAlign === 'bottom' ?\n                        titleSize :\n                        offset + titleSize,\n                    height: height\n                }, titleOptions), false, 'spacingBox');\n                if (!titleOptions.floating) {\n                    if (verticalAlign === 'top') {\n                        titleOffset[0] = Math.ceil(titleOffset[0] +\n                            height);\n                    }\n                    else if (verticalAlign === 'bottom') {\n                        titleOffset[2] = Math.ceil(titleOffset[2] +\n                            height);\n                    }\n                }\n            }\n        }, this);\n        // Handle title.margin and caption.margin\n        if (titleOffset[0] &&\n            (this.options.title.verticalAlign || 'top') === 'top') {\n            titleOffset[0] += this.options.title.margin;\n        }\n        if (titleOffset[2] &&\n            this.options.caption.verticalAlign === 'bottom') {\n            titleOffset[2] += this.options.caption.margin;\n        }\n        var requiresDirtyBox = (!this.titleOffset ||\n            this.titleOffset.join(',') !== titleOffset.join(','));\n        // Used in getMargins\n        this.titleOffset = titleOffset;\n        fireEvent(this, 'afterLayOutTitles');\n        if (!this.isDirtyBox && requiresDirtyBox) {\n            this.isDirtyBox = this.isDirtyLegend = requiresDirtyBox;\n            // Redraw if necessary (#2719, #2744)\n            if (this.hasRendered && pick(redraw, true) && this.isDirtyBox) {\n                this.redraw();\n            }\n        }\n    };\n    /**\n     * Internal function to get the chart width and height according to options\n     * and container size. Sets {@link Chart.chartWidth} and\n     * {@link Chart.chartHeight}.\n     *\n     * @private\n     * @function Highcharts.Chart#getChartSize\n     */\n    Chart.prototype.getChartSize = function () {\n        var chart = this, optionsChart = chart.options.chart, widthOption = optionsChart.width, heightOption = optionsChart.height, renderTo = chart.renderTo;\n        // Get inner width and height\n        if (!defined(widthOption)) {\n            chart.containerWidth = getStyle(renderTo, 'width');\n        }\n        if (!defined(heightOption)) {\n            chart.containerHeight = getStyle(renderTo, 'height');\n        }\n        /**\n         * The current pixel width of the chart.\n         *\n         * @name Highcharts.Chart#chartWidth\n         * @type {number}\n         */\n        chart.chartWidth = Math.max(// #1393\n        0, widthOption || chart.containerWidth || 600 // #1460\n        );\n        /**\n         * The current pixel height of the chart.\n         *\n         * @name Highcharts.Chart#chartHeight\n         * @type {number}\n         */\n        chart.chartHeight = Math.max(0, relativeLength(heightOption, chart.chartWidth) ||\n            (chart.containerHeight > 1 ?\n                chart.containerHeight :\n                400));\n    };\n    /**\n     * If the renderTo element has no offsetWidth, most likely one or more of\n     * its parents are hidden. Loop up the DOM tree to temporarily display the\n     * parents, then save the original display properties, and when the true\n     * size is retrieved, reset them. Used on first render and on redraws.\n     *\n     * @private\n     * @function Highcharts.Chart#temporaryDisplay\n     *\n     * @param {boolean} [revert]\n     * Revert to the saved original styles.\n     */\n    Chart.prototype.temporaryDisplay = function (revert) {\n        var node = this.renderTo, tempStyle;\n        if (!revert) {\n            while (node && node.style) {\n                // When rendering to a detached node, it needs to be temporarily\n                // attached in order to read styling and bounding boxes (#5783,\n                // #7024).\n                if (!doc.body.contains(node) && !node.parentNode) {\n                    node.hcOrigDetached = true;\n                    doc.body.appendChild(node);\n                }\n                if (getStyle(node, 'display', false) === 'none' ||\n                    node.hcOricDetached) {\n                    node.hcOrigStyle = {\n                        display: node.style.display,\n                        height: node.style.height,\n                        overflow: node.style.overflow\n                    };\n                    tempStyle = {\n                        display: 'block',\n                        overflow: 'hidden'\n                    };\n                    if (node !== this.renderTo) {\n                        tempStyle.height = 0;\n                    }\n                    css(node, tempStyle);\n                    // If it still doesn't have an offset width after setting\n                    // display to block, it probably has an !important priority\n                    // #2631, 6803\n                    if (!node.offsetWidth) {\n                        node.style.setProperty('display', 'block', 'important');\n                    }\n                }\n                node = node.parentNode;\n                if (node === doc.body) {\n                    break;\n                }\n            }\n        }\n        else {\n            while (node && node.style) {\n                if (node.hcOrigStyle) {\n                    css(node, node.hcOrigStyle);\n                    delete node.hcOrigStyle;\n                }\n                if (node.hcOrigDetached) {\n                    doc.body.removeChild(node);\n                    node.hcOrigDetached = false;\n                }\n                node = node.parentNode;\n            }\n        }\n    };\n    /**\n     * Set the {@link Chart.container|chart container's} class name, in\n     * addition to `highcharts-container`.\n     *\n     * @function Highcharts.Chart#setClassName\n     *\n     * @param {string} [className]\n     * The additional class name.\n     */\n    Chart.prototype.setClassName = function (className) {\n        this.container.className = 'highcharts-container ' + (className || '');\n    };\n    /**\n     * Get the containing element, determine the size and create the inner\n     * container div to hold the chart.\n     *\n     * @private\n     * @function Highcharts.Chart#afterGetContainer\n     * @emits Highcharts.Chart#event:afterGetContainer\n     */\n    Chart.prototype.getContainer = function () {\n        var chart = this, options = chart.options, optionsChart = options.chart, indexAttrName = 'data-highcharts-chart', containerId = uniqueKey();\n        var containerStyle, renderTo = chart.renderTo;\n        if (!renderTo) {\n            chart.renderTo = renderTo =\n                optionsChart.renderTo;\n        }\n        if (isString(renderTo)) {\n            chart.renderTo = renderTo =\n                doc.getElementById(renderTo);\n        }\n        // Display an error if the renderTo is wrong\n        if (!renderTo) {\n            error(13, true, chart);\n        }\n        // If the container already holds a chart, destroy it. The check for\n        // hasRendered is there because web pages that are saved to disk from\n        // the browser, will preserve the data-highcharts-chart attribute and\n        // the SVG contents, but not an interactive chart. So in this case,\n        // charts[oldChartIndex] will point to the wrong chart if any (#2609).\n        var oldChartIndex = pInt(attr(renderTo, indexAttrName));\n        if (isNumber(oldChartIndex) &&\n            charts[oldChartIndex] &&\n            charts[oldChartIndex].hasRendered) {\n            charts[oldChartIndex].destroy();\n        }\n        // Make a reference to the chart from the div\n        attr(renderTo, indexAttrName, chart.index);\n        // remove previous chart\n        renderTo.innerHTML = AST.emptyHTML;\n        // If the container doesn't have an offsetWidth, it has or is a child of\n        // a node that has display:none. We need to temporarily move it out to a\n        // visible state to determine the size, else the legend and tooltips\n        // won't render properly. The skipClone option is used in sparklines as\n        // a micro optimization, saving about 1-2 ms each chart.\n        if (!optionsChart.skipClone && !renderTo.offsetWidth) {\n            chart.temporaryDisplay();\n        }\n        // get the width and height\n        chart.getChartSize();\n        var chartWidth = chart.chartWidth;\n        var chartHeight = chart.chartHeight;\n        // Allow table cells and flex-boxes to shrink without the chart blocking\n        // them out (#6427)\n        css(renderTo, { overflow: 'hidden' });\n        // Create the inner container\n        if (!chart.styledMode) {\n            containerStyle = extend({\n                position: 'relative',\n                // needed for context menu (avoidscrollbars) and content\n                // overflow in IE\n                overflow: 'hidden',\n                width: chartWidth + 'px',\n                height: chartHeight + 'px',\n                textAlign: 'left',\n                lineHeight: 'normal',\n                zIndex: 0,\n                '-webkit-tap-highlight-color': 'rgba(0,0,0,0)',\n                userSelect: 'none',\n                'touch-action': 'manipulation',\n                outline: 'none'\n            }, optionsChart.style || {});\n        }\n        /**\n         * The containing HTML element of the chart. The container is\n         * dynamically inserted into the element given as the `renderTo`\n         * parameter in the {@link Highcharts#chart} constructor.\n         *\n         * @name Highcharts.Chart#container\n         * @type {Highcharts.HTMLDOMElement}\n         */\n        var container = createElement('div', {\n            id: containerId\n        }, containerStyle, renderTo);\n        chart.container = container;\n        // cache the cursor (#1650)\n        chart._cursor = container.style.cursor;\n        // Initialize the renderer\n        var Renderer = optionsChart.renderer || !svg ?\n            RendererRegistry.getRendererType(optionsChart.renderer) :\n            SVGRenderer;\n        /**\n         * The renderer instance of the chart. Each chart instance has only one\n         * associated renderer.\n         *\n         * @name Highcharts.Chart#renderer\n         * @type {Highcharts.SVGRenderer}\n         */\n        chart.renderer = new Renderer(container, chartWidth, chartHeight, void 0, optionsChart.forExport, options.exporting && options.exporting.allowHTML, chart.styledMode);\n        // Set the initial animation from the options\n        setAnimation(void 0, chart);\n        chart.setClassName(optionsChart.className);\n        if (!chart.styledMode) {\n            chart.renderer.setStyle(optionsChart.style);\n        }\n        else {\n            // Initialize definitions\n            for (var key in options.defs) { // eslint-disable-line guard-for-in\n                this.renderer.definition(options.defs[key]);\n            }\n        }\n        // Add a reference to the charts index\n        chart.renderer.chartIndex = chart.index;\n        fireEvent(this, 'afterGetContainer');\n    };\n    /**\n     * Calculate margins by rendering axis labels in a preliminary position.\n     * Title, subtitle and legend have already been rendered at this stage, but\n     * will be moved into their final positions.\n     *\n     * @private\n     * @function Highcharts.Chart#getMargins\n     * @emits Highcharts.Chart#event:getMargins\n     */\n    Chart.prototype.getMargins = function (skipAxes) {\n        var _a = this, spacing = _a.spacing, margin = _a.margin, titleOffset = _a.titleOffset;\n        this.resetMargins();\n        // Adjust for title and subtitle\n        if (titleOffset[0] && !defined(margin[0])) {\n            this.plotTop = Math.max(this.plotTop, titleOffset[0] + spacing[0]);\n        }\n        if (titleOffset[2] && !defined(margin[2])) {\n            this.marginBottom = Math.max(this.marginBottom, titleOffset[2] + spacing[2]);\n        }\n        // Adjust for legend\n        if (this.legend && this.legend.display) {\n            this.legend.adjustMargins(margin, spacing);\n        }\n        fireEvent(this, 'getMargins');\n        if (!skipAxes) {\n            this.getAxisMargins();\n        }\n    };\n    /**\n     * @private\n     * @function Highcharts.Chart#getAxisMargins\n     */\n    Chart.prototype.getAxisMargins = function () {\n        var chart = this, \n        // [top, right, bottom, left]\n        axisOffset = chart.axisOffset = [0, 0, 0, 0], colorAxis = chart.colorAxis, margin = chart.margin, getOffset = function (axes) {\n            axes.forEach(function (axis) {\n                if (axis.visible) {\n                    axis.getOffset();\n                }\n            });\n        };\n        // pre-render axes to get labels offset width\n        if (chart.hasCartesianSeries) {\n            getOffset(chart.axes);\n        }\n        else if (colorAxis && colorAxis.length) {\n            getOffset(colorAxis);\n        }\n        // Add the axis offsets\n        marginNames.forEach(function (m, side) {\n            if (!defined(margin[side])) {\n                chart[m] += axisOffset[side];\n            }\n        });\n        chart.setChartSize();\n    };\n    /**\n     * Reflows the chart to its container. By default, the chart reflows\n     * automatically to its container following a `window.resize` event, as per\n     * the [chart.reflow](https://api.highcharts.com/highcharts/chart.reflow)\n     * option. However, there are no reliable events for div resize, so if the\n     * container is resized without a window resize event, this must be called\n     * explicitly.\n     *\n     * @sample highcharts/members/chart-reflow/\n     *         Resize div and reflow\n     * @sample highcharts/chart/events-container/\n     *         Pop up and reflow\n     *\n     * @function Highcharts.Chart#reflow\n     *\n     * @param {global.Event} [e]\n     *        Event arguments. Used primarily when the function is called\n     *        internally as a response to window resize.\n     */\n    Chart.prototype.reflow = function (e) {\n        var chart = this, optionsChart = chart.options.chart, renderTo = chart.renderTo, hasUserSize = (defined(optionsChart.width) &&\n            defined(optionsChart.height)), width = optionsChart.width || getStyle(renderTo, 'width'), height = optionsChart.height || getStyle(renderTo, 'height'), target = e ? e.target : win;\n        delete chart.pointer.chartPosition;\n        // Width and height checks for display:none. Target is doc in IE8 and\n        // Opera, win in Firefox, Chrome and IE9.\n        if (!hasUserSize &&\n            !chart.isPrinting &&\n            width &&\n            height &&\n            (target === win || target === doc)) {\n            if (width !== chart.containerWidth ||\n                height !== chart.containerHeight) {\n                U.clearTimeout(chart.reflowTimeout);\n                // When called from window.resize, e is set, else it's called\n                // directly (#2224)\n                chart.reflowTimeout = syncTimeout(function () {\n                    // Set size, it may have been destroyed in the meantime\n                    // (#1257)\n                    if (chart.container) {\n                        chart.setSize(void 0, void 0, false);\n                    }\n                }, e ? 100 : 0);\n            }\n            chart.containerWidth = width;\n            chart.containerHeight = height;\n        }\n    };\n    /**\n     * Toggle the event handlers necessary for auto resizing, depending on the\n     * `chart.reflow` option.\n     *\n     * @private\n     * @function Highcharts.Chart#setReflow\n     */\n    Chart.prototype.setReflow = function (reflow) {\n        var chart = this;\n        if (reflow !== false && !this.unbindReflow) {\n            this.unbindReflow = addEvent(win, 'resize', function (e) {\n                // a removed event listener still runs in Edge and IE if the\n                // listener was removed while the event runs, so check if the\n                // chart is not destroyed (#11609)\n                if (chart.options) {\n                    chart.reflow(e);\n                }\n            });\n            addEvent(this, 'destroy', this.unbindReflow);\n        }\n        else if (reflow === false && this.unbindReflow) {\n            // Unbind and unset\n            this.unbindReflow = this.unbindReflow();\n        }\n        // The following will add listeners to re-fit the chart before and after\n        // printing (#2284). However it only works in WebKit. Should have worked\n        // in Firefox, but not supported in IE.\n        /*\n        if (win.matchMedia) {\n            win.matchMedia('print').addListener(function reflow() {\n                chart.reflow();\n            });\n        }\n        //*/\n    };\n    /**\n     * Resize the chart to a given width and height. In order to set the width\n     * only, the height argument may be skipped. To set the height only, pass\n     * `undefined` for the width.\n     *\n     * @sample highcharts/members/chart-setsize-button/\n     *         Test resizing from buttons\n     * @sample highcharts/members/chart-setsize-jquery-resizable/\n     *         Add a jQuery UI resizable\n     * @sample stock/members/chart-setsize/\n     *         Highcharts Stock with UI resizable\n     *\n     * @function Highcharts.Chart#setSize\n     *\n     * @param {number|null} [width]\n     *        The new pixel width of the chart. Since v4.2.6, the argument can\n     *        be `undefined` in order to preserve the current value (when\n     *        setting height only), or `null` to adapt to the width of the\n     *        containing element.\n     *\n     * @param {number|null} [height]\n     *        The new pixel height of the chart. Since v4.2.6, the argument can\n     *        be `undefined` in order to preserve the current value, or `null`\n     *        in order to adapt to the height of the containing element.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation=true]\n     *        Whether and how to apply animation.\n     *\n     *\n     * @emits Highcharts.Chart#event:endResize\n     * @emits Highcharts.Chart#event:resize\n     */\n    Chart.prototype.setSize = function (width, height, animation) {\n        var chart = this, renderer = chart.renderer;\n        // Handle the isResizing counter\n        chart.isResizing += 1;\n        // set the animation for the current process\n        setAnimation(animation, chart);\n        var globalAnimation = renderer.globalAnimation;\n        chart.oldChartHeight = chart.chartHeight;\n        chart.oldChartWidth = chart.chartWidth;\n        if (typeof width !== 'undefined') {\n            chart.options.chart.width = width;\n        }\n        if (typeof height !== 'undefined') {\n            chart.options.chart.height = height;\n        }\n        chart.getChartSize();\n        // Resize the container with the global animation applied if enabled\n        // (#2503)\n        if (!chart.styledMode) {\n            (globalAnimation ? animate : css)(chart.container, {\n                width: chart.chartWidth + 'px',\n                height: chart.chartHeight + 'px'\n            }, globalAnimation);\n        }\n        chart.setChartSize(true);\n        renderer.setSize(chart.chartWidth, chart.chartHeight, globalAnimation);\n        // handle axes\n        chart.axes.forEach(function (axis) {\n            axis.isDirty = true;\n            axis.setScale();\n        });\n        chart.isDirtyLegend = true; // force legend redraw\n        chart.isDirtyBox = true; // force redraw of plot and chart border\n        chart.layOutTitles(); // #2857\n        chart.getMargins();\n        chart.redraw(globalAnimation);\n        chart.oldChartHeight = null;\n        fireEvent(chart, 'resize');\n        // Fire endResize and set isResizing back. If animation is disabled,\n        // fire without delay\n        syncTimeout(function () {\n            if (chart) {\n                fireEvent(chart, 'endResize', null, function () {\n                    chart.isResizing -= 1;\n                });\n            }\n        }, animObject(globalAnimation).duration);\n    };\n    /**\n     * Set the public chart properties. This is done before and after the\n     * pre-render to determine margin sizes.\n     *\n     * @private\n     * @function Highcharts.Chart#setChartSize\n     * @emits Highcharts.Chart#event:afterSetChartSize\n     */\n    Chart.prototype.setChartSize = function (skipAxes) {\n        var chart = this, inverted = chart.inverted, renderer = chart.renderer, chartWidth = chart.chartWidth, chartHeight = chart.chartHeight, optionsChart = chart.options.chart, spacing = chart.spacing, clipOffset = chart.clipOffset;\n        var plotLeft, plotTop, plotWidth, plotHeight;\n        /**\n         * The current left position of the plot area in pixels.\n         *\n         * @name Highcharts.Chart#plotLeft\n         * @type {number}\n         */\n        chart.plotLeft = plotLeft = Math.round(chart.plotLeft);\n        /**\n         * The current top position of the plot area in pixels.\n         *\n         * @name Highcharts.Chart#plotTop\n         * @type {number}\n         */\n        chart.plotTop = plotTop = Math.round(chart.plotTop);\n        /**\n         * The current width of the plot area in pixels.\n         *\n         * @name Highcharts.Chart#plotWidth\n         * @type {number}\n         */\n        chart.plotWidth = plotWidth = Math.max(0, Math.round(chartWidth - plotLeft - chart.marginRight));\n        /**\n         * The current height of the plot area in pixels.\n         *\n         * @name Highcharts.Chart#plotHeight\n         * @type {number}\n         */\n        chart.plotHeight = plotHeight = Math.max(0, Math.round(chartHeight - plotTop - chart.marginBottom));\n        chart.plotSizeX = inverted ? plotHeight : plotWidth;\n        chart.plotSizeY = inverted ? plotWidth : plotHeight;\n        chart.plotBorderWidth = optionsChart.plotBorderWidth || 0;\n        // Set boxes used for alignment\n        chart.spacingBox = renderer.spacingBox = {\n            x: spacing[3],\n            y: spacing[0],\n            width: chartWidth - spacing[3] - spacing[1],\n            height: chartHeight - spacing[0] - spacing[2]\n        };\n        chart.plotBox = renderer.plotBox = {\n            x: plotLeft,\n            y: plotTop,\n            width: plotWidth,\n            height: plotHeight\n        };\n        var plotBorderWidth = 2 * Math.floor(chart.plotBorderWidth / 2), clipX = Math.ceil(Math.max(plotBorderWidth, clipOffset[3]) / 2), clipY = Math.ceil(Math.max(plotBorderWidth, clipOffset[0]) / 2);\n        chart.clipBox = {\n            x: clipX,\n            y: clipY,\n            width: Math.floor(chart.plotSizeX -\n                Math.max(plotBorderWidth, clipOffset[1]) / 2 -\n                clipX),\n            height: Math.max(0, Math.floor(chart.plotSizeY -\n                Math.max(plotBorderWidth, clipOffset[2]) / 2 -\n                clipY))\n        };\n        if (!skipAxes) {\n            chart.axes.forEach(function (axis) {\n                axis.setAxisSize();\n                axis.setAxisTranslation();\n            });\n            renderer.alignElements();\n        }\n        fireEvent(chart, 'afterSetChartSize', { skipAxes: skipAxes });\n    };\n    /**\n     * Initial margins before auto size margins are applied.\n     *\n     * @private\n     * @function Highcharts.Chart#resetMargins\n     */\n    Chart.prototype.resetMargins = function () {\n        fireEvent(this, 'resetMargins');\n        var chart = this, chartOptions = chart.options.chart;\n        // Create margin and spacing array\n        ['margin', 'spacing'].forEach(function splashArrays(target) {\n            var value = chartOptions[target], values = isObject(value) ? value : [value, value, value, value];\n            [\n                'Top',\n                'Right',\n                'Bottom',\n                'Left'\n            ].forEach(function (sideName, side) {\n                chart[target][side] = pick(chartOptions[target + sideName], values[side]);\n            });\n        });\n        // Set margin names like chart.plotTop, chart.plotLeft,\n        // chart.marginRight, chart.marginBottom.\n        marginNames.forEach(function (m, side) {\n            chart[m] = pick(chart.margin[side], chart.spacing[side]);\n        });\n        chart.axisOffset = [0, 0, 0, 0]; // top, right, bottom, left\n        chart.clipOffset = [0, 0, 0, 0];\n    };\n    /**\n     * Internal function to draw or redraw the borders and backgrounds for chart\n     * and plot area.\n     *\n     * @private\n     * @function Highcharts.Chart#drawChartBox\n     * @emits Highcharts.Chart#event:afterDrawChartBox\n     */\n    Chart.prototype.drawChartBox = function () {\n        var chart = this, optionsChart = chart.options.chart, renderer = chart.renderer, chartWidth = chart.chartWidth, chartHeight = chart.chartHeight, styledMode = chart.styledMode, plotBGImage = chart.plotBGImage, chartBackgroundColor = optionsChart.backgroundColor, plotBackgroundColor = optionsChart.plotBackgroundColor, plotBackgroundImage = optionsChart.plotBackgroundImage, plotLeft = chart.plotLeft, plotTop = chart.plotTop, plotWidth = chart.plotWidth, plotHeight = chart.plotHeight, plotBox = chart.plotBox, clipRect = chart.clipRect, clipBox = chart.clipBox;\n        var chartBackground = chart.chartBackground, plotBackground = chart.plotBackground, plotBorder = chart.plotBorder, chartBorderWidth, mgn, bgAttr, verb = 'animate';\n        // Chart area\n        if (!chartBackground) {\n            chart.chartBackground = chartBackground = renderer.rect()\n                .addClass('highcharts-background')\n                .add();\n            verb = 'attr';\n        }\n        if (!styledMode) {\n            // Presentational\n            chartBorderWidth = optionsChart.borderWidth || 0;\n            mgn = chartBorderWidth + (optionsChart.shadow ? 8 : 0);\n            bgAttr = {\n                fill: chartBackgroundColor || 'none'\n            };\n            if (chartBorderWidth || chartBackground['stroke-width']) { // #980\n                bgAttr.stroke = optionsChart.borderColor;\n                bgAttr['stroke-width'] = chartBorderWidth;\n            }\n            chartBackground\n                .attr(bgAttr)\n                .shadow(optionsChart.shadow);\n        }\n        else {\n            chartBorderWidth = mgn = chartBackground.strokeWidth();\n        }\n        chartBackground[verb]({\n            x: mgn / 2,\n            y: mgn / 2,\n            width: chartWidth - mgn - chartBorderWidth % 2,\n            height: chartHeight - mgn - chartBorderWidth % 2,\n            r: optionsChart.borderRadius\n        });\n        // Plot background\n        verb = 'animate';\n        if (!plotBackground) {\n            verb = 'attr';\n            chart.plotBackground = plotBackground = renderer.rect()\n                .addClass('highcharts-plot-background')\n                .add();\n        }\n        plotBackground[verb](plotBox);\n        if (!styledMode) {\n            // Presentational attributes for the background\n            plotBackground\n                .attr({\n                fill: plotBackgroundColor || 'none'\n            })\n                .shadow(optionsChart.plotShadow);\n            // Create the background image\n            if (plotBackgroundImage) {\n                if (!plotBGImage) {\n                    chart.plotBGImage = renderer.image(plotBackgroundImage, plotLeft, plotTop, plotWidth, plotHeight).add();\n                }\n                else {\n                    if (plotBackgroundImage !== plotBGImage.attr('href')) {\n                        plotBGImage.attr('href', plotBackgroundImage);\n                    }\n                    plotBGImage.animate(plotBox);\n                }\n            }\n        }\n        // Plot clip\n        if (!clipRect) {\n            chart.clipRect = renderer.clipRect(clipBox);\n        }\n        else {\n            clipRect.animate({\n                width: clipBox.width,\n                height: clipBox.height\n            });\n        }\n        // Plot area border\n        verb = 'animate';\n        if (!plotBorder) {\n            verb = 'attr';\n            chart.plotBorder = plotBorder = renderer.rect()\n                .addClass('highcharts-plot-border')\n                .attr({\n                zIndex: 1 // Above the grid\n            })\n                .add();\n        }\n        if (!styledMode) {\n            // Presentational\n            plotBorder.attr({\n                stroke: optionsChart.plotBorderColor,\n                'stroke-width': optionsChart.plotBorderWidth || 0,\n                fill: 'none'\n            });\n        }\n        plotBorder[verb](plotBorder.crisp({\n            x: plotLeft,\n            y: plotTop,\n            width: plotWidth,\n            height: plotHeight\n        }, -plotBorder.strokeWidth())); // #3282 plotBorder should be negative;\n        // reset\n        chart.isDirtyBox = false;\n        fireEvent(this, 'afterDrawChartBox');\n    };\n    /**\n     * Detect whether a certain chart property is needed based on inspecting its\n     * options and series. This mainly applies to the chart.inverted property,\n     * and in extensions to the chart.angular and chart.polar properties.\n     *\n     * @private\n     * @function Highcharts.Chart#propFromSeries\n     */\n    Chart.prototype.propFromSeries = function () {\n        var chart = this, optionsChart = chart.options.chart, seriesOptions = chart.options.series;\n        var i, klass, value;\n        /**\n         * The flag is set to `true` if a series of the chart is inverted.\n         *\n         * @name Highcharts.Chart#inverted\n         * @type {boolean|undefined}\n         */\n        ['inverted', 'angular', 'polar'].forEach(function (key) {\n            // The default series type's class\n            klass = seriesTypes[(optionsChart.type || optionsChart.defaultSeriesType)];\n            // Get the value from available chart-wide properties\n            value =\n                // It is set in the options:\n                optionsChart[key] ||\n                    // The default series class:\n                    (klass && klass.prototype[key]);\n            // requires it\n            // 4. Check if any the chart's series require it\n            i = seriesOptions && seriesOptions.length;\n            while (!value && i--) {\n                klass = seriesTypes[seriesOptions[i].type];\n                if (klass && klass.prototype[key]) {\n                    value = true;\n                }\n            }\n            // Set the chart property\n            chart[key] = value;\n        });\n    };\n    /**\n     * Internal function to link two or more series together, based on the\n     * `linkedTo` option. This is done from `Chart.render`, and after\n     * `Chart.addSeries` and `Series.remove`.\n     *\n     * @private\n     * @function Highcharts.Chart#linkSeries\n     * @emits Highcharts.Chart#event:afterLinkSeries\n     */\n    Chart.prototype.linkSeries = function () {\n        var chart = this, chartSeries = chart.series;\n        // Reset links\n        chartSeries.forEach(function (series) {\n            series.linkedSeries.length = 0;\n        });\n        // Apply new links\n        chartSeries.forEach(function (series) {\n            var linkedTo = series.options.linkedTo;\n            if (isString(linkedTo)) {\n                if (linkedTo === ':previous') {\n                    linkedTo = chart.series[series.index - 1];\n                }\n                else {\n                    linkedTo = chart.get(linkedTo);\n                }\n                // #3341 avoid mutual linking\n                if (linkedTo && linkedTo.linkedParent !== series) {\n                    linkedTo.linkedSeries.push(series);\n                    series.linkedParent = linkedTo;\n                    if (linkedTo.enabledDataSorting) {\n                        series.setDataSortingOptions();\n                    }\n                    series.visible = pick(series.options.visible, linkedTo.options.visible, series.visible); // #3879\n                }\n            }\n        });\n        fireEvent(this, 'afterLinkSeries');\n    };\n    /**\n     * Render series for the chart.\n     *\n     * @private\n     * @function Highcharts.Chart#renderSeries\n     */\n    Chart.prototype.renderSeries = function () {\n        this.series.forEach(function (serie) {\n            serie.translate();\n            serie.render();\n        });\n    };\n    /**\n     * Render labels for the chart.\n     *\n     * @private\n     * @function Highcharts.Chart#renderLabels\n     */\n    Chart.prototype.renderLabels = function () {\n        var chart = this, labels = chart.options.labels;\n        if (labels.items) {\n            labels.items.forEach(function (label) {\n                var style = extend(labels.style, label.style), x = pInt(style.left) + chart.plotLeft, y = pInt(style.top) + chart.plotTop + 12;\n                // delete to prevent rewriting in IE\n                delete style.left;\n                delete style.top;\n                chart.renderer.text(label.html, x, y)\n                    .attr({ zIndex: 2 })\n                    .css(style)\n                    .add();\n            });\n        }\n    };\n    /**\n     * Render all graphics for the chart. Runs internally on initialization.\n     *\n     * @private\n     * @function Highcharts.Chart#render\n     */\n    Chart.prototype.render = function () {\n        var chart = this, axes = chart.axes, colorAxis = chart.colorAxis, renderer = chart.renderer, options = chart.options, renderAxes = function (axes) {\n            axes.forEach(function (axis) {\n                if (axis.visible) {\n                    axis.render();\n                }\n            });\n        };\n        var correction = 0; // correction for X axis labels\n        // Title\n        chart.setTitle();\n        /**\n         * The overview of the chart's series.\n         *\n         * @name Highcharts.Chart#legend\n         * @type {Highcharts.Legend}\n         */\n        chart.legend = new Legend(chart, options.legend);\n        // Get stacks\n        if (chart.getStacks) {\n            chart.getStacks();\n        }\n        // Get chart margins\n        chart.getMargins(true);\n        chart.setChartSize();\n        // Record preliminary dimensions for later comparison\n        var tempWidth = chart.plotWidth;\n        axes.some(function (axis) {\n            if (axis.horiz &&\n                axis.visible &&\n                axis.options.labels.enabled &&\n                axis.series.length) {\n                // 21 is the most common correction for X axis labels\n                correction = 21;\n                return true;\n            }\n        });\n        // use Math.max to prevent negative plotHeight\n        chart.plotHeight = Math.max(chart.plotHeight - correction, 0);\n        var tempHeight = chart.plotHeight;\n        // Get margins by pre-rendering axes\n        axes.forEach(function (axis) {\n            axis.setScale();\n        });\n        chart.getAxisMargins();\n        // If the plot area size has changed significantly, calculate tick\n        // positions again\n        var redoHorizontal = tempWidth / chart.plotWidth > 1.1;\n        // Height is more sensitive, use lower threshold\n        var redoVertical = tempHeight / chart.plotHeight > 1.05;\n        if (redoHorizontal || redoVertical) {\n            axes.forEach(function (axis) {\n                if ((axis.horiz && redoHorizontal) ||\n                    (!axis.horiz && redoVertical)) {\n                    // update to reflect the new margins\n                    axis.setTickInterval(true);\n                }\n            });\n            chart.getMargins(); // second pass to check for new labels\n        }\n        // Draw the borders and backgrounds\n        chart.drawChartBox();\n        // Axes\n        if (chart.hasCartesianSeries) {\n            renderAxes(axes);\n        }\n        else if (colorAxis && colorAxis.length) {\n            renderAxes(colorAxis);\n        }\n        // The series\n        if (!chart.seriesGroup) {\n            chart.seriesGroup = renderer.g('series-group')\n                .attr({ zIndex: 3 })\n                .add();\n        }\n        chart.renderSeries();\n        // Labels\n        chart.renderLabels();\n        // Credits\n        chart.addCredits();\n        // Handle responsiveness\n        if (chart.setResponsive) {\n            chart.setResponsive();\n        }\n        // Set flag\n        chart.hasRendered = true;\n    };\n    /**\n     * Set a new credits label for the chart.\n     *\n     * @sample highcharts/credits/credits-update/\n     *         Add and update credits\n     *\n     * @function Highcharts.Chart#addCredits\n     *\n     * @param {Highcharts.CreditsOptions} [credits]\n     * A configuration object for the new credits.\n     */\n    Chart.prototype.addCredits = function (credits) {\n        var chart = this, creds = merge(true, this.options.credits, credits);\n        if (creds.enabled && !this.credits) {\n            /**\n             * The chart's credits label. The label has an `update` method that\n             * allows setting new options as per the\n             * [credits options set](https://api.highcharts.com/highcharts/credits).\n             *\n             * @name Highcharts.Chart#credits\n             * @type {Highcharts.SVGElement}\n             */\n            this.credits = this.renderer.text(creds.text + (this.mapCredits || ''), 0, 0)\n                .addClass('highcharts-credits')\n                .on('click', function () {\n                if (creds.href) {\n                    win.location.href = creds.href;\n                }\n            })\n                .attr({\n                align: creds.position.align,\n                zIndex: 8\n            });\n            if (!chart.styledMode) {\n                this.credits.css(creds.style);\n            }\n            this.credits\n                .add()\n                .align(creds.position);\n            // Dynamically update\n            this.credits.update = function (options) {\n                chart.credits = chart.credits.destroy();\n                chart.addCredits(options);\n            };\n        }\n    };\n    /**\n     * Remove the chart and purge memory. This method is called internally\n     * before adding a second chart into the same container, as well as on\n     * window unload to prevent leaks.\n     *\n     * @sample highcharts/members/chart-destroy/\n     *         Destroy the chart from a button\n     * @sample stock/members/chart-destroy/\n     *         Destroy with Highcharts Stock\n     *\n     * @function Highcharts.Chart#destroy\n     *\n     * @emits Highcharts.Chart#event:destroy\n     */\n    Chart.prototype.destroy = function () {\n        var chart = this, axes = chart.axes, series = chart.series, container = chart.container, parentNode = container && container.parentNode;\n        var i;\n        // fire the chart.destoy event\n        fireEvent(chart, 'destroy');\n        // Delete the chart from charts lookup array\n        if (chart.renderer.forExport) {\n            erase(charts, chart); // #6569\n        }\n        else {\n            charts[chart.index] = void 0;\n        }\n        H.chartCount--;\n        chart.renderTo.removeAttribute('data-highcharts-chart');\n        // remove events\n        removeEvent(chart);\n        // ==== Destroy collections:\n        // Destroy axes\n        i = axes.length;\n        while (i--) {\n            axes[i] = axes[i].destroy();\n        }\n        // Destroy scroller & scroller series before destroying base series\n        if (this.scroller && this.scroller.destroy) {\n            this.scroller.destroy();\n        }\n        // Destroy each series\n        i = series.length;\n        while (i--) {\n            series[i] = series[i].destroy();\n        }\n        // ==== Destroy chart properties:\n        [\n            'title', 'subtitle', 'chartBackground', 'plotBackground',\n            'plotBGImage', 'plotBorder', 'seriesGroup', 'clipRect', 'credits',\n            'pointer', 'rangeSelector', 'legend', 'resetZoomButton', 'tooltip',\n            'renderer'\n        ].forEach(function (name) {\n            var prop = chart[name];\n            if (prop && prop.destroy) {\n                chart[name] = prop.destroy();\n            }\n        });\n        // Remove container and all SVG, check container as it can break in IE\n        // when destroyed before finished loading\n        if (container) {\n            container.innerHTML = AST.emptyHTML;\n            removeEvent(container);\n            if (parentNode) {\n                discardElement(container);\n            }\n        }\n        // clean it all up\n        objectEach(chart, function (val, key) {\n            delete chart[key];\n        });\n    };\n    /**\n     * Prepare for first rendering after all data are loaded.\n     *\n     * @private\n     * @function Highcharts.Chart#firstRender\n     * @emits Highcharts.Chart#event:beforeRender\n     */\n    Chart.prototype.firstRender = function () {\n        var chart = this, options = chart.options;\n        // Hook for oldIE to check whether the chart is ready to render\n        if (chart.isReadyToRender && !chart.isReadyToRender()) {\n            return;\n        }\n        // Create the container\n        chart.getContainer();\n        chart.resetMargins();\n        chart.setChartSize();\n        // Set the common chart properties (mainly invert) from the given series\n        chart.propFromSeries();\n        // get axes\n        chart.getAxes();\n        // Initialize the series\n        (isArray(options.series) ? options.series : []).forEach(\n        // #9680\n        function (serieOptions) {\n            chart.initSeries(serieOptions);\n        });\n        chart.linkSeries();\n        chart.setSeriesData();\n        // Run an event after axes and series are initialized, but before\n        // render. At this stage, the series data is indexed and cached in the\n        // xData and yData arrays, so we can access those before rendering. Used\n        // in Highcharts Stock.\n        fireEvent(chart, 'beforeRender');\n        // depends on inverted and on margins being set\n        if (Pointer) {\n            if (MSPointer.isRequired()) {\n                chart.pointer = new MSPointer(chart, options);\n            }\n            else {\n                /**\n                 * The Pointer that keeps track of mouse and touch interaction.\n                 *\n                 * @memberof Highcharts.Chart\n                 * @name pointer\n                 * @type {Highcharts.Pointer}\n                 * @instance\n                 */\n                chart.pointer = new Pointer(chart, options);\n            }\n        }\n        chart.render();\n        chart.pointer.getChartPosition(); // #14973\n        // Fire the load event if there are no external images\n        if (!chart.renderer.imgCount && !chart.hasLoaded) {\n            chart.onload();\n        }\n        // If the chart was rendered outside the top container, put it back in\n        // (#3679)\n        chart.temporaryDisplay(true);\n    };\n    /**\n     * Internal function that runs on chart load, async if any images are loaded\n     * in the chart. Runs the callbacks and triggers the `load` and `render`\n     * events.\n     *\n     * @private\n     * @function Highcharts.Chart#onload\n     * @emits Highcharts.Chart#event:load\n     * @emits Highcharts.Chart#event:render\n     */\n    Chart.prototype.onload = function () {\n        // Run callbacks, first the ones registered by modules, then user's one\n        this.callbacks.concat([this.callback]).forEach(function (fn) {\n            // Chart destroyed in its own callback (#3600)\n            if (fn && typeof this.index !== 'undefined') {\n                fn.apply(this, [this]);\n            }\n        }, this);\n        fireEvent(this, 'load');\n        fireEvent(this, 'render');\n        // Set up auto resize, check for not destroyed (#6068)\n        if (defined(this.index)) {\n            this.setReflow(this.options.chart.reflow);\n        }\n        this.warnIfA11yModuleNotLoaded();\n        // Don't run again\n        this.hasLoaded = true;\n    };\n    /**\n     * Emit console warning if the a11y module is not loaded.\n     */\n    Chart.prototype.warnIfA11yModuleNotLoaded = function () {\n        var _a = this, options = _a.options, title = _a.title;\n        if (options && !this.accessibility) {\n            // Make chart behave as an image with the title as alt text\n            this.renderer.boxWrapper.attr({\n                role: 'img',\n                'aria-label': ((title && title.element.textContent) || ''\n                // #17753, < is not allowed in SVG attributes\n                ).replace(/</g, '&lt;')\n            });\n            if (!(options.accessibility && options.accessibility.enabled === false)) {\n                error('Highcharts warning: Consider including the ' +\n                    '\"accessibility.js\" module to make your chart more ' +\n                    'usable for people with disabilities. Set the ' +\n                    '\"accessibility.enabled\" option to false to remove this ' +\n                    'warning. See https://www.highcharts.com/docs/accessibility/accessibility-module.', false, this);\n            }\n        }\n    };\n    /**\n     * Add a series to the chart after render time. Note that this method should\n     * never be used when adding data synchronously at chart render time, as it\n     * adds expense to the calculations and rendering. When adding data at the\n     * same time as the chart is initialized, add the series as a configuration\n     * option instead. With multiple axes, the `offset` is dynamically adjusted.\n     *\n     * @sample highcharts/members/chart-addseries/\n     *         Add a series from a button\n     * @sample stock/members/chart-addseries/\n     *         Add a series in Highcharts Stock\n     *\n     * @function Highcharts.Chart#addSeries\n     *\n     * @param {Highcharts.SeriesOptionsType} options\n     *        The config options for the series.\n     *\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw the chart after adding.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        Whether to apply animation, and optionally animation\n     *        configuration.\n     *\n     * @return {Highcharts.Series}\n     *         The newly created series object.\n     *\n     * @emits Highcharts.Chart#event:addSeries\n     * @emits Highcharts.Chart#event:afterAddSeries\n     */\n    Chart.prototype.addSeries = function (options, redraw, animation) {\n        var chart = this;\n        var series;\n        if (options) { // <- not necessary\n            redraw = pick(redraw, true); // defaults to true\n            fireEvent(chart, 'addSeries', { options: options }, function () {\n                series = chart.initSeries(options);\n                chart.isDirtyLegend = true;\n                chart.linkSeries();\n                if (series.enabledDataSorting) {\n                    // We need to call `setData` after `linkSeries`\n                    series.setData(options.data, false);\n                }\n                fireEvent(chart, 'afterAddSeries', { series: series });\n                if (redraw) {\n                    chart.redraw(animation);\n                }\n            });\n        }\n        return series;\n    };\n    /**\n     * Add an axis to the chart after render time. Note that this method should\n     * never be used when adding data synchronously at chart render time, as it\n     * adds expense to the calculations and rendering. When adding data at the\n     * same time as the chart is initialized, add the axis as a configuration\n     * option instead.\n     *\n     * @sample highcharts/members/chart-addaxis/\n     *         Add and remove axes\n     *\n     * @function Highcharts.Chart#addAxis\n     *\n     * @param {Highcharts.AxisOptions} options\n     *        The axis options.\n     *\n     * @param {boolean} [isX=false]\n     *        Whether it is an X axis or a value axis.\n     *\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw the chart after adding.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation=true]\n     *        Whether and how to apply animation in the redraw.\n     *\n     * @return {Highcharts.Axis}\n     *         The newly generated Axis object.\n     */\n    Chart.prototype.addAxis = function (options, isX, redraw, animation) {\n        return this.createAxis(isX ? 'xAxis' : 'yAxis', { axis: options, redraw: redraw, animation: animation });\n    };\n    /**\n     * Add a color axis to the chart after render time. Note that this method\n     * should never be used when adding data synchronously at chart render time,\n     * as it adds expense to the calculations and rendering. When adding data at\n     * the same time as the chart is initialized, add the axis as a\n     * configuration option instead.\n     *\n     * @sample highcharts/members/chart-addaxis/\n     *         Add and remove axes\n     *\n     * @function Highcharts.Chart#addColorAxis\n     *\n     * @param {Highcharts.ColorAxisOptions} options\n     *        The axis options.\n     *\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw the chart after adding.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation=true]\n     *        Whether and how to apply animation in the redraw.\n     *\n     * @return {Highcharts.ColorAxis}\n     *         The newly generated Axis object.\n     */\n    Chart.prototype.addColorAxis = function (options, redraw, animation) {\n        return this.createAxis('colorAxis', { axis: options, redraw: redraw, animation: animation });\n    };\n    /**\n     * Factory for creating different axis types.\n     *\n     * @private\n     * @function Highcharts.Chart#createAxis\n     *\n     * @param {string} type\n     *        An axis type.\n     *\n     * @param {...Array<*>} arguments\n     *        All arguments for the constructor.\n     *\n     * @return {Highcharts.Axis | Highcharts.ColorAxis}\n     *         The newly generated Axis object.\n     */\n    Chart.prototype.createAxis = function (type, options) {\n        var axis = new Axis(this, merge(options.axis, {\n            index: this[type].length,\n            isX: type === 'xAxis'\n        }));\n        if (pick(options.redraw, true)) {\n            this.redraw(options.animation);\n        }\n        return axis;\n    };\n    /**\n     * Dim the chart and show a loading text or symbol. Options for the loading\n     * screen are defined in {@link\n     * https://api.highcharts.com/highcharts/loading|the loading options}.\n     *\n     * @sample highcharts/members/chart-hideloading/\n     *         Show and hide loading from a button\n     * @sample highcharts/members/chart-showloading/\n     *         Apply different text labels\n     * @sample stock/members/chart-show-hide-loading/\n     *         Toggle loading in Highcharts Stock\n     *\n     * @function Highcharts.Chart#showLoading\n     *\n     * @param {string} [str]\n     *        An optional text to show in the loading label instead of the\n     *        default one. The default text is set in\n     *        [lang.loading](https://api.highcharts.com/highcharts/lang.loading).\n     */\n    Chart.prototype.showLoading = function (str) {\n        var chart = this, options = chart.options, loadingOptions = options.loading, setLoadingSize = function () {\n            if (loadingDiv) {\n                css(loadingDiv, {\n                    left: chart.plotLeft + 'px',\n                    top: chart.plotTop + 'px',\n                    width: chart.plotWidth + 'px',\n                    height: chart.plotHeight + 'px'\n                });\n            }\n        };\n        var loadingDiv = chart.loadingDiv, loadingSpan = chart.loadingSpan;\n        // create the layer at the first call\n        if (!loadingDiv) {\n            chart.loadingDiv = loadingDiv = createElement('div', {\n                className: 'highcharts-loading highcharts-loading-hidden'\n            }, null, chart.container);\n        }\n        if (!loadingSpan) {\n            chart.loadingSpan = loadingSpan = createElement('span', { className: 'highcharts-loading-inner' }, null, loadingDiv);\n            addEvent(chart, 'redraw', setLoadingSize); // #1080\n        }\n        loadingDiv.className = 'highcharts-loading';\n        // Update text\n        AST.setElementHTML(loadingSpan, pick(str, options.lang.loading, ''));\n        if (!chart.styledMode) {\n            // Update visuals\n            css(loadingDiv, extend(loadingOptions.style, {\n                zIndex: 10\n            }));\n            css(loadingSpan, loadingOptions.labelStyle);\n            // Show it\n            if (!chart.loadingShown) {\n                css(loadingDiv, {\n                    opacity: 0,\n                    display: ''\n                });\n                animate(loadingDiv, {\n                    opacity: loadingOptions.style.opacity || 0.5\n                }, {\n                    duration: loadingOptions.showDuration || 0\n                });\n            }\n        }\n        chart.loadingShown = true;\n        setLoadingSize();\n    };\n    /**\n     * Hide the loading layer.\n     *\n     * @see Highcharts.Chart#showLoading\n     *\n     * @sample highcharts/members/chart-hideloading/\n     *         Show and hide loading from a button\n     * @sample stock/members/chart-show-hide-loading/\n     *         Toggle loading in Highcharts Stock\n     *\n     * @function Highcharts.Chart#hideLoading\n     */\n    Chart.prototype.hideLoading = function () {\n        var options = this.options, loadingDiv = this.loadingDiv;\n        if (loadingDiv) {\n            loadingDiv.className =\n                'highcharts-loading highcharts-loading-hidden';\n            if (!this.styledMode) {\n                animate(loadingDiv, {\n                    opacity: 0\n                }, {\n                    duration: options.loading.hideDuration || 100,\n                    complete: function () {\n                        css(loadingDiv, { display: 'none' });\n                    }\n                });\n            }\n        }\n        this.loadingShown = false;\n    };\n    /**\n     * A generic function to update any element of the chart. Elements can be\n     * enabled and disabled, moved, re-styled, re-formatted etc.\n     *\n     * A special case is configuration objects that take arrays, for example\n     * [xAxis](https://api.highcharts.com/highcharts/xAxis),\n     * [yAxis](https://api.highcharts.com/highcharts/yAxis) or\n     * [series](https://api.highcharts.com/highcharts/series). For these\n     * collections, an `id` option is used to map the new option set to an\n     * existing object. If an existing object of the same id is not found, the\n     * corresponding item is updated. So for example, running `chart.update`\n     * with a series item without an id, will cause the existing chart's series\n     * with the same index in the series array to be updated. When the\n     * `oneToOne` parameter is true, `chart.update` will also take care of\n     * adding and removing items from the collection. Read more under the\n     * parameter description below.\n     *\n     * Note that when changing series data, `chart.update` may mutate the passed\n     * data options.\n     *\n     * See also the\n     * [responsive option set](https://api.highcharts.com/highcharts/responsive).\n     * Switching between `responsive.rules` basically runs `chart.update` under\n     * the hood.\n     *\n     * @sample highcharts/members/chart-update/\n     *         Update chart geometry\n     *\n     * @function Highcharts.Chart#update\n     *\n     * @param {Highcharts.Options} options\n     *        A configuration object for the new chart options.\n     *\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw the chart.\n     *\n     * @param {boolean} [oneToOne=false]\n     *        When `true`, the `series`, `xAxis`, `yAxis` and `annotations`\n     *        collections will be updated one to one, and items will be either\n     *        added or removed to match the new updated options. For example,\n     *        if the chart has two series and we call `chart.update` with a\n     *        configuration containing three series, one will be added. If we\n     *        call `chart.update` with one series, one will be removed. Setting\n     *        an empty `series` array will remove all series, but leaving out\n     *        the`series` property will leave all series untouched. If the\n     *        series have id's, the new series options will be matched by id,\n     *        and the remaining ones removed.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation=true]\n     *        Whether to apply animation, and optionally animation\n     *        configuration.\n     *\n     * @emits Highcharts.Chart#event:update\n     * @emits Highcharts.Chart#event:afterUpdate\n     */\n    Chart.prototype.update = function (options, redraw, oneToOne, animation) {\n        var chart = this, adders = {\n            credits: 'addCredits',\n            title: 'setTitle',\n            subtitle: 'setSubtitle',\n            caption: 'setCaption'\n        }, isResponsiveOptions = options.isResponsiveOptions, itemsForRemoval = [];\n        var updateAllAxes, updateAllSeries, runSetSize;\n        fireEvent(chart, 'update', { options: options });\n        // If there are responsive rules in action, undo the responsive rules\n        // before we apply the updated options and replay the responsive rules\n        // on top from the chart.redraw function (#9617).\n        if (!isResponsiveOptions) {\n            chart.setResponsive(false, true);\n        }\n        options = cleanRecursively(options, chart.options);\n        chart.userOptions = merge(chart.userOptions, options);\n        // If the top-level chart option is present, some special updates are\n        // required\n        var optionsChart = options.chart;\n        if (optionsChart) {\n            merge(true, chart.options.chart, optionsChart);\n            // Setter function\n            if ('className' in optionsChart) {\n                chart.setClassName(optionsChart.className);\n            }\n            if ('reflow' in optionsChart) {\n                chart.setReflow(optionsChart.reflow);\n            }\n            if ('inverted' in optionsChart ||\n                'polar' in optionsChart ||\n                'type' in optionsChart) {\n                // Parse options.chart.inverted and options.chart.polar together\n                // with the available series.\n                chart.propFromSeries();\n                updateAllAxes = true;\n            }\n            if ('alignTicks' in optionsChart) { // #6452\n                updateAllAxes = true;\n            }\n            if ('events' in optionsChart) {\n                // Chart event handlers\n                registerEventOptions(this, optionsChart);\n            }\n            objectEach(optionsChart, function (val, key) {\n                if (chart.propsRequireUpdateSeries.indexOf('chart.' + key) !==\n                    -1) {\n                    updateAllSeries = true;\n                }\n                // Only dirty box\n                if (chart.propsRequireDirtyBox.indexOf(key) !== -1) {\n                    chart.isDirtyBox = true;\n                }\n                // Chart setSize\n                if (chart.propsRequireReflow.indexOf(key) !== -1) {\n                    if (isResponsiveOptions) {\n                        chart.isDirtyBox = true;\n                    }\n                    else {\n                        runSetSize = true;\n                    }\n                }\n            });\n            if (!chart.styledMode && optionsChart.style) {\n                chart.renderer.setStyle(chart.options.chart.style || {});\n            }\n        }\n        // Moved up, because tooltip needs updated plotOptions (#6218)\n        if (!chart.styledMode && options.colors) {\n            this.options.colors = options.colors;\n        }\n        if (options.time) {\n            // Maintaining legacy global time. If the chart is instanciated\n            // first with global time, then updated with time options, we need\n            // to create a new Time instance to avoid mutating the global time\n            // (#10536).\n            if (this.time === defaultTime) {\n                this.time = new Time(options.time);\n            }\n            // If we're updating, the time class is different from other chart\n            // classes (chart.legend, chart.tooltip etc) in that it doesn't know\n            // about the chart. The other chart[something].update functions also\n            // set the chart.options[something]. For the time class however we\n            // need to update the chart options separately. #14230.\n            merge(true, chart.options.time, options.time);\n        }\n        // Some option stuctures correspond one-to-one to chart objects that\n        // have update methods, for example\n        // options.credits => chart.credits\n        // options.legend => chart.legend\n        // options.title => chart.title\n        // options.tooltip => chart.tooltip\n        // options.subtitle => chart.subtitle\n        // options.mapNavigation => chart.mapNavigation\n        // options.navigator => chart.navigator\n        // options.scrollbar => chart.scrollbar\n        objectEach(options, function (val, key) {\n            if (chart[key] &&\n                typeof chart[key].update === 'function') {\n                chart[key].update(val, false);\n                // If a one-to-one object does not exist, look for an adder function\n            }\n            else if (typeof chart[adders[key]] === 'function') {\n                chart[adders[key]](val);\n                // Else, just merge the options. For nodes like loading, noData,\n                // plotOptions\n            }\n            else if (key !== 'colors' &&\n                chart.collectionsWithUpdate.indexOf(key) === -1) {\n                merge(true, chart.options[key], options[key]);\n            }\n            if (key !== 'chart' &&\n                chart.propsRequireUpdateSeries.indexOf(key) !== -1) {\n                updateAllSeries = true;\n            }\n        });\n        // Setters for collections. For axes and series, each item is referred\n        // by an id. If the id is not found, it defaults to the corresponding\n        // item in the collection, so setting one series without an id, will\n        // update the first series in the chart. Setting two series without\n        // an id will update the first and the second respectively (#6019)\n        // chart.update and responsive.\n        this.collectionsWithUpdate.forEach(function (coll) {\n            var indexMap;\n            if (options[coll]) {\n                // In stock charts, the navigator series are also part of the\n                // chart.series array, but those series should not be handled\n                // here (#8196) and neither should the navigator axis (#9671).\n                indexMap = [];\n                chart[coll].forEach(function (s, i) {\n                    if (!s.options.isInternal) {\n                        indexMap.push(pick(s.options.index, i));\n                    }\n                });\n                splat(options[coll]).forEach(function (newOptions, i) {\n                    var hasId = defined(newOptions.id);\n                    var item;\n                    // Match by id\n                    if (hasId) {\n                        item = chart.get(newOptions.id);\n                    }\n                    // No match by id found, match by index instead\n                    if (!item && chart[coll]) {\n                        item = chart[coll][indexMap ? indexMap[i] : i];\n                        // Check if we grabbed an item with an exising but\n                        // different id (#13541)\n                        if (item && hasId && defined(item.options.id)) {\n                            item = void 0;\n                        }\n                    }\n                    if (item && item.coll === coll) {\n                        item.update(newOptions, false);\n                        if (oneToOne) {\n                            item.touched = true;\n                        }\n                    }\n                    // If oneToOne and no matching item is found, add one\n                    if (!item && oneToOne && chart.collectionsWithInit[coll]) {\n                        chart.collectionsWithInit[coll][0].apply(chart, \n                        // [newOptions, ...extraArguments, redraw=false]\n                        [\n                            newOptions\n                        ].concat(\n                        // Not all initializers require extra args\n                        chart.collectionsWithInit[coll][1] || []).concat([\n                            false\n                        ])).touched = true;\n                    }\n                });\n                // Add items for removal\n                if (oneToOne) {\n                    chart[coll].forEach(function (item) {\n                        if (!item.touched && !item.options.isInternal) {\n                            itemsForRemoval.push(item);\n                        }\n                        else {\n                            delete item.touched;\n                        }\n                    });\n                }\n            }\n        });\n        itemsForRemoval.forEach(function (item) {\n            if (item.chart && item.remove) { // #9097, avoid removing twice\n                item.remove(false);\n            }\n        });\n        if (updateAllAxes) {\n            chart.axes.forEach(function (axis) {\n                axis.update({}, false);\n            });\n        }\n        // Certain options require the whole series structure to be thrown away\n        // and rebuilt\n        if (updateAllSeries) {\n            chart.getSeriesOrderByLinks().forEach(function (series) {\n                // Avoid removed navigator series\n                if (series.chart) {\n                    series.update({}, false);\n                }\n            }, this);\n        }\n        // Update size. Redraw is forced.\n        var newWidth = optionsChart && optionsChart.width;\n        var newHeight = optionsChart && (isString(optionsChart.height) ?\n            relativeLength(optionsChart.height, newWidth || chart.chartWidth) :\n            optionsChart.height);\n        if (\n        // In this case, run chart.setSize with newWidth and newHeight which\n        // are undefined, only for reflowing chart elements because margin\n        // or spacing has been set (#8190)\n        runSetSize ||\n            // In this case, the size is actually set\n            (isNumber(newWidth) && newWidth !== chart.chartWidth) ||\n            (isNumber(newHeight) && newHeight !== chart.chartHeight)) {\n            chart.setSize(newWidth, newHeight, animation);\n        }\n        else if (pick(redraw, true)) {\n            chart.redraw(animation);\n        }\n        fireEvent(chart, 'afterUpdate', {\n            options: options,\n            redraw: redraw,\n            animation: animation\n        });\n    };\n    /**\n     * Shortcut to set the subtitle options. This can also be done from {@link\n     * Chart#update} or {@link Chart#setTitle}.\n     *\n     * @function Highcharts.Chart#setSubtitle\n     *\n     * @param {Highcharts.SubtitleOptions} options\n     *        New subtitle options. The subtitle text itself is set by the\n     *        `options.text` property.\n     */\n    Chart.prototype.setSubtitle = function (options, redraw) {\n        this.applyDescription('subtitle', options);\n        this.layOutTitles(redraw);\n    };\n    /**\n     * Set the caption options. This can also be done from {@link\n     * Chart#update}.\n     *\n     * @function Highcharts.Chart#setCaption\n     *\n     * @param {Highcharts.CaptionOptions} options\n     *        New caption options. The caption text itself is set by the\n     *        `options.text` property.\n     */\n    Chart.prototype.setCaption = function (options, redraw) {\n        this.applyDescription('caption', options);\n        this.layOutTitles(redraw);\n    };\n    /**\n     * Display the zoom button, so users can reset zoom to the default view\n     * settings.\n     *\n     * @function Highcharts.Chart#showResetZoom\n     *\n     * @emits Highcharts.Chart#event:afterShowResetZoom\n     * @emits Highcharts.Chart#event:beforeShowResetZoom\n     */\n    Chart.prototype.showResetZoom = function () {\n        var chart = this, lang = defaultOptions.lang, btnOptions = chart.options.chart.zooming.resetButton, theme = btnOptions.theme, alignTo = (btnOptions.relativeTo === 'chart' ||\n            btnOptions.relativeTo === 'spacingBox' ?\n            null :\n            'scrollablePlotBox');\n        /**\n         * @private\n         */\n        function zoomOut() {\n            chart.zoomOut();\n        }\n        fireEvent(this, 'beforeShowResetZoom', null, function () {\n            chart.resetZoomButton = chart.renderer\n                .button(lang.resetZoom, null, null, zoomOut, theme)\n                .attr({\n                align: btnOptions.position.align,\n                title: lang.resetZoomTitle\n            })\n                .addClass('highcharts-reset-zoom')\n                .add()\n                .align(btnOptions.position, false, alignTo);\n        });\n        fireEvent(this, 'afterShowResetZoom');\n    };\n    /**\n     * Zoom the chart out after a user has zoomed in. See also\n     * [Axis.setExtremes](/class-reference/Highcharts.Axis#setExtremes).\n     *\n     * @function Highcharts.Chart#zoomOut\n     *\n     * @emits Highcharts.Chart#event:selection\n     */\n    Chart.prototype.zoomOut = function () {\n        fireEvent(this, 'selection', { resetSelection: true }, this.zoom);\n    };\n    /**\n     * Zoom into a given portion of the chart given by axis coordinates.\n     *\n     * @private\n     * @function Highcharts.Chart#zoom\n     * @param {Highcharts.SelectEventObject} event\n     */\n    Chart.prototype.zoom = function (event) {\n        var chart = this, pointer = chart.pointer;\n        var displayButton = false, hasZoomed;\n        // If zoom is called with no arguments, reset the axes\n        if (!event || event.resetSelection) {\n            chart.axes.forEach(function (axis) {\n                hasZoomed = axis.zoom();\n            });\n            pointer.initiated = false; // #6804\n        }\n        else { // else, zoom in on all axes\n            event.xAxis.concat(event.yAxis).forEach(function (axisData) {\n                var axis = axisData.axis, isXAxis = axis.isXAxis;\n                // don't zoom more than minRange\n                if (pointer[isXAxis ? 'zoomX' : 'zoomY'] &&\n                    (defined(pointer.mouseDownX) &&\n                        defined(pointer.mouseDownY) &&\n                        chart.isInsidePlot(pointer.mouseDownX - chart.plotLeft, pointer.mouseDownY - chart.plotTop, { axis: axis })) || !defined(chart.inverted ? pointer.mouseDownX : pointer.mouseDownY)) {\n                    hasZoomed = axis.zoom(axisData.min, axisData.max);\n                    if (axis.displayBtn) {\n                        displayButton = true;\n                    }\n                }\n            });\n        }\n        // Show or hide the Reset zoom button\n        var resetZoomButton = chart.resetZoomButton;\n        if (displayButton && !resetZoomButton) {\n            chart.showResetZoom();\n        }\n        else if (!displayButton && isObject(resetZoomButton)) {\n            chart.resetZoomButton = resetZoomButton.destroy();\n        }\n        // Redraw\n        if (hasZoomed) {\n            chart.redraw(pick(chart.options.chart.animation, event && event.animation, chart.pointCount < 100));\n        }\n    };\n    /**\n     * Pan the chart by dragging the mouse across the pane. This function is\n     * called on mouse move, and the distance to pan is computed from chartX\n     * compared to the first chartX position in the dragging operation.\n     *\n     * @private\n     * @function Highcharts.Chart#pan\n     * @param {Highcharts.PointerEventObject} e\n     * @param {string} panning\n     */\n    Chart.prototype.pan = function (e, panning) {\n        var chart = this, hoverPoints = chart.hoverPoints, panningOptions = (typeof panning === 'object' ?\n            panning :\n            {\n                enabled: panning,\n                type: 'x'\n            }), chartOptions = chart.options.chart;\n        if (chartOptions && chartOptions.panning) {\n            chartOptions.panning = panningOptions;\n        }\n        var type = panningOptions.type;\n        var doRedraw;\n        fireEvent(this, 'pan', { originalEvent: e }, function () {\n            // remove active points for shared tooltip\n            if (hoverPoints) {\n                hoverPoints.forEach(function (point) {\n                    point.setState();\n                });\n            }\n            var axes = chart.xAxis;\n            if (type === 'xy') {\n                axes = axes.concat(chart.yAxis);\n            }\n            else if (type === 'y') {\n                axes = chart.yAxis;\n            }\n            var nextMousePos = {};\n            axes.forEach(function (axis) {\n                if (!axis.options.panningEnabled || axis.options.isInternal) {\n                    return;\n                }\n                var horiz = axis.horiz, mousePos = e[horiz ? 'chartX' : 'chartY'], mouseDown = horiz ? 'mouseDownX' : 'mouseDownY', startPos = chart[mouseDown], halfPointRange = axis.minPointOffset || 0, pointRangeDirection = (axis.reversed && !chart.inverted) ||\n                    (!axis.reversed && chart.inverted) ?\n                    -1 :\n                    1, extremes = axis.getExtremes(), panMin = axis.toValue(startPos - mousePos, true) +\n                    halfPointRange * pointRangeDirection, panMax = axis.toValue(startPos + axis.len - mousePos, true) -\n                    ((halfPointRange * pointRangeDirection) ||\n                        (axis.isXAxis && axis.pointRangePadding) ||\n                        0), flipped = panMax < panMin, hasVerticalPanning = axis.hasVerticalPanning();\n                var newMin = flipped ? panMax : panMin, newMax = flipped ? panMin : panMax, panningState = axis.panningState, spill;\n                // General calculations of panning state.\n                // This is related to using vertical panning. (#11315).\n                if (hasVerticalPanning &&\n                    !axis.isXAxis && (!panningState || panningState.isDirty)) {\n                    axis.series.forEach(function (series) {\n                        var processedData = series.getProcessedData(true), dataExtremes = series.getExtremes(processedData.yData, true);\n                        if (!panningState) {\n                            panningState = {\n                                startMin: Number.MAX_VALUE,\n                                startMax: -Number.MAX_VALUE\n                            };\n                        }\n                        if (isNumber(dataExtremes.dataMin) &&\n                            isNumber(dataExtremes.dataMax)) {\n                            panningState.startMin = Math.min(pick(series.options.threshold, Infinity), dataExtremes.dataMin, panningState.startMin);\n                            panningState.startMax = Math.max(pick(series.options.threshold, -Infinity), dataExtremes.dataMax, panningState.startMax);\n                        }\n                    });\n                }\n                var paddedMin = Math.min(pick(panningState && panningState.startMin, extremes.dataMin), halfPointRange ?\n                    extremes.min :\n                    axis.toValue(axis.toPixels(extremes.min) -\n                        axis.minPixelPadding));\n                var paddedMax = Math.max(pick(panningState && panningState.startMax, extremes.dataMax), halfPointRange ?\n                    extremes.max :\n                    axis.toValue(axis.toPixels(extremes.max) +\n                        axis.minPixelPadding));\n                axis.panningState = panningState;\n                // It is not necessary to calculate extremes on ordinal axis,\n                // because they are already calculated, so we don't want to\n                // override them.\n                if (!axis.isOrdinal) {\n                    // If the new range spills over, either to the min or max,\n                    // adjust the new range.\n                    spill = paddedMin - newMin;\n                    if (spill > 0) {\n                        newMax += spill;\n                        newMin = paddedMin;\n                    }\n                    spill = newMax - paddedMax;\n                    if (spill > 0) {\n                        newMax = paddedMax;\n                        newMin -= spill;\n                    }\n                    // Set new extremes if they are actually new\n                    if (axis.series.length &&\n                        newMin !== extremes.min &&\n                        newMax !== extremes.max &&\n                        newMin >= paddedMin &&\n                        newMax <= paddedMax) {\n                        axis.setExtremes(newMin, newMax, false, false, { trigger: 'pan' });\n                        if (!chart.resetZoomButton &&\n                            // Show reset zoom button only when both newMin and\n                            // newMax values are between padded axis range.\n                            newMin !== paddedMin &&\n                            newMax !== paddedMax &&\n                            type.match('y')) {\n                            chart.showResetZoom();\n                            axis.displayBtn = false;\n                        }\n                        doRedraw = true;\n                    }\n                    // set new reference for next run:\n                    nextMousePos[mouseDown] = mousePos;\n                }\n            });\n            objectEach(nextMousePos, function (pos, down) {\n                chart[down] = pos;\n            });\n            if (doRedraw) {\n                chart.redraw(false);\n            }\n            css(chart.container, { cursor: 'move' });\n        });\n    };\n    return Chart;\n}());\nextend(Chart.prototype, {\n    // Hook for adding callbacks in modules\n    callbacks: [],\n    /**\n     * These collections (arrays) implement `Chart.addSomethig` method used in\n     * chart.update() to create new object in the collection. Equivalent for\n     * deleting is resolved by simple `Somethig.remove()`.\n     *\n     * Note: We need to define these references after initializers are bound to\n     * chart's prototype.\n     *\n     * @private\n     */\n    collectionsWithInit: {\n        // collectionName: [ initializingMethod, [extraArguments] ]\n        xAxis: [Chart.prototype.addAxis, [true]],\n        yAxis: [Chart.prototype.addAxis, [false]],\n        series: [Chart.prototype.addSeries]\n    },\n    /**\n     * These collections (arrays) implement update() methods with support for\n     * one-to-one option.\n     * @private\n     */\n    collectionsWithUpdate: [\n        'xAxis',\n        'yAxis',\n        'series'\n    ],\n    /**\n     * These properties cause isDirtyBox to be set to true when updating. Can be\n     * extended from plugins.\n     * @private\n     */\n    propsRequireDirtyBox: [\n        'backgroundColor',\n        'borderColor',\n        'borderWidth',\n        'borderRadius',\n        'plotBackgroundColor',\n        'plotBackgroundImage',\n        'plotBorderColor',\n        'plotBorderWidth',\n        'plotShadow',\n        'shadow'\n    ],\n    /**\n     * These properties require a full reflow of chart elements, best\n     * implemented through running `Chart.setSize` internally (#8190).\n     * @private\n     */\n    propsRequireReflow: [\n        'margin',\n        'marginTop',\n        'marginRight',\n        'marginBottom',\n        'marginLeft',\n        'spacing',\n        'spacingTop',\n        'spacingRight',\n        'spacingBottom',\n        'spacingLeft'\n    ],\n    /**\n     * These properties cause all series to be updated when updating. Can be\n     * extended from plugins.\n     * @private\n     */\n    propsRequireUpdateSeries: [\n        'chart.inverted',\n        'chart.polar',\n        'chart.ignoreHiddenSeries',\n        'chart.type',\n        'colors',\n        'plotOptions',\n        'time',\n        'tooltip'\n    ]\n});\n/* *\n *\n *  Default Export\n *\n * */\nexport default Chart;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Callback for chart constructors.\n *\n * @callback Highcharts.ChartCallbackFunction\n *\n * @param {Highcharts.Chart} chart\n *        Created chart.\n */\n/**\n * Format a number and return a string based on input settings.\n *\n * @callback Highcharts.NumberFormatterCallbackFunction\n *\n * @param {number} number\n *        The input number to format.\n *\n * @param {number} decimals\n *        The amount of decimals. A value of -1 preserves the amount in the\n *        input number.\n *\n * @param {string} [decimalPoint]\n *        The decimal point, defaults to the one given in the lang options, or\n *        a dot.\n *\n * @param {string} [thousandsSep]\n *        The thousands separator, defaults to the one given in the lang\n *        options, or a space character.\n *\n * @return {string} The formatted number.\n */\n/**\n * The chart title. The title has an `update` method that allows modifying the\n * options directly or indirectly via `chart.update`.\n *\n * @interface Highcharts.TitleObject\n * @extends Highcharts.SVGElement\n */ /**\n* Modify options for the title.\n*\n* @function Highcharts.TitleObject#update\n*\n* @param {Highcharts.TitleOptions} titleOptions\n*        Options to modify.\n*\n* @param {boolean} [redraw=true]\n*        Whether to redraw the chart after the title is altered. If doing more\n*        operations on the chart, it is a good idea to set redraw to false and\n*        call {@link Chart#redraw} after.\n*/\n/**\n * The chart subtitle. The subtitle has an `update` method that\n * allows modifying the options directly or indirectly via\n * `chart.update`.\n *\n * @interface Highcharts.SubtitleObject\n * @extends Highcharts.SVGElement\n */ /**\n* Modify options for the subtitle.\n*\n* @function Highcharts.SubtitleObject#update\n*\n* @param {Highcharts.SubtitleOptions} subtitleOptions\n*        Options to modify.\n*\n* @param {boolean} [redraw=true]\n*        Whether to redraw the chart after the subtitle is altered. If doing\n*        more operations on the chart, it is a good idea to set redraw to false\n*        and call {@link Chart#redraw} after.\n*/\n/**\n * The chart caption. The caption has an `update` method that\n * allows modifying the options directly or indirectly via\n * `chart.update`.\n *\n * @interface Highcharts.CaptionObject\n * @extends Highcharts.SVGElement\n */ /**\n* Modify options for the caption.\n*\n* @function Highcharts.CaptionObject#update\n*\n* @param {Highcharts.CaptionOptions} captionOptions\n*        Options to modify.\n*\n* @param {boolean} [redraw=true]\n*        Whether to redraw the chart after the caption is altered. If doing\n*        more operations on the chart, it is a good idea to set redraw to false\n*        and call {@link Chart#redraw} after.\n*/\n/**\n * @interface Highcharts.ChartIsInsideOptionsObject\n */ /**\n* @name Highcharts.ChartIsInsideOptionsObject#axis\n* @type {Highcharts.Axis|undefined}\n*/ /**\n* @name Highcharts.ChartIsInsideOptionsObject#ignoreX\n* @type {boolean|undefined}\n*/ /**\n* @name Highcharts.ChartIsInsideOptionsObject#ignoreY\n* @type {boolean|undefined}\n*/ /**\n* @name Highcharts.ChartIsInsideOptionsObject#inverted\n* @type {boolean|undefined}\n*/ /**\n* @name Highcharts.ChartIsInsideOptionsObject#paneCoordinates\n* @type {boolean|undefined}\n*/ /**\n* @name Highcharts.ChartIsInsideOptionsObject#series\n* @type {Highcharts.Series|undefined}\n*/ /**\n* @name Highcharts.ChartIsInsideOptionsObject#visiblePlotOnly\n* @type {boolean|undefined}\n*/\n''; // keeps doclets above in JS file\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport A from '../Animation/AnimationUtilities.js';\nvar animObject = A.animObject, setAnimation = A.setAnimation;\nimport F from '../FormatUtilities.js';\nvar format = F.format;\nimport H from '../Globals.js';\nvar isFirefox = H.isFirefox, marginNames = H.marginNames, win = H.win;\nimport Point from '../Series/Point.js';\nimport R from '../Renderer/RendererUtilities.js';\nvar distribute = R.distribute;\nimport U from '../Utilities.js';\nvar addEvent = U.addEvent, createElement = U.createElement, css = U.css, defined = U.defined, discardElement = U.discardElement, find = U.find, fireEvent = U.fireEvent, isNumber = U.isNumber, merge = U.merge, pick = U.pick, relativeLength = U.relativeLength, stableSort = U.stableSort, syncTimeout = U.syncTimeout, wrap = U.wrap;\n/* *\n *\n *  Class\n *\n * */\n/**\n * The overview of the chart's series. The legend object is instanciated\n * internally in the chart constructor, and is available from the `chart.legend`\n * property. Each chart has only one legend.\n *\n * @class\n * @name Highcharts.Legend\n *\n * @param {Highcharts.Chart} chart\n * The chart instance.\n *\n * @param {Highcharts.LegendOptions} options\n * Legend options.\n */\nvar Legend = /** @class */ (function () {\n    /* *\n     *\n     *  Constructors\n     *\n     * */\n    function Legend(chart, options) {\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        this.allItems = [];\n        this.box = void 0;\n        this.contentGroup = void 0;\n        this.display = false;\n        this.group = void 0;\n        this.initialItemY = 0;\n        this.itemHeight = 0;\n        this.itemMarginBottom = 0;\n        this.itemMarginTop = 0;\n        this.itemX = 0;\n        this.itemY = 0;\n        this.lastItemY = 0;\n        this.lastLineHeight = 0;\n        this.legendHeight = 0;\n        this.legendWidth = 0;\n        this.maxItemWidth = 0;\n        this.maxLegendWidth = 0;\n        this.offsetWidth = 0;\n        this.options = void 0;\n        this.padding = 0;\n        this.pages = [];\n        this.proximate = false;\n        this.scrollGroup = void 0;\n        this.symbolHeight = 0;\n        this.symbolWidth = 0;\n        this.titleHeight = 0;\n        this.totalItemWidth = 0;\n        this.widthOption = 0;\n        this.chart = chart;\n        this.init(chart, options);\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Initialize the legend.\n     *\n     * @private\n     * @function Highcharts.Legend#init\n     *\n     * @param {Highcharts.Chart} chart\n     * The chart instance.\n     *\n     * @param {Highcharts.LegendOptions} options\n     * Legend options.\n     */\n    Legend.prototype.init = function (chart, options) {\n        /**\n         * Chart of this legend.\n         *\n         * @readonly\n         * @name Highcharts.Legend#chart\n         * @type {Highcharts.Chart}\n         */\n        this.chart = chart;\n        this.setOptions(options);\n        if (options.enabled) {\n            // Render it\n            this.render();\n            // move checkboxes\n            addEvent(this.chart, 'endResize', function () {\n                this.legend.positionCheckboxes();\n            });\n            if (this.proximate) {\n                this.unchartrender = addEvent(this.chart, 'render', function () {\n                    this.legend.proximatePositions();\n                    this.legend.positionItems();\n                });\n            }\n            else if (this.unchartrender) {\n                this.unchartrender();\n            }\n        }\n    };\n    /**\n     * @private\n     * @function Highcharts.Legend#setOptions\n     * @param {Highcharts.LegendOptions} options\n     */\n    Legend.prototype.setOptions = function (options) {\n        var padding = pick(options.padding, 8);\n        /**\n         * Legend options.\n         *\n         * @readonly\n         * @name Highcharts.Legend#options\n         * @type {Highcharts.LegendOptions}\n         */\n        this.options = options;\n        if (!this.chart.styledMode) {\n            this.itemStyle = options.itemStyle;\n            this.itemHiddenStyle = merge(this.itemStyle, options.itemHiddenStyle);\n        }\n        this.itemMarginTop = options.itemMarginTop || 0;\n        this.itemMarginBottom = options.itemMarginBottom || 0;\n        this.padding = padding;\n        this.initialItemY = padding - 5; // 5 is pixels above the text\n        this.symbolWidth = pick(options.symbolWidth, 16);\n        this.pages = [];\n        this.proximate = options.layout === 'proximate' && !this.chart.inverted;\n        // #12705: baseline has to be reset on every update\n        this.baseline = void 0;\n    };\n    /**\n     * Update the legend with new options. Equivalent to running `chart.update`\n     * with a legend configuration option.\n     *\n     * @sample highcharts/legend/legend-update/\n     *         Legend update\n     *\n     * @function Highcharts.Legend#update\n     *\n     * @param {Highcharts.LegendOptions} options\n     * Legend options.\n     *\n     * @param {boolean} [redraw=true]\n     * Whether to redraw the chart after the axis is altered. If doing more\n     * operations on the chart, it is a good idea to set redraw to false and\n     * call {@link Chart#redraw} after. Whether to redraw the chart.\n     *\n     * @emits Highcharts.Legends#event:afterUpdate\n     */\n    Legend.prototype.update = function (options, redraw) {\n        var chart = this.chart;\n        this.setOptions(merge(true, this.options, options));\n        this.destroy();\n        chart.isDirtyLegend = chart.isDirtyBox = true;\n        if (pick(redraw, true)) {\n            chart.redraw();\n        }\n        fireEvent(this, 'afterUpdate');\n    };\n    /**\n     * Set the colors for the legend item.\n     *\n     * @private\n     * @function Highcharts.Legend#colorizeItem\n     * @param {Highcharts.BubbleLegendItem|Highcharts.Point|Highcharts.Series} item\n     *        A Series or Point instance\n     * @param {boolean} [visible=false]\n     *        Dimmed or colored\n     *\n     * @todo\n     * Make events official: Fires the event `afterColorizeItem`.\n     */\n    Legend.prototype.colorizeItem = function (item, visible) {\n        var _a = item.legendItem || {}, group = _a.group, label = _a.label, line = _a.line, symbol = _a.symbol;\n        if (group) {\n            group[visible ? 'removeClass' : 'addClass']('highcharts-legend-item-hidden');\n        }\n        if (!this.chart.styledMode) {\n            var legend = this, options = legend.options, hiddenColor = legend.itemHiddenStyle.color, textColor = visible ?\n                options.itemStyle.color :\n                hiddenColor, symbolColor = visible ?\n                (item.color || hiddenColor) :\n                hiddenColor, markerOptions = item.options && item.options.marker;\n            var symbolAttr = { fill: symbolColor };\n            if (label) {\n                label.css({\n                    fill: textColor,\n                    color: textColor // #1553, oldIE\n                });\n            }\n            if (line) {\n                line.attr({ stroke: symbolColor });\n            }\n            if (symbol) {\n                // Apply marker options\n                if (markerOptions && symbol.isMarker) { // #585\n                    symbolAttr = item.pointAttribs();\n                    if (!visible) {\n                        // #6769\n                        symbolAttr.stroke = symbolAttr.fill = hiddenColor;\n                    }\n                }\n                symbol.attr(symbolAttr);\n            }\n        }\n        fireEvent(this, 'afterColorizeItem', { item: item, visible: visible });\n    };\n    /**\n     * @private\n     * @function Highcharts.Legend#positionItems\n     */\n    Legend.prototype.positionItems = function () {\n        // Now that the legend width and height are established, put the items\n        // in the final position\n        this.allItems.forEach(this.positionItem, this);\n        if (!this.chart.isResizing) {\n            this.positionCheckboxes();\n        }\n    };\n    /**\n     * Position the legend item.\n     *\n     * @private\n     * @function Highcharts.Legend#positionItem\n     * @param {Highcharts.BubbleLegendItem|Highcharts.Point|Highcharts.Series} item\n     * The item to position\n     */\n    Legend.prototype.positionItem = function (item) {\n        var _this = this;\n        var legend = this, _a = item.legendItem || {}, group = _a.group, _b = _a.x, x = _b === void 0 ? 0 : _b, _c = _a.y, y = _c === void 0 ? 0 : _c, options = legend.options, symbolPadding = options.symbolPadding, ltr = !options.rtl, checkbox = item.checkbox;\n        if (group && group.element) {\n            var attribs = {\n                translateX: ltr ?\n                    x :\n                    legend.legendWidth - x - 2 * symbolPadding - 4,\n                translateY: y\n            };\n            var complete = function () {\n                fireEvent(_this, 'afterPositionItem', { item: item });\n            };\n            group[defined(group.translateY) ? 'animate' : 'attr'](attribs, void 0, complete);\n        }\n        if (checkbox) {\n            checkbox.x = x;\n            checkbox.y = y;\n        }\n    };\n    /**\n     * Destroy a single legend item, used internally on removing series items.\n     *\n     * @private\n     * @function Highcharts.Legend#destroyItem\n     * @param {Highcharts.BubbleLegendItem|Highcharts.Point|Highcharts.Series} item\n     * The item to remove\n     */\n    Legend.prototype.destroyItem = function (item) {\n        var checkbox = item.checkbox, legendItem = item.legendItem || {};\n        // destroy SVG elements\n        for (var _i = 0, _a = ['group', 'label', 'line', 'symbol']; _i < _a.length; _i++) {\n            var key = _a[_i];\n            if (legendItem[key]) {\n                legendItem[key] = legendItem[key].destroy();\n            }\n        }\n        if (checkbox) {\n            discardElement(checkbox);\n        }\n        item.legendItem = void 0;\n    };\n    /**\n     * Destroy the legend. Used internally. To reflow objects, `chart.redraw`\n     * must be called after destruction.\n     *\n     * @private\n     * @function Highcharts.Legend#destroy\n     */\n    Legend.prototype.destroy = function () {\n        var legend = this;\n        // Destroy items\n        for (var _i = 0, _a = this.getAllItems(); _i < _a.length; _i++) {\n            var item = _a[_i];\n            this.destroyItem(item);\n        }\n        // Destroy legend elements\n        for (var _b = 0, _c = [\n            'clipRect',\n            'up',\n            'down',\n            'pager',\n            'nav',\n            'box',\n            'title',\n            'group'\n        ]; _b < _c.length; _b++) {\n            var key = _c[_b];\n            if (legend[key]) {\n                legend[key] = legend[key].destroy();\n            }\n        }\n        this.display = null; // Reset in .render on update.\n    };\n    /**\n     * Position the checkboxes after the width is determined.\n     *\n     * @private\n     * @function Highcharts.Legend#positionCheckboxes\n     */\n    Legend.prototype.positionCheckboxes = function () {\n        var alignAttr = this.group && this.group.alignAttr, clipHeight = this.clipHeight || this.legendHeight, titleHeight = this.titleHeight;\n        var translateY;\n        if (alignAttr) {\n            translateY = alignAttr.translateY;\n            this.allItems.forEach(function (item) {\n                var checkbox = item.checkbox;\n                var top;\n                if (checkbox) {\n                    top = translateY + titleHeight + checkbox.y +\n                        (this.scrollOffset || 0) + 3;\n                    css(checkbox, {\n                        left: (alignAttr.translateX + item.checkboxOffset +\n                            checkbox.x - 20) + 'px',\n                        top: top + 'px',\n                        display: this.proximate || (top > translateY - 6 &&\n                            top < translateY + clipHeight - 6) ?\n                            '' :\n                            'none'\n                    });\n                }\n            }, this);\n        }\n    };\n    /**\n     * Render the legend title on top of the legend.\n     *\n     * @private\n     * @function Highcharts.Legend#renderTitle\n     */\n    Legend.prototype.renderTitle = function () {\n        var options = this.options, padding = this.padding, titleOptions = options.title;\n        var bBox, titleHeight = 0;\n        if (titleOptions.text) {\n            if (!this.title) {\n                /**\n                 * SVG element of the legend title.\n                 *\n                 * @readonly\n                 * @name Highcharts.Legend#title\n                 * @type {Highcharts.SVGElement}\n                 */\n                this.title = this.chart.renderer.label(titleOptions.text, padding - 3, padding - 4, void 0, void 0, void 0, options.useHTML, void 0, 'legend-title')\n                    .attr({ zIndex: 1 });\n                if (!this.chart.styledMode) {\n                    this.title.css(titleOptions.style);\n                }\n                this.title.add(this.group);\n            }\n            // Set the max title width (#7253)\n            if (!titleOptions.width) {\n                this.title.css({\n                    width: this.maxLegendWidth + 'px'\n                });\n            }\n            bBox = this.title.getBBox();\n            titleHeight = bBox.height;\n            this.offsetWidth = bBox.width; // #1717\n            this.contentGroup.attr({ translateY: titleHeight });\n        }\n        this.titleHeight = titleHeight;\n    };\n    /**\n     * Set the legend item text.\n     *\n     * @function Highcharts.Legend#setText\n     * @param {Highcharts.Point|Highcharts.Series} item\n     *        The item for which to update the text in the legend.\n     */\n    Legend.prototype.setText = function (item) {\n        var options = this.options;\n        item.legendItem.label.attr({\n            text: options.labelFormat ?\n                format(options.labelFormat, item, this.chart) :\n                options.labelFormatter.call(item)\n        });\n    };\n    /**\n     * Render a single specific legend item. Called internally from the `render`\n     * function.\n     *\n     * @private\n     * @function Highcharts.Legend#renderItem\n     * @param {Highcharts.BubbleLegendItem|Highcharts.Point|Highcharts.Series} item\n     * The item to render.\n     */\n    Legend.prototype.renderItem = function (item) {\n        var legend = this, legendItem = item.legendItem = item.legendItem || {}, chart = legend.chart, renderer = chart.renderer, options = legend.options, horizontal = options.layout === 'horizontal', symbolWidth = legend.symbolWidth, symbolPadding = options.symbolPadding || 0, itemStyle = legend.itemStyle, itemHiddenStyle = legend.itemHiddenStyle, itemDistance = horizontal ? pick(options.itemDistance, 20) : 0, ltr = !options.rtl, isSeries = !item.series, series = !isSeries && item.series.drawLegendSymbol ?\n            item.series :\n            item, seriesOptions = series.options, showCheckbox = (legend.createCheckboxForItem) &&\n            seriesOptions &&\n            seriesOptions.showCheckbox, useHTML = options.useHTML, itemClassName = item.options.className;\n        var label = legendItem.label, \n        // full width minus text width\n        itemExtraWidth = symbolWidth + symbolPadding +\n            itemDistance + (showCheckbox ? 20 : 0);\n        if (!label) { // generate it once, later move it\n            // Generate the group box, a group to hold the symbol and text. Text\n            // is to be appended in Legend class.\n            legendItem.group = renderer\n                .g('legend-item')\n                .addClass('highcharts-' + series.type + '-series ' +\n                'highcharts-color-' + item.colorIndex +\n                (itemClassName ? ' ' + itemClassName : '') +\n                (isSeries ?\n                    ' highcharts-series-' + item.index :\n                    ''))\n                .attr({ zIndex: 1 })\n                .add(legend.scrollGroup);\n            // Generate the list item text and add it to the group\n            legendItem.label = label = renderer.text('', ltr ?\n                symbolWidth + symbolPadding :\n                -symbolPadding, legend.baseline || 0, useHTML);\n            if (!chart.styledMode) {\n                // merge to prevent modifying original (#1021)\n                label.css(merge(item.visible ?\n                    itemStyle :\n                    itemHiddenStyle));\n            }\n            label\n                .attr({\n                align: ltr ? 'left' : 'right',\n                zIndex: 2\n            })\n                .add(legendItem.group);\n            // Get the baseline for the first item - the font size is equal for\n            // all\n            if (!legend.baseline) {\n                legend.fontMetrics = renderer.fontMetrics(chart.styledMode ? 12 : itemStyle.fontSize, label);\n                legend.baseline =\n                    legend.fontMetrics.f + 3 + legend.itemMarginTop;\n                label.attr('y', legend.baseline);\n                legend.symbolHeight =\n                    options.symbolHeight || legend.fontMetrics.f;\n                if (options.squareSymbol) {\n                    legend.symbolWidth = pick(options.symbolWidth, Math.max(legend.symbolHeight, 16));\n                    itemExtraWidth = legend.symbolWidth + symbolPadding +\n                        itemDistance + (showCheckbox ? 20 : 0);\n                    if (ltr) {\n                        label.attr('x', legend.symbolWidth + symbolPadding);\n                    }\n                }\n            }\n            // Draw the legend symbol inside the group box\n            series.drawLegendSymbol(legend, item);\n            if (legend.setItemEvents) {\n                legend.setItemEvents(item, label, useHTML);\n            }\n        }\n        // Add the HTML checkbox on top\n        if (showCheckbox && !item.checkbox && legend.createCheckboxForItem) {\n            legend.createCheckboxForItem(item);\n        }\n        // Colorize the items\n        legend.colorizeItem(item, item.visible);\n        // Take care of max width and text overflow (#6659)\n        if (chart.styledMode || !itemStyle.width) {\n            label.css({\n                width: ((options.itemWidth ||\n                    legend.widthOption ||\n                    chart.spacingBox.width) - itemExtraWidth) + 'px'\n            });\n        }\n        // Always update the text\n        legend.setText(item);\n        // calculate the positions for the next line\n        var bBox = label.getBBox();\n        var fontMetricsH = (legend.fontMetrics && legend.fontMetrics.h) || 0;\n        item.itemWidth = item.checkboxOffset =\n            options.itemWidth ||\n                legendItem.labelWidth ||\n                bBox.width + itemExtraWidth;\n        legend.maxItemWidth = Math.max(legend.maxItemWidth, item.itemWidth);\n        legend.totalItemWidth += item.itemWidth;\n        legend.itemHeight = item.itemHeight = Math.round(legendItem.labelHeight ||\n            // use bBox for multiline (#16398)\n            (bBox.height > fontMetricsH * 1.5 ? bBox.height : fontMetricsH));\n    };\n    /**\n     * Get the position of the item in the layout. We now know the\n     * maxItemWidth from the previous loop.\n     *\n     * @private\n     * @function Highcharts.Legend#layoutItem\n     * @param {Highcharts.BubbleLegendItem|Highcharts.Point|Highcharts.Series} item\n     */\n    Legend.prototype.layoutItem = function (item) {\n        var options = this.options, padding = this.padding, horizontal = options.layout === 'horizontal', itemHeight = item.itemHeight, itemMarginBottom = this.itemMarginBottom, itemMarginTop = this.itemMarginTop, itemDistance = horizontal ? pick(options.itemDistance, 20) : 0, maxLegendWidth = this.maxLegendWidth, itemWidth = (options.alignColumns &&\n            this.totalItemWidth > maxLegendWidth) ?\n            this.maxItemWidth :\n            item.itemWidth, legendItem = item.legendItem || {};\n        // If the item exceeds the width, start a new line\n        if (horizontal &&\n            this.itemX - padding + itemWidth > maxLegendWidth) {\n            this.itemX = padding;\n            if (this.lastLineHeight) { // Not for the first line (#10167)\n                this.itemY += (itemMarginTop +\n                    this.lastLineHeight +\n                    itemMarginBottom);\n            }\n            this.lastLineHeight = 0; // reset for next line (#915, #3976)\n        }\n        // Set the edge positions\n        this.lastItemY = itemMarginTop + this.itemY + itemMarginBottom;\n        this.lastLineHeight = Math.max(// #915\n        itemHeight, this.lastLineHeight);\n        // cache the position of the newly generated or reordered items\n        legendItem.x = this.itemX;\n        legendItem.y = this.itemY;\n        // advance\n        if (horizontal) {\n            this.itemX += itemWidth;\n        }\n        else {\n            this.itemY +=\n                itemMarginTop + itemHeight + itemMarginBottom;\n            this.lastLineHeight = itemHeight;\n        }\n        // the width of the widest item\n        this.offsetWidth = this.widthOption || Math.max((horizontal ? this.itemX - padding - (item.checkbox ?\n            // decrease by itemDistance only when no checkbox #4853\n            0 :\n            itemDistance) : itemWidth) + padding, this.offsetWidth);\n    };\n    /**\n     * Get all items, which is one item per series for most series and one\n     * item per point for pie series and its derivatives. Fires the event\n     * `afterGetAllItems`.\n     *\n     * @private\n     * @function Highcharts.Legend#getAllItems\n     * @return {Array<(Highcharts.BubbleLegendItem|Highcharts.Point|Highcharts.Series)>}\n     * The current items in the legend.\n     * @emits Highcharts.Legend#event:afterGetAllItems\n     */\n    Legend.prototype.getAllItems = function () {\n        var allItems = [];\n        this.chart.series.forEach(function (series) {\n            var seriesOptions = series && series.options;\n            // Handle showInLegend. If the series is linked to another series,\n            // defaults to false.\n            if (series && pick(seriesOptions.showInLegend, !defined(seriesOptions.linkedTo) ? void 0 : false, true)) {\n                // Use points or series for the legend item depending on\n                // legendType\n                allItems = allItems.concat((series.legendItem || {}).labels ||\n                    (seriesOptions.legendType === 'point' ?\n                        series.data :\n                        series));\n            }\n        });\n        fireEvent(this, 'afterGetAllItems', { allItems: allItems });\n        return allItems;\n    };\n    /**\n     * Get a short, three letter string reflecting the alignment and layout.\n     *\n     * @private\n     * @function Highcharts.Legend#getAlignment\n     * @return {string}\n     * The alignment, empty string if floating\n     */\n    Legend.prototype.getAlignment = function () {\n        var options = this.options;\n        // Use the first letter of each alignment option in order to detect\n        // the side. (#4189 - use charAt(x) notation instead of [x] for IE7)\n        if (this.proximate) {\n            return options.align.charAt(0) + 'tv';\n        }\n        return options.floating ? '' : (options.align.charAt(0) +\n            options.verticalAlign.charAt(0) +\n            options.layout.charAt(0));\n    };\n    /**\n     * Adjust the chart margins by reserving space for the legend on only one\n     * side of the chart. If the position is set to a corner, top or bottom is\n     * reserved for horizontal legends and left or right for vertical ones.\n     *\n     * @private\n     * @function Highcharts.Legend#adjustMargins\n     * @param {Array<number>} margin\n     * @param {Array<number>} spacing\n     */\n    Legend.prototype.adjustMargins = function (margin, spacing) {\n        var chart = this.chart, options = this.options, alignment = this.getAlignment();\n        if (alignment) {\n            ([\n                /(lth|ct|rth)/,\n                /(rtv|rm|rbv)/,\n                /(rbh|cb|lbh)/,\n                /(lbv|lm|ltv)/\n            ]).forEach(function (alignments, side) {\n                if (alignments.test(alignment) && !defined(margin[side])) {\n                    // Now we have detected on which side of the chart we should\n                    // reserve space for the legend\n                    chart[marginNames[side]] = Math.max(chart[marginNames[side]], (chart.legend[(side + 1) % 2 ? 'legendHeight' : 'legendWidth'] +\n                        [1, -1, -1, 1][side] * options[(side % 2) ? 'x' : 'y'] +\n                        pick(options.margin, 12) +\n                        spacing[side] +\n                        (chart.titleOffset[side] || 0)));\n                }\n            });\n        }\n    };\n    /**\n     * @private\n     * @function Highcharts.Legend#proximatePositions\n     */\n    Legend.prototype.proximatePositions = function () {\n        var chart = this.chart, boxes = [], alignLeft = this.options.align === 'left';\n        this.allItems.forEach(function (item) {\n            var lastPoint, height, useFirstPoint = alignLeft, target, top;\n            if (item.yAxis) {\n                if (item.xAxis.options.reversed) {\n                    useFirstPoint = !useFirstPoint;\n                }\n                if (item.points) {\n                    lastPoint = find(useFirstPoint ?\n                        item.points :\n                        item.points.slice(0).reverse(), function (item) {\n                        return isNumber(item.plotY);\n                    });\n                }\n                height = this.itemMarginTop +\n                    item.legendItem.label.getBBox().height +\n                    this.itemMarginBottom;\n                top = item.yAxis.top - chart.plotTop;\n                if (item.visible) {\n                    target = lastPoint ?\n                        lastPoint.plotY :\n                        item.yAxis.height;\n                    target += top - 0.3 * height;\n                }\n                else {\n                    target = top + item.yAxis.height;\n                }\n                boxes.push({\n                    target: target,\n                    size: height,\n                    item: item\n                });\n            }\n        }, this);\n        var legendItem;\n        for (var _i = 0, _a = distribute(boxes, chart.plotHeight); _i < _a.length; _i++) {\n            var box = _a[_i];\n            legendItem = box.item.legendItem || {};\n            if (isNumber(box.pos)) {\n                legendItem.y = chart.plotTop - chart.spacing[0] + box.pos;\n            }\n        }\n    };\n    /**\n     * Render the legend. This method can be called both before and after\n     * `chart.render`. If called after, it will only rearrange items instead\n     * of creating new ones. Called internally on initial render and after\n     * redraws.\n     *\n     * @private\n     * @function Highcharts.Legend#render\n     */\n    Legend.prototype.render = function () {\n        var legend = this, chart = legend.chart, renderer = chart.renderer, options = legend.options, padding = legend.padding, \n        // add each series or point\n        allItems = legend.getAllItems();\n        var display, legendWidth, legendHeight, legendGroup = legend.group, allowedWidth, box = legend.box;\n        legend.itemX = padding;\n        legend.itemY = legend.initialItemY;\n        legend.offsetWidth = 0;\n        legend.lastItemY = 0;\n        legend.widthOption = relativeLength(options.width, chart.spacingBox.width - padding);\n        // Compute how wide the legend is allowed to be\n        allowedWidth = chart.spacingBox.width - 2 * padding - options.x;\n        if (['rm', 'lm'].indexOf(legend.getAlignment().substring(0, 2)) > -1) {\n            allowedWidth /= 2;\n        }\n        legend.maxLegendWidth = legend.widthOption || allowedWidth;\n        if (!legendGroup) {\n            /**\n             * SVG group of the legend.\n             *\n             * @readonly\n             * @name Highcharts.Legend#group\n             * @type {Highcharts.SVGElement}\n             */\n            legend.group = legendGroup = renderer\n                .g('legend')\n                .addClass(options.className || '')\n                .attr({ zIndex: 7 })\n                .add();\n            legend.contentGroup = renderer\n                .g()\n                .attr({ zIndex: 1 }) // above background\n                .add(legendGroup);\n            legend.scrollGroup = renderer\n                .g()\n                .add(legend.contentGroup);\n        }\n        legend.renderTitle();\n        // sort by legendIndex\n        stableSort(allItems, function (a, b) {\n            return ((a.options && a.options.legendIndex) || 0) -\n                ((b.options && b.options.legendIndex) || 0);\n        });\n        // reversed legend\n        if (options.reversed) {\n            allItems.reverse();\n        }\n        /**\n         * All items for the legend, which is an array of series for most series\n         * and an array of points for pie series and its derivatives.\n         *\n         * @readonly\n         * @name Highcharts.Legend#allItems\n         * @type {Array<(Highcharts.Point|Highcharts.Series)>}\n         */\n        legend.allItems = allItems;\n        legend.display = display = !!allItems.length;\n        // Render the items. First we run a loop to set the text and properties\n        // and read all the bounding boxes. The next loop computes the item\n        // positions based on the bounding boxes.\n        legend.lastLineHeight = 0;\n        legend.maxItemWidth = 0;\n        legend.totalItemWidth = 0;\n        legend.itemHeight = 0;\n        allItems.forEach(legend.renderItem, legend);\n        allItems.forEach(legend.layoutItem, legend);\n        // Get the box\n        legendWidth = (legend.widthOption || legend.offsetWidth) + padding;\n        legendHeight = legend.lastItemY + legend.lastLineHeight +\n            legend.titleHeight;\n        legendHeight = legend.handleOverflow(legendHeight);\n        legendHeight += padding;\n        // Draw the border and/or background\n        if (!box) {\n            /**\n             * SVG element of the legend box.\n             *\n             * @readonly\n             * @name Highcharts.Legend#box\n             * @type {Highcharts.SVGElement}\n             */\n            legend.box = box = renderer.rect()\n                .addClass('highcharts-legend-box')\n                .attr({\n                r: options.borderRadius\n            })\n                .add(legendGroup);\n        }\n        // Presentational\n        if (!chart.styledMode) {\n            box\n                .attr({\n                stroke: options.borderColor,\n                'stroke-width': options.borderWidth || 0,\n                fill: options.backgroundColor || 'none'\n            })\n                .shadow(options.shadow);\n        }\n        if (legendWidth > 0 && legendHeight > 0) {\n            box[box.placed ? 'animate' : 'attr'](box.crisp.call({}, {\n                x: 0,\n                y: 0,\n                width: legendWidth,\n                height: legendHeight\n            }, box.strokeWidth()));\n        }\n        // hide the border if no items\n        legendGroup[display ? 'show' : 'hide']();\n        // Open for responsiveness\n        if (chart.styledMode && legendGroup.getStyle('display') === 'none') {\n            legendWidth = legendHeight = 0;\n        }\n        legend.legendWidth = legendWidth;\n        legend.legendHeight = legendHeight;\n        if (display) {\n            legend.align();\n        }\n        if (!this.proximate) {\n            this.positionItems();\n        }\n        fireEvent(this, 'afterRender');\n    };\n    /**\n     * Align the legend to chart's box.\n     *\n     * @private\n     * @function Highcharts.align\n     * @param {Highcharts.BBoxObject} alignTo\n     */\n    Legend.prototype.align = function (alignTo) {\n        if (alignTo === void 0) { alignTo = this.chart.spacingBox; }\n        var chart = this.chart, options = this.options;\n        // If aligning to the top and the layout is horizontal, adjust for\n        // the title (#7428)\n        var y = alignTo.y;\n        if (/(lth|ct|rth)/.test(this.getAlignment()) &&\n            chart.titleOffset[0] > 0) {\n            y += chart.titleOffset[0];\n        }\n        else if (/(lbh|cb|rbh)/.test(this.getAlignment()) &&\n            chart.titleOffset[2] > 0) {\n            y -= chart.titleOffset[2];\n        }\n        if (y !== alignTo.y) {\n            alignTo = merge(alignTo, { y: y });\n        }\n        if (!chart.hasRendered) {\n            // Avoid animation when adjusting alignment for responsiveness and\n            // colorAxis label layout\n            this.group.placed = false;\n        }\n        this.group.align(merge(options, {\n            width: this.legendWidth,\n            height: this.legendHeight,\n            verticalAlign: this.proximate ? 'top' : options.verticalAlign\n        }), true, alignTo);\n    };\n    /**\n     * Set up the overflow handling by adding navigation with up and down arrows\n     * below the legend.\n     *\n     * @private\n     * @function Highcharts.Legend#handleOverflow\n     */\n    Legend.prototype.handleOverflow = function (legendHeight) {\n        var legend = this, chart = this.chart, renderer = chart.renderer, options = this.options, optionsY = options.y, alignTop = options.verticalAlign === 'top', padding = this.padding, maxHeight = options.maxHeight, navOptions = options.navigation, animation = pick(navOptions.animation, true), arrowSize = navOptions.arrowSize || 12, pages = this.pages, allItems = this.allItems, clipToHeight = function (height) {\n            if (typeof height === 'number') {\n                clipRect.attr({\n                    height: height\n                });\n            }\n            else if (clipRect) { // Reset (#5912)\n                legend.clipRect = clipRect.destroy();\n                legend.contentGroup.clip();\n            }\n            // useHTML\n            if (legend.contentGroup.div) {\n                legend.contentGroup.div.style.clip = height ?\n                    'rect(' + padding + 'px,9999px,' +\n                        (padding + height) + 'px,0)' :\n                    'auto';\n            }\n        }, addTracker = function (key) {\n            legend[key] = renderer\n                .circle(0, 0, arrowSize * 1.3)\n                .translate(arrowSize / 2, arrowSize / 2)\n                .add(nav);\n            if (!chart.styledMode) {\n                legend[key].attr('fill', 'rgba(0,0,0,0.0001)');\n            }\n            return legend[key];\n        };\n        var clipHeight, lastY, legendItem, spaceHeight = (chart.spacingBox.height +\n            (alignTop ? -optionsY : optionsY) - padding), nav = this.nav, clipRect = this.clipRect;\n        // Adjust the height\n        if (options.layout === 'horizontal' &&\n            options.verticalAlign !== 'middle' &&\n            !options.floating) {\n            spaceHeight /= 2;\n        }\n        if (maxHeight) {\n            spaceHeight = Math.min(spaceHeight, maxHeight);\n        }\n        // Reset the legend height and adjust the clipping rectangle\n        pages.length = 0;\n        if (legendHeight &&\n            spaceHeight > 0 &&\n            legendHeight > spaceHeight &&\n            navOptions.enabled !== false) {\n            this.clipHeight = clipHeight =\n                Math.max(spaceHeight - 20 - this.titleHeight - padding, 0);\n            this.currentPage = pick(this.currentPage, 1);\n            this.fullHeight = legendHeight;\n            // Fill pages with Y positions so that the top of each a legend item\n            // defines the scroll top for each page (#2098)\n            allItems.forEach(function (item, i) {\n                legendItem = item.legendItem || {};\n                var y = legendItem.y || 0, h = Math.round(legendItem.label.getBBox().height);\n                var len = pages.length;\n                if (!len || (y - pages[len - 1] > clipHeight &&\n                    (lastY || y) !== pages[len - 1])) {\n                    pages.push(lastY || y);\n                    len++;\n                }\n                // Keep track of which page each item is on\n                legendItem.pageIx = len - 1;\n                if (lastY) {\n                    (allItems[i - 1].legendItem || {}).pageIx = len - 1;\n                }\n                // add the last page if needed (#2617, #13683)\n                if (\n                // check the last item\n                i === allItems.length - 1 &&\n                    // if adding next page is needed\n                    y + h - pages[len - 1] > clipHeight &&\n                    // and will fully fit inside a new page\n                    h <= clipHeight) {\n                    pages.push(y);\n                    legendItem.pageIx = len;\n                }\n                if (y !== lastY) {\n                    lastY = y;\n                }\n            });\n            // Only apply clipping if needed. Clipping causes blurred legend in\n            // PDF export (#1787)\n            if (!clipRect) {\n                clipRect = legend.clipRect =\n                    renderer.clipRect(0, padding, 9999, 0);\n                legend.contentGroup.clip(clipRect);\n            }\n            clipToHeight(clipHeight);\n            // Add navigation elements\n            if (!nav) {\n                this.nav = nav = renderer.g()\n                    .attr({ zIndex: 1 })\n                    .add(this.group);\n                this.up = renderer\n                    .symbol('triangle', 0, 0, arrowSize, arrowSize)\n                    .add(nav);\n                addTracker('upTracker')\n                    .on('click', function () {\n                    legend.scroll(-1, animation);\n                });\n                this.pager = renderer.text('', 15, 10)\n                    .addClass('highcharts-legend-navigation');\n                if (!chart.styledMode && navOptions.style) {\n                    this.pager.css(navOptions.style);\n                }\n                this.pager.add(nav);\n                this.down = renderer\n                    .symbol('triangle-down', 0, 0, arrowSize, arrowSize)\n                    .add(nav);\n                addTracker('downTracker')\n                    .on('click', function () {\n                    legend.scroll(1, animation);\n                });\n            }\n            // Set initial position\n            legend.scroll(0);\n            legendHeight = spaceHeight;\n            // Reset\n        }\n        else if (nav) {\n            clipToHeight();\n            this.nav = nav.destroy(); // #6322\n            this.scrollGroup.attr({\n                translateY: 1\n            });\n            this.clipHeight = 0; // #1379\n        }\n        return legendHeight;\n    };\n    /**\n     * Scroll the legend by a number of pages.\n     *\n     * @private\n     * @function Highcharts.Legend#scroll\n     *\n     * @param {number} scrollBy\n     *        The number of pages to scroll.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        Whether and how to apply animation.\n     *\n     */\n    Legend.prototype.scroll = function (scrollBy, animation) {\n        var _this = this;\n        var chart = this.chart, pages = this.pages, pageCount = pages.length, clipHeight = this.clipHeight, navOptions = this.options.navigation, pager = this.pager, padding = this.padding;\n        var currentPage = this.currentPage + scrollBy;\n        // When resizing while looking at the last page\n        if (currentPage > pageCount) {\n            currentPage = pageCount;\n        }\n        if (currentPage > 0) {\n            if (typeof animation !== 'undefined') {\n                setAnimation(animation, chart);\n            }\n            this.nav.attr({\n                translateX: padding,\n                translateY: clipHeight + this.padding + 7 + this.titleHeight,\n                visibility: 'inherit'\n            });\n            [this.up, this.upTracker].forEach(function (elem) {\n                elem.attr({\n                    'class': currentPage === 1 ?\n                        'highcharts-legend-nav-inactive' :\n                        'highcharts-legend-nav-active'\n                });\n            });\n            pager.attr({\n                text: currentPage + '/' + pageCount\n            });\n            [this.down, this.downTracker].forEach(function (elem) {\n                elem.attr({\n                    // adjust to text width\n                    x: 18 + this.pager.getBBox().width,\n                    'class': currentPage === pageCount ?\n                        'highcharts-legend-nav-inactive' :\n                        'highcharts-legend-nav-active'\n                });\n            }, this);\n            if (!chart.styledMode) {\n                this.up\n                    .attr({\n                    fill: currentPage === 1 ?\n                        navOptions.inactiveColor :\n                        navOptions.activeColor\n                });\n                this.upTracker\n                    .css({\n                    cursor: currentPage === 1 ? 'default' : 'pointer'\n                });\n                this.down\n                    .attr({\n                    fill: currentPage === pageCount ?\n                        navOptions.inactiveColor :\n                        navOptions.activeColor\n                });\n                this.downTracker\n                    .css({\n                    cursor: currentPage === pageCount ?\n                        'default' :\n                        'pointer'\n                });\n            }\n            this.scrollOffset = -pages[currentPage - 1] + this.initialItemY;\n            this.scrollGroup.animate({\n                translateY: this.scrollOffset\n            });\n            this.currentPage = currentPage;\n            this.positionCheckboxes();\n            // Fire event after scroll animation is complete\n            var animOptions = animObject(pick(animation, chart.renderer.globalAnimation, true));\n            syncTimeout(function () {\n                fireEvent(_this, 'afterScroll', { currentPage: currentPage });\n            }, animOptions.duration);\n        }\n    };\n    /**\n     * @private\n     * @function Highcharts.Legend#setItemEvents\n     * @param {Highcharts.BubbleLegendItem|Point|Highcharts.Series} item\n     * @param {Highcharts.SVGElement} legendLabel\n     * @param {boolean} [useHTML=false]\n     * @emits Highcharts.Point#event:legendItemClick\n     * @emits Highcharts.Series#event:legendItemClick\n     */\n    Legend.prototype.setItemEvents = function (item, legendLabel, useHTML) {\n        var legend = this, legendItem = item.legendItem || {}, boxWrapper = legend.chart.renderer.boxWrapper, isPoint = item instanceof Point, activeClass = 'highcharts-legend-' +\n            (isPoint ? 'point' : 'series') + '-active', styledMode = legend.chart.styledMode, \n        // When `useHTML`, the symbol is rendered in other group, so\n        // we need to apply events listeners to both places\n        legendElements = useHTML ?\n            [legendLabel, legendItem.symbol] :\n            [legendItem.group];\n        var setOtherItemsState = function (state) {\n            legend.allItems.forEach(function (otherItem) {\n                if (item !== otherItem) {\n                    [otherItem]\n                        .concat(otherItem.linkedSeries || [])\n                        .forEach(function (otherItem) {\n                        otherItem.setState(state, !isPoint);\n                    });\n                }\n            });\n        };\n        // Set the events on the item group, or in case of useHTML, the item\n        // itself (#1249)\n        for (var _i = 0, legendElements_1 = legendElements; _i < legendElements_1.length; _i++) {\n            var element = legendElements_1[_i];\n            if (element) {\n                element\n                    .on('mouseover', function () {\n                    if (item.visible) {\n                        setOtherItemsState('inactive');\n                    }\n                    item.setState('hover');\n                    // A CSS class to dim or hide other than the hovered\n                    // series.\n                    // Works only if hovered series is visible (#10071).\n                    if (item.visible) {\n                        boxWrapper.addClass(activeClass);\n                    }\n                    if (!styledMode) {\n                        legendLabel.css(legend.options.itemHoverStyle);\n                    }\n                })\n                    .on('mouseout', function () {\n                    if (!legend.chart.styledMode) {\n                        legendLabel.css(merge(item.visible ?\n                            legend.itemStyle :\n                            legend.itemHiddenStyle));\n                    }\n                    setOtherItemsState('');\n                    // A CSS class to dim or hide other than the hovered\n                    // series.\n                    boxWrapper.removeClass(activeClass);\n                    item.setState();\n                })\n                    .on('click', function (event) {\n                    var strLegendItemClick = 'legendItemClick', fnLegendItemClick = function () {\n                        if (item.setVisible) {\n                            item.setVisible();\n                        }\n                        // Reset inactive state\n                        setOtherItemsState(item.visible ? 'inactive' : '');\n                    };\n                    // A CSS class to dim or hide other than the hovered\n                    // series. Event handling in iOS causes the activeClass\n                    // to be added prior to click in some cases (#7418).\n                    boxWrapper.removeClass(activeClass);\n                    // Pass over the click/touch event. #4.\n                    event = {\n                        browserEvent: event\n                    };\n                    // click the name or symbol\n                    if (item.firePointEvent) { // point\n                        item.firePointEvent(strLegendItemClick, event, fnLegendItemClick);\n                    }\n                    else {\n                        fireEvent(item, strLegendItemClick, event, fnLegendItemClick);\n                    }\n                });\n            }\n        }\n    };\n    /**\n     * @private\n     * @function Highcharts.Legend#createCheckboxForItem\n     * @param {Highcharts.BubbleLegendItem|Point|Highcharts.Series} item\n     * @emits Highcharts.Series#event:checkboxClick\n     */\n    Legend.prototype.createCheckboxForItem = function (item) {\n        var legend = this;\n        item.checkbox = createElement('input', {\n            type: 'checkbox',\n            className: 'highcharts-legend-checkbox',\n            checked: item.selected,\n            defaultChecked: item.selected // required by IE7\n        }, legend.options.itemCheckboxStyle, legend.chart.container);\n        addEvent(item.checkbox, 'click', function (event) {\n            var target = event.target;\n            fireEvent(item.series || item, 'checkboxClick', {\n                checked: target.checked,\n                item: item\n            }, function () {\n                item.select();\n            });\n        });\n    };\n    return Legend;\n}());\n/* *\n *\n *  Default Export\n *\n * */\nexport default Legend;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * @interface Highcharts.LegendItemObject\n */ /**\n* @name Highcharts.LegendItemObject#item\n* @type {Highcharts.SVGElement|undefined}\n*/ /**\n* @name Highcharts.LegendItemObject#line\n* @type {Highcharts.SVGElement|undefined}\n*/ /**\n* @name Highcharts.LegendItemObject#symbol\n* @type {Highcharts.SVGElement|undefined}\n*/\n/**\n * Gets fired when the legend item belonging to a point is clicked. The default\n * action is to toggle the visibility of the point. This can be prevented by\n * returning `false` or calling `event.preventDefault()`.\n *\n * @callback Highcharts.PointLegendItemClickCallbackFunction\n *\n * @param {Highcharts.Point} this\n *        The point on which the event occured.\n *\n * @param {Highcharts.PointLegendItemClickEventObject} event\n *        The event that occured.\n */\n/**\n * Information about the legend click event.\n *\n * @interface Highcharts.PointLegendItemClickEventObject\n */ /**\n* Related browser event.\n* @name Highcharts.PointLegendItemClickEventObject#browserEvent\n* @type {Highcharts.PointerEvent}\n*/ /**\n* Prevent the default action of toggle the visibility of the point.\n* @name Highcharts.PointLegendItemClickEventObject#preventDefault\n* @type {Function}\n*/ /**\n* Related point.\n* @name Highcharts.PointLegendItemClickEventObject#target\n* @type {Highcharts.Point}\n*/ /**\n* Event type.\n* @name Highcharts.PointLegendItemClickEventObject#type\n* @type {\"legendItemClick\"}\n*/\n/**\n * Series color as used by the legend and some series types.\n * @name Highcharts.Series#color\n * @type {Highcharts.ColorType|undefined}\n */ /**\n* Legend data for the series.\n* @name Highcharts.Series#legendItem\n* @type {Highcharts.LegendItemObject|undefined}\n* @since 10.3.0\n*/\n/**\n * Gets fired when the legend item belonging to a series is clicked. The default\n * action is to toggle the visibility of the series. This can be prevented by\n * returning `false` or calling `event.preventDefault()`.\n *\n * @callback Highcharts.SeriesLegendItemClickCallbackFunction\n *\n * @param {Highcharts.Series} this\n *        The series where the event occured.\n *\n * @param {Highcharts.SeriesLegendItemClickEventObject} event\n *        The event that occured.\n */\n/**\n * Information about the legend click event.\n *\n * @interface Highcharts.SeriesLegendItemClickEventObject\n */ /**\n* Related browser event.\n* @name Highcharts.SeriesLegendItemClickEventObject#browserEvent\n* @type {Highcharts.PointerEvent}\n*/ /**\n* Prevent the default action of toggle the visibility of the series.\n* @name Highcharts.SeriesLegendItemClickEventObject#preventDefault\n* @type {Function}\n*/ /**\n* Related series.\n* @name Highcharts.SeriesLegendItemClickEventObject#target\n* @type {Highcharts.Series}\n*/ /**\n* Event type.\n* @name Highcharts.SeriesLegendItemClickEventObject#type\n* @type {\"legendItemClick\"}\n*/\n(''); // keeps doclets above in JS file\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport H from './Globals.js';\nvar charts = H.charts, doc = H.doc, noop = H.noop, win = H.win;\nimport Pointer from './Pointer.js';\nimport U from './Utilities.js';\nvar addEvent = U.addEvent, css = U.css, objectEach = U.objectEach, pick = U.pick, removeEvent = U.removeEvent;\n/* *\n *\n *  Constants\n *\n * */\n// The touches object keeps track of the points being touched at all times\nvar touches = {};\nvar hasPointerEvent = !!win.PointerEvent;\n/* *\n *\n *  Functions\n *\n * */\n/* eslint-disable valid-jsdoc */\n/** @private */\nfunction getWebkitTouches() {\n    var fake = [];\n    fake.item = function (i) {\n        return this[i];\n    };\n    objectEach(touches, function (touch) {\n        fake.push({\n            pageX: touch.pageX,\n            pageY: touch.pageY,\n            target: touch.target\n        });\n    });\n    return fake;\n}\n/** @private */\nfunction translateMSPointer(e, method, wktype, func) {\n    var chart = charts[Pointer.hoverChartIndex || NaN];\n    if ((e.pointerType === 'touch' ||\n        e.pointerType === e.MSPOINTER_TYPE_TOUCH) && chart) {\n        var p = chart.pointer;\n        func(e);\n        p[method]({\n            type: wktype,\n            target: e.currentTarget,\n            preventDefault: noop,\n            touches: getWebkitTouches()\n        });\n    }\n}\n/* *\n *\n *  Class\n *\n * */\n/** @private */\nvar MSPointer = /** @class */ (function (_super) {\n    __extends(MSPointer, _super);\n    function MSPointer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    MSPointer.isRequired = function () {\n        return !!(!H.hasTouch && (win.PointerEvent || win.MSPointerEvent));\n    };\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Add or remove the MS Pointer specific events\n     * @private\n     * @function Highcharts.Pointer#batchMSEvents\n     */\n    MSPointer.prototype.batchMSEvents = function (fn) {\n        fn(this.chart.container, hasPointerEvent ? 'pointerdown' : 'MSPointerDown', this.onContainerPointerDown);\n        fn(this.chart.container, hasPointerEvent ? 'pointermove' : 'MSPointerMove', this.onContainerPointerMove);\n        fn(doc, hasPointerEvent ? 'pointerup' : 'MSPointerUp', this.onDocumentPointerUp);\n    };\n    // Destroy MS events also\n    MSPointer.prototype.destroy = function () {\n        this.batchMSEvents(removeEvent);\n        _super.prototype.destroy.call(this);\n    };\n    // Disable default IE actions for pinch and such on chart element\n    MSPointer.prototype.init = function (chart, options) {\n        _super.prototype.init.call(this, chart, options);\n        if (this.hasZoom) { // #4014\n            css(chart.container, {\n                '-ms-touch-action': 'none',\n                'touch-action': 'none'\n            });\n        }\n    };\n    /**\n     * @private\n     * @function Highcharts.Pointer#onContainerPointerDown\n     */\n    MSPointer.prototype.onContainerPointerDown = function (e) {\n        translateMSPointer(e, 'onContainerTouchStart', 'touchstart', function (e) {\n            touches[e.pointerId] = {\n                pageX: e.pageX,\n                pageY: e.pageY,\n                target: e.currentTarget\n            };\n        });\n    };\n    /**\n     * @private\n     * @function Highcharts.Pointer#onContainerPointerMove\n     */\n    MSPointer.prototype.onContainerPointerMove = function (e) {\n        translateMSPointer(e, 'onContainerTouchMove', 'touchmove', function (e) {\n            touches[e.pointerId] = ({ pageX: e.pageX, pageY: e.pageY });\n            if (!touches[e.pointerId].target) {\n                touches[e.pointerId].target = e.currentTarget;\n            }\n        });\n    };\n    /**\n     * @private\n     * @function Highcharts.Pointer#onDocumentPointerUp\n     */\n    MSPointer.prototype.onDocumentPointerUp = function (e) {\n        translateMSPointer(e, 'onDocumentTouchEnd', 'touchend', function (e) {\n            delete touches[e.pointerId];\n        });\n    };\n    // Add IE specific touch events to chart\n    MSPointer.prototype.setDOMEvents = function () {\n        var tooltip = this.chart.tooltip;\n        _super.prototype.setDOMEvents.call(this);\n        if (this.hasZoom ||\n            pick((tooltip && tooltip.options.followTouchMove), true)) {\n            this.batchMSEvents(addEvent);\n        }\n    };\n    return MSPointer;\n}(Pointer));\n/* *\n *\n *  Default Export\n *\n * */\nexport default MSPointer;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport Color from './Color/Color.js';\nvar color = Color.parse;\nimport H from './Globals.js';\nvar charts = H.charts, noop = H.noop;\nimport Tooltip from './Tooltip.js';\nimport U from './Utilities.js';\nvar addEvent = U.addEvent, attr = U.attr, css = U.css, defined = U.defined, extend = U.extend, find = U.find, fireEvent = U.fireEvent, isNumber = U.isNumber, isObject = U.isObject, objectEach = U.objectEach, offset = U.offset, pick = U.pick, splat = U.splat;\n/* *\n *\n *  Class\n *\n * */\n/* eslint-disable no-invalid-this, valid-jsdoc */\n/**\n * The mouse and touch tracker object. Each {@link Chart} item has one\n * associated Pointer item that can be accessed from the  {@link Chart.pointer}\n * property.\n *\n * @class\n * @name Highcharts.Pointer\n *\n * @param {Highcharts.Chart} chart\n * The chart instance.\n *\n * @param {Highcharts.Options} options\n * The root options object. The pointer uses options from the chart and tooltip\n * structures.\n */\nvar Pointer = /** @class */ (function () {\n    /* *\n     *\n     *  Constructors\n     *\n     * */\n    function Pointer(chart, options) {\n        this.lastValidTouch = {};\n        this.pinchDown = [];\n        this.runChartClick = false;\n        this.eventsToUnbind = [];\n        this.chart = chart;\n        this.hasDragged = false;\n        this.options = options;\n        this.init(chart, options);\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Set inactive state to all series that are not currently hovered,\n     * or, if `inactiveOtherPoints` is set to true, set inactive state to\n     * all points within that series.\n     *\n     * @private\n     * @function Highcharts.Pointer#applyInactiveState\n     *\n     * @param {Array<Highcharts.Point>} points\n     * Currently hovered points\n     */\n    Pointer.prototype.applyInactiveState = function (points) {\n        var activeSeries = [], series;\n        // Get all active series from the hovered points\n        (points || []).forEach(function (item) {\n            series = item.series;\n            // Include itself\n            activeSeries.push(series);\n            // Include parent series\n            if (series.linkedParent) {\n                activeSeries.push(series.linkedParent);\n            }\n            // Include all child series\n            if (series.linkedSeries) {\n                activeSeries = activeSeries.concat(series.linkedSeries);\n            }\n            // Include navigator series\n            if (series.navigatorSeries) {\n                activeSeries.push(series.navigatorSeries);\n            }\n        });\n        // Now loop over all series, filtering out active series\n        this.chart.series.forEach(function (inactiveSeries) {\n            if (activeSeries.indexOf(inactiveSeries) === -1) {\n                // Inactive series\n                inactiveSeries.setState('inactive', true);\n            }\n            else if (inactiveSeries.options.inactiveOtherPoints) {\n                // Active series, but other points should be inactivated\n                inactiveSeries.setAllPointsToState('inactive');\n            }\n        });\n    };\n    /**\n     * Destroys the Pointer object and disconnects DOM events.\n     *\n     * @function Highcharts.Pointer#destroy\n     */\n    Pointer.prototype.destroy = function () {\n        var pointer = this;\n        this.eventsToUnbind.forEach(function (unbind) { return unbind(); });\n        this.eventsToUnbind = [];\n        if (!H.chartCount) {\n            if (Pointer.unbindDocumentMouseUp) {\n                Pointer.unbindDocumentMouseUp = Pointer.unbindDocumentMouseUp();\n            }\n            if (Pointer.unbindDocumentTouchEnd) {\n                Pointer.unbindDocumentTouchEnd = (Pointer.unbindDocumentTouchEnd());\n            }\n        }\n        // memory and CPU leak\n        clearInterval(pointer.tooltipTimeout);\n        objectEach(pointer, function (_val, prop) {\n            pointer[prop] = void 0;\n        });\n    };\n    /**\n     * Calculate attrs for selection marker.\n     * @private\n     * @function Highcharts.Pointer#getSelectionMarkerAttrs\n     * @emits getSelectionMarkerAttrs\n     */\n    Pointer.prototype.getSelectionMarkerAttrs = function (chartX, chartY) {\n        var _this = this;\n        var e = {\n            args: { chartX: chartX, chartY: chartY },\n            attrs: {},\n            shapeType: 'rect'\n        };\n        fireEvent(this, 'getSelectionMarkerAttrs', e, function (e) {\n            var _a = _this, chart = _a.chart, _b = _a.mouseDownX, mouseDownX = _b === void 0 ? 0 : _b, _c = _a.mouseDownY, mouseDownY = _c === void 0 ? 0 : _c, zoomHor = _a.zoomHor, zoomVert = _a.zoomVert, attrs = e.attrs;\n            var size;\n            attrs.x = chart.plotLeft;\n            attrs.y = chart.plotTop;\n            attrs.width = zoomHor ? 1 : chart.plotWidth;\n            attrs.height = zoomVert ? 1 : chart.plotHeight;\n            // Adjust the width of the selection marker\n            if (zoomHor) {\n                size = chartX - mouseDownX;\n                attrs.width = Math.abs(size);\n                attrs.x = (size > 0 ? 0 : size) + mouseDownX;\n            }\n            // Adjust the height of the selection marker\n            if (zoomVert) {\n                size = chartY - mouseDownY;\n                attrs.height = Math.abs(size);\n                attrs.y = (size > 0 ? 0 : size) + mouseDownY;\n            }\n        });\n        return e;\n    };\n    /**\n     * Perform a drag operation in response to a mousemove event while the mouse\n     * is down.\n     * @private\n     * @function Highcharts.Pointer#drag\n     */\n    Pointer.prototype.drag = function (e) {\n        var chart = this.chart, chartOptions = chart.options.chart, plotLeft = chart.plotLeft, plotTop = chart.plotTop, plotWidth = chart.plotWidth, plotHeight = chart.plotHeight, mouseDownX = (this.mouseDownX || 0), mouseDownY = (this.mouseDownY || 0), panningEnabled = isObject(chartOptions.panning) ?\n            chartOptions.panning && chartOptions.panning.enabled :\n            chartOptions.panning, panKey = (chartOptions.panKey && e[chartOptions.panKey + 'Key']);\n        var chartX = e.chartX, chartY = e.chartY, clickedInside, selectionMarker = this.selectionMarker;\n        // If the device supports both touch and mouse (like IE11), and we are\n        // touch-dragging inside the plot area, don't handle the mouse event.\n        // #4339.\n        if (selectionMarker && selectionMarker.touch) {\n            return;\n        }\n        // If the mouse is outside the plot area, adjust to coordinates\n        // inside to prevent the selection marker from going outside\n        if (chartX < plotLeft) {\n            chartX = plotLeft;\n        }\n        else if (chartX > plotLeft + plotWidth) {\n            chartX = plotLeft + plotWidth;\n        }\n        if (chartY < plotTop) {\n            chartY = plotTop;\n        }\n        else if (chartY > plotTop + plotHeight) {\n            chartY = plotTop + plotHeight;\n        }\n        // determine if the mouse has moved more than 10px\n        this.hasDragged = Math.sqrt(Math.pow(mouseDownX - chartX, 2) +\n            Math.pow(mouseDownY - chartY, 2));\n        if (this.hasDragged > 10) {\n            clickedInside = chart.isInsidePlot(mouseDownX - plotLeft, mouseDownY - plotTop, {\n                visiblePlotOnly: true\n            });\n            var _a = this.getSelectionMarkerAttrs(chartX, chartY), shapeType = _a.shapeType, attrs = _a.attrs;\n            // make a selection\n            if ((chart.hasCartesianSeries || chart.mapView) &&\n                (this.zoomX || this.zoomY) &&\n                clickedInside &&\n                !panKey) {\n                if (!selectionMarker) {\n                    this.selectionMarker = selectionMarker =\n                        chart.renderer[shapeType]();\n                    selectionMarker\n                        .attr({\n                        'class': 'highcharts-selection-marker',\n                        zIndex: 7\n                    })\n                        .add();\n                    if (!chart.styledMode) {\n                        selectionMarker.attr({\n                            fill: chartOptions.selectionMarkerFill ||\n                                color(\"#335cad\" /* Palette.highlightColor80 */)\n                                    .setOpacity(0.25).get()\n                        });\n                    }\n                }\n            }\n            if (selectionMarker) {\n                selectionMarker.attr(attrs);\n            }\n            // panning\n            if (clickedInside &&\n                !selectionMarker &&\n                panningEnabled) {\n                chart.pan(e, chartOptions.panning);\n            }\n        }\n    };\n    /**\n     * Start a drag operation.\n     * @private\n     * @function Highcharts.Pointer#dragStart\n     */\n    Pointer.prototype.dragStart = function (e) {\n        var chart = this.chart;\n        // Record the start position\n        chart.mouseIsDown = e.type;\n        chart.cancelClick = false;\n        chart.mouseDownX = this.mouseDownX = e.chartX;\n        chart.mouseDownY = this.mouseDownY = e.chartY;\n    };\n    /**\n     * Get selection box to calculate extremes\n     * @private\n     * @function Highcharts.Pointer#getSelectionBox\n     * @emits getSelectionBox\n     */\n    Pointer.prototype.getSelectionBox = function (marker) {\n        var e = {\n            args: { marker: marker },\n            result: {}\n        };\n        fireEvent(this, 'getSelectionBox', e, function (e) {\n            e.result = {\n                x: marker.attr ? +marker.attr('x') : marker.x,\n                y: marker.attr ? +marker.attr('y') : marker.y,\n                width: marker.attr ? marker.attr('width') : marker.width,\n                height: marker.attr ? marker.attr('height') : marker.height\n            };\n        });\n        return e.result;\n    };\n    /**\n     * On mouse up or touch end across the entire document, drop the selection.\n     * @private\n     * @function Highcharts.Pointer#drop\n     */\n    Pointer.prototype.drop = function (e) {\n        var pointer = this, chart = this.chart, hasPinched = this.hasPinched;\n        if (this.selectionMarker) {\n            var _a = this.getSelectionBox(this.selectionMarker), x_1 = _a.x, y_1 = _a.y, width_1 = _a.width, height_1 = _a.height;\n            var selectionData_1 = {\n                originalEvent: e,\n                xAxis: [],\n                yAxis: [],\n                x: x_1,\n                y: y_1,\n                width: width_1,\n                height: height_1\n            }, \n            // Start by false runZoom, unless when we have a mapView, in\n            // which case the zoom will be handled in the selection event.\n            runZoom_1 = Boolean(chart.mapView);\n            // a selection has been made\n            if (this.hasDragged || hasPinched) {\n                // record each axis' min and max\n                chart.axes.forEach(function (axis) {\n                    if (axis.zoomEnabled &&\n                        defined(axis.min) &&\n                        (hasPinched ||\n                            pointer[{\n                                xAxis: 'zoomX',\n                                yAxis: 'zoomY'\n                            }[axis.coll]]) &&\n                        isNumber(x_1) &&\n                        isNumber(y_1) &&\n                        isNumber(width_1) &&\n                        isNumber(height_1)) { // #859, #3569\n                        var horiz = axis.horiz, minPixelPadding = e.type === 'touchend' ?\n                            axis.minPixelPadding :\n                            0, // #1207, #3075\n                        selectionMin = axis.toValue((horiz ? x_1 : y_1) + minPixelPadding), selectionMax = axis.toValue((horiz ? x_1 + width_1 : y_1 + height_1) -\n                            minPixelPadding);\n                        selectionData_1[axis.coll].push({\n                            axis: axis,\n                            // Min/max for reversed axes\n                            min: Math.min(selectionMin, selectionMax),\n                            max: Math.max(selectionMin, selectionMax)\n                        });\n                        runZoom_1 = true;\n                    }\n                });\n                if (runZoom_1) {\n                    fireEvent(chart, 'selection', selectionData_1, function (args) {\n                        chart.zoom(extend(args, hasPinched ?\n                            { animation: false } :\n                            null));\n                    });\n                }\n            }\n            if (isNumber(chart.index)) {\n                this.selectionMarker = this.selectionMarker.destroy();\n            }\n            // Reset scaling preview\n            if (hasPinched) {\n                this.scaleGroups();\n            }\n        }\n        // Reset all. Check isNumber because it may be destroyed on mouse up\n        // (#877)\n        if (chart && isNumber(chart.index)) {\n            css(chart.container, { cursor: chart._cursor });\n            chart.cancelClick = this.hasDragged > 10; // #370\n            chart.mouseIsDown = this.hasDragged = this.hasPinched = false;\n            this.pinchDown = [];\n        }\n    };\n    /**\n     * Finds the closest point to a set of coordinates, using the k-d-tree\n     * algorithm.\n     *\n     * @function Highcharts.Pointer#findNearestKDPoint\n     *\n     * @param {Array<Highcharts.Series>} series\n     * All the series to search in.\n     *\n     * @param {boolean|undefined} shared\n     * Whether it is a shared tooltip or not.\n     *\n     * @param {Highcharts.PointerEventObject} e\n     * The pointer event object, containing chart coordinates of the pointer.\n     *\n     * @return {Highcharts.Point|undefined}\n     * The point closest to given coordinates.\n     */\n    Pointer.prototype.findNearestKDPoint = function (series, shared, e) {\n        var closest;\n        /** @private */\n        function sort(p1, p2) {\n            var isCloserX = p1.distX - p2.distX, isCloser = p1.dist - p2.dist, isAbove = ((p2.series.group && p2.series.group.zIndex) -\n                (p1.series.group && p1.series.group.zIndex));\n            var result;\n            // We have two points which are not in the same place on xAxis\n            // and shared tooltip:\n            if (isCloserX !== 0 && shared) { // #5721\n                result = isCloserX;\n                // Points are not exactly in the same place on x/yAxis:\n            }\n            else if (isCloser !== 0) {\n                result = isCloser;\n                // The same xAxis and yAxis position, sort by z-index:\n            }\n            else if (isAbove !== 0) {\n                result = isAbove;\n                // The same zIndex, sort by array index:\n            }\n            else {\n                result =\n                    p1.series.index > p2.series.index ?\n                        -1 :\n                        1;\n            }\n            return result;\n        }\n        series.forEach(function (s) {\n            var noSharedTooltip = s.noSharedTooltip && shared, compareX = (!noSharedTooltip &&\n                s.options.findNearestPointBy.indexOf('y') < 0), point = s.searchPoint(e, compareX);\n            if ( // Check that we actually found a point on the series.\n            isObject(point, true) && point.series &&\n                // Use the new point if it is closer.\n                (!isObject(closest, true) ||\n                    (sort(closest, point) > 0))) {\n                closest = point;\n            }\n        });\n        return closest;\n    };\n    /**\n     * @private\n     * @function Highcharts.Pointer#getChartCoordinatesFromPoint\n     */\n    Pointer.prototype.getChartCoordinatesFromPoint = function (point, inverted) {\n        var series = point.series, xAxis = series.xAxis, yAxis = series.yAxis, shapeArgs = point.shapeArgs;\n        if (xAxis && yAxis) {\n            var x = pick(point.clientX, point.plotX);\n            var y = point.plotY || 0;\n            if (point.isNode &&\n                shapeArgs &&\n                isNumber(shapeArgs.x) &&\n                isNumber(shapeArgs.y)) {\n                x = shapeArgs.x;\n                y = shapeArgs.y;\n            }\n            return inverted ? {\n                chartX: yAxis.len + yAxis.pos - y,\n                chartY: xAxis.len + xAxis.pos - x\n            } : {\n                chartX: x + xAxis.pos,\n                chartY: y + yAxis.pos\n            };\n        }\n        if (shapeArgs && shapeArgs.x && shapeArgs.y) {\n            // E.g. pies do not have axes\n            return {\n                chartX: shapeArgs.x,\n                chartY: shapeArgs.y\n            };\n        }\n    };\n    /**\n     * Return the cached chartPosition if it is available on the Pointer,\n     * otherwise find it. Running offset is quite expensive, so it should be\n     * avoided when we know the chart hasn't moved.\n     *\n     * @function Highcharts.Pointer#getChartPosition\n     *\n     * @return {Highcharts.ChartPositionObject}\n     * The offset of the chart container within the page\n     */\n    Pointer.prototype.getChartPosition = function () {\n        if (this.chartPosition) {\n            return this.chartPosition;\n        }\n        var container = this.chart.container;\n        var pos = offset(container);\n        this.chartPosition = {\n            left: pos.left,\n            top: pos.top,\n            scaleX: 1,\n            scaleY: 1\n        };\n        var offsetWidth = container.offsetWidth;\n        var offsetHeight = container.offsetHeight;\n        // #13342 - tooltip was not visible in Chrome, when chart\n        // updates height.\n        if (offsetWidth > 2 && // #13342\n            offsetHeight > 2 // #13342\n        ) {\n            this.chartPosition.scaleX = pos.width / offsetWidth;\n            this.chartPosition.scaleY = pos.height / offsetHeight;\n        }\n        return this.chartPosition;\n    };\n    /**\n     * Get the click position in terms of axis values.\n     *\n     * @function Highcharts.Pointer#getCoordinates\n     *\n     * @param {Highcharts.PointerEventObject} e\n     * Pointer event, extended with `chartX` and `chartY` properties.\n     *\n     * @return {Highcharts.PointerAxisCoordinatesObject}\n     * Axis coordinates.\n     */\n    Pointer.prototype.getCoordinates = function (e) {\n        var coordinates = {\n            xAxis: [],\n            yAxis: []\n        };\n        this.chart.axes.forEach(function (axis) {\n            coordinates[axis.isXAxis ? 'xAxis' : 'yAxis'].push({\n                axis: axis,\n                value: axis.toValue(e[axis.horiz ? 'chartX' : 'chartY'])\n            });\n        });\n        return coordinates;\n    };\n    /**\n     * Calculates what is the current hovered point/points and series.\n     *\n     * @private\n     * @function Highcharts.Pointer#getHoverData\n     *\n     * @param {Highcharts.Point|undefined} existingHoverPoint\n     * The point currently being hovered.\n     *\n     * @param {Highcharts.Series|undefined} existingHoverSeries\n     * The series currently being hovered.\n     *\n     * @param {Array<Highcharts.Series>} series\n     * All the series in the chart.\n     *\n     * @param {boolean} isDirectTouch\n     * Is the pointer directly hovering the point.\n     *\n     * @param {boolean|undefined} shared\n     * Whether it is a shared tooltip or not.\n     *\n     * @param {Highcharts.PointerEventObject} [e]\n     * The triggering event, containing chart coordinates of the pointer.\n     *\n     * @return {Object}\n     * Object containing resulting hover data: hoverPoint, hoverSeries, and\n     * hoverPoints.\n     */\n    Pointer.prototype.getHoverData = function (existingHoverPoint, existingHoverSeries, series, isDirectTouch, shared, e) {\n        var hoverPoints = [], useExisting = !!(isDirectTouch && existingHoverPoint), filter = function (s) {\n            return (s.visible &&\n                !(!shared && s.directTouch) && // #3821\n                pick(s.options.enableMouseTracking, true));\n        };\n        var hoverSeries = existingHoverSeries, \n        // Which series to look in for the hover point\n        searchSeries, \n        // Parameters needed for beforeGetHoverData event.\n        eventArgs = {\n            chartX: e ? e.chartX : void 0,\n            chartY: e ? e.chartY : void 0,\n            shared: shared\n        };\n        // Find chart.hoverPane and update filter method in polar.\n        fireEvent(this, 'beforeGetHoverData', eventArgs);\n        var notSticky = hoverSeries && !hoverSeries.stickyTracking;\n        searchSeries = notSticky ?\n            // Only search on hovered series if it has stickyTracking false\n            [hoverSeries] :\n            // Filter what series to look in.\n            series.filter(function (s) { return s.stickyTracking &&\n                (eventArgs.filter || filter)(s); });\n        // Use existing hovered point or find the one closest to coordinates.\n        var hoverPoint = useExisting || !e ?\n            existingHoverPoint :\n            this.findNearestKDPoint(searchSeries, shared, e);\n        // Assign hover series\n        hoverSeries = hoverPoint && hoverPoint.series;\n        // If we have a hoverPoint, assign hoverPoints.\n        if (hoverPoint) {\n            // When tooltip is shared, it displays more than one point\n            if (shared && !hoverSeries.noSharedTooltip) {\n                searchSeries = series.filter(function (s) {\n                    return eventArgs.filter ?\n                        eventArgs.filter(s) : filter(s) && !s.noSharedTooltip;\n                });\n                // Get all points with the same x value as the hoverPoint\n                searchSeries.forEach(function (s) {\n                    var point = find(s.points, function (p) {\n                        return p.x === hoverPoint.x && !p.isNull;\n                    });\n                    if (isObject(point)) {\n                        /*\n                        * Boost returns a minimal point. Convert it to a usable\n                        * point for tooltip and states.\n                        */\n                        if (s.boosted && s.boost) {\n                            point = s.boost.getPoint(point);\n                        }\n                        hoverPoints.push(point);\n                    }\n                });\n            }\n            else {\n                hoverPoints.push(hoverPoint);\n            }\n        }\n        // Check whether the hoverPoint is inside pane we are hovering over.\n        eventArgs = { hoverPoint: hoverPoint };\n        fireEvent(this, 'afterGetHoverData', eventArgs);\n        return {\n            hoverPoint: eventArgs.hoverPoint,\n            hoverSeries: hoverSeries,\n            hoverPoints: hoverPoints\n        };\n    };\n    /**\n     * @private\n     * @function Highcharts.Pointer#getPointFromEvent\n     */\n    Pointer.prototype.getPointFromEvent = function (e) {\n        var target = e.target, point;\n        while (target && !point) {\n            point = target.point;\n            target = target.parentNode;\n        }\n        return point;\n    };\n    /**\n     * @private\n     * @function Highcharts.Pointer#onTrackerMouseOut\n     */\n    Pointer.prototype.onTrackerMouseOut = function (e) {\n        var chart = this.chart;\n        var relatedTarget = e.relatedTarget || e.toElement;\n        var series = chart.hoverSeries;\n        this.isDirectTouch = false;\n        if (series &&\n            relatedTarget &&\n            !series.stickyTracking &&\n            !this.inClass(relatedTarget, 'highcharts-tooltip') &&\n            (!this.inClass(relatedTarget, 'highcharts-series-' + series.index) || // #2499, #4465, #5553\n                !this.inClass(relatedTarget, 'highcharts-tracker'))) {\n            series.onMouseOut();\n        }\n    };\n    /**\n     * Utility to detect whether an element has, or has a parent with, a\n     * specific class name. Used on detection of tracker objects and on deciding\n     * whether hovering the tooltip should cause the active series to mouse out.\n     *\n     * @function Highcharts.Pointer#inClass\n     *\n     * @param {Highcharts.SVGDOMElement|Highcharts.HTMLDOMElement} element\n     * The element to investigate.\n     *\n     * @param {string} className\n     * The class name to look for.\n     *\n     * @return {boolean|undefined}\n     * True if either the element or one of its parents has the given class\n     * name.\n     */\n    Pointer.prototype.inClass = function (element, className) {\n        var elem = element, elemClassName;\n        while (elem) {\n            elemClassName = attr(elem, 'class');\n            if (elemClassName) {\n                if (elemClassName.indexOf(className) !== -1) {\n                    return true;\n                }\n                if (elemClassName.indexOf('highcharts-container') !== -1) {\n                    return false;\n                }\n            }\n            elem = elem.parentElement;\n        }\n    };\n    /**\n     * Initialize the Pointer.\n     *\n     * @private\n     * @function Highcharts.Pointer#init\n     *\n     * @param {Highcharts.Chart} chart\n     * The Chart instance.\n     *\n     * @param {Highcharts.Options} options\n     * The root options object. The pointer uses options from the chart and\n     * tooltip structures.\n     */\n    Pointer.prototype.init = function (chart, options) {\n        // Store references\n        this.options = options;\n        this.chart = chart;\n        // Do we need to handle click on a touch device?\n        this.runChartClick = Boolean(options.chart.events && options.chart.events.click);\n        this.pinchDown = [];\n        this.lastValidTouch = {};\n        if (Tooltip) {\n            /**\n             * Tooltip object for points of series.\n             *\n             * @name Highcharts.Chart#tooltip\n             * @type {Highcharts.Tooltip}\n             */\n            chart.tooltip = new Tooltip(chart, options.tooltip);\n        }\n        this.setDOMEvents();\n    };\n    /**\n     * Takes a browser event object and extends it with custom Highcharts\n     * properties `chartX` and `chartY` in order to work on the internal\n     * coordinate system.\n     *\n     * On map charts, the properties `lon` and `lat` are added to the event\n     * object given that the chart has projection information.\n     *\n     * @function Highcharts.Pointer#normalize\n     *\n     * @param {global.MouseEvent|global.PointerEvent|global.TouchEvent} e\n     * Event object in standard browsers.\n     *\n     * @param {Highcharts.OffsetObject} [chartPosition]\n     * Additional chart offset.\n     *\n     * @return {Highcharts.PointerEventObject}\n     * A browser event with extended properties `chartX` and `chartY`.\n     */\n    Pointer.prototype.normalize = function (e, chartPosition) {\n        var touches = e.touches;\n        // iOS (#2757)\n        var ePos = (touches ?\n            touches.length ?\n                touches.item(0) :\n                (pick(// #13534\n                touches.changedTouches, e.changedTouches))[0] :\n            e);\n        // Get mouse position\n        if (!chartPosition) {\n            chartPosition = this.getChartPosition();\n        }\n        var chartX = ePos.pageX - chartPosition.left, chartY = ePos.pageY - chartPosition.top;\n        // #11329 - when there is scaling on a parent element, we need to take\n        // this into account\n        chartX /= chartPosition.scaleX;\n        chartY /= chartPosition.scaleY;\n        return extend(e, {\n            chartX: Math.round(chartX),\n            chartY: Math.round(chartY)\n        });\n    };\n    /**\n     * @private\n     * @function Highcharts.Pointer#onContainerClick\n     */\n    Pointer.prototype.onContainerClick = function (e) {\n        var chart = this.chart;\n        var hoverPoint = chart.hoverPoint;\n        var pEvt = this.normalize(e);\n        var plotLeft = chart.plotLeft;\n        var plotTop = chart.plotTop;\n        if (!chart.cancelClick) {\n            // On tracker click, fire the series and point events. #783, #1583\n            if (hoverPoint &&\n                this.inClass(pEvt.target, 'highcharts-tracker')) {\n                // the series click event\n                fireEvent(hoverPoint.series, 'click', extend(pEvt, {\n                    point: hoverPoint\n                }));\n                // the point click event\n                if (chart.hoverPoint) { // it may be destroyed (#1844)\n                    hoverPoint.firePointEvent('click', pEvt);\n                }\n                // When clicking outside a tracker, fire a chart event\n            }\n            else {\n                extend(pEvt, this.getCoordinates(pEvt));\n                // fire a click event in the chart\n                if (chart.isInsidePlot(pEvt.chartX - plotLeft, pEvt.chartY - plotTop, {\n                    visiblePlotOnly: true\n                })) {\n                    fireEvent(chart, 'click', pEvt);\n                }\n            }\n        }\n    };\n    /**\n     * @private\n     * @function Highcharts.Pointer#onContainerMouseDown\n     */\n    Pointer.prototype.onContainerMouseDown = function (e) {\n        var isPrimaryButton = ((e.buttons || e.button) & 1) === 1;\n        // Normalize before the 'if' for the legacy IE (#7850)\n        e = this.normalize(e);\n        // #11635, Firefox does not reliable fire move event after click scroll\n        if (H.isFirefox &&\n            e.button !== 0) {\n            this.onContainerMouseMove(e);\n        }\n        // #11635, limiting to primary button (incl. IE 8 support)\n        if (typeof e.button === 'undefined' ||\n            isPrimaryButton) {\n            this.zoomOption(e);\n            // #295, #13737 solve conflict between container drag and chart zoom\n            if (isPrimaryButton &&\n                e.preventDefault) {\n                e.preventDefault();\n            }\n            this.dragStart(e);\n        }\n    };\n    /**\n     * When mouse leaves the container, hide the tooltip.\n     * @private\n     * @function Highcharts.Pointer#onContainerMouseLeave\n     */\n    Pointer.prototype.onContainerMouseLeave = function (e) {\n        var chart = charts[pick(Pointer.hoverChartIndex, -1)];\n        var tooltip = this.chart.tooltip;\n        e = this.normalize(e);\n        // #4886, MS Touch end fires mouseleave but with no related target\n        if (chart &&\n            (e.relatedTarget || e.toElement)) {\n            chart.pointer.reset();\n            // Also reset the chart position, used in #149 fix\n            chart.pointer.chartPosition = void 0;\n        }\n        // #11635, Firefox wheel scroll does not fire out events consistently\n        if (tooltip && !tooltip.isHidden) {\n            this.reset();\n        }\n    };\n    /**\n     * When mouse enters the container, delete pointer's chartPosition.\n     * @private\n     * @function Highcharts.Pointer#onContainerMouseEnter\n     */\n    Pointer.prototype.onContainerMouseEnter = function (e) {\n        delete this.chartPosition;\n    };\n    /**\n     * The mousemove, touchmove and touchstart event handler\n     * @private\n     * @function Highcharts.Pointer#onContainerMouseMove\n     */\n    Pointer.prototype.onContainerMouseMove = function (e) {\n        var chart = this.chart, tooltip = chart.tooltip, pEvt = this.normalize(e);\n        this.setHoverChartIndex();\n        // In IE8 we apparently need this returnValue set to false in order to\n        // avoid text being selected. But in Chrome, e.returnValue is prevented,\n        // plus we don't need to run e.preventDefault to prevent selected text\n        // in modern browsers. So we set it conditionally. Remove it when IE8 is\n        // no longer needed. #2251, #3224.\n        if (!pEvt.preventDefault) {\n            pEvt.returnValue = false;\n        }\n        if (chart.mouseIsDown === 'mousedown' || this.touchSelect(pEvt)) {\n            this.drag(pEvt);\n        }\n        // Show the tooltip and run mouse over events (#977)\n        if (!chart.openMenu &&\n            (this.inClass(pEvt.target, 'highcharts-tracker') ||\n                chart.isInsidePlot(pEvt.chartX - chart.plotLeft, pEvt.chartY - chart.plotTop, {\n                    visiblePlotOnly: true\n                })) &&\n            // If the tooltip has stickOnContact enabled, do nothing. This\n            // applies regardless of any combinations of the `split` and\n            // `useHTML` options.\n            !(tooltip &&\n                tooltip.shouldStickOnContact(pEvt))) {\n            if (this.inClass(pEvt.target, 'highcharts-no-tooltip')) {\n                this.reset(false, 0);\n            }\n            else {\n                this.runPointActions(pEvt);\n            }\n        }\n    };\n    /**\n     * @private\n     * @function Highcharts.Pointer#onDocumentTouchEnd\n     */\n    Pointer.prototype.onDocumentTouchEnd = function (e) {\n        var hoverChart = charts[pick(Pointer.hoverChartIndex, -1)];\n        if (hoverChart) {\n            hoverChart.pointer.drop(e);\n        }\n    };\n    /**\n     * @private\n     * @function Highcharts.Pointer#onContainerTouchMove\n     */\n    Pointer.prototype.onContainerTouchMove = function (e) {\n        if (this.touchSelect(e)) {\n            this.onContainerMouseMove(e);\n        }\n        else {\n            this.touch(e);\n        }\n    };\n    /**\n     * @private\n     * @function Highcharts.Pointer#onContainerTouchStart\n     */\n    Pointer.prototype.onContainerTouchStart = function (e) {\n        if (this.touchSelect(e)) {\n            this.onContainerMouseDown(e);\n        }\n        else {\n            this.zoomOption(e);\n            this.touch(e, true);\n        }\n    };\n    /**\n     * Special handler for mouse move that will hide the tooltip when the mouse\n     * leaves the plotarea. Issue #149 workaround. The mouseleave event does not\n     * always fire.\n     * @private\n     * @function Highcharts.Pointer#onDocumentMouseMove\n     */\n    Pointer.prototype.onDocumentMouseMove = function (e) {\n        var chart = this.chart;\n        var tooltip = chart.tooltip;\n        var chartPosition = this.chartPosition;\n        var pEvt = this.normalize(e, chartPosition);\n        // If we're outside, hide the tooltip\n        if (chartPosition &&\n            !chart.isInsidePlot(pEvt.chartX - chart.plotLeft, pEvt.chartY - chart.plotTop, {\n                visiblePlotOnly: true\n            }) &&\n            !(tooltip &&\n                tooltip.shouldStickOnContact(pEvt)) &&\n            !this.inClass(pEvt.target, 'highcharts-tracker')) {\n            this.reset();\n        }\n    };\n    /**\n     * @private\n     * @function Highcharts.Pointer#onDocumentMouseUp\n     */\n    Pointer.prototype.onDocumentMouseUp = function (e) {\n        var chart = charts[pick(Pointer.hoverChartIndex, -1)];\n        if (chart) {\n            chart.pointer.drop(e);\n        }\n    };\n    /**\n     * Handle touch events with two touches\n     * @private\n     * @function Highcharts.Pointer#pinch\n     */\n    Pointer.prototype.pinch = function (e) {\n        var self = this, chart = self.chart, pinchDown = self.pinchDown, touches = (e.touches || []), touchesLength = touches.length, lastValidTouch = self.lastValidTouch, hasZoom = self.hasZoom, transform = {}, fireClickEvent = touchesLength === 1 && ((self.inClass(e.target, 'highcharts-tracker') &&\n            chart.runTrackerClick) ||\n            self.runChartClick), clip = {}, tooltip = self.chart.tooltip, followTouchMove = touchesLength === 1 &&\n            pick((tooltip && tooltip.options.followTouchMove), true);\n        var selectionMarker = self.selectionMarker;\n        // Don't initiate panning until the user has pinched. This prevents us\n        // from blocking page scrolling as users scroll down a long page\n        // (#4210).\n        if (touchesLength > 1) {\n            self.initiated = true;\n        }\n        else if (followTouchMove) {\n            // #16119: Prevent blocking scroll when single-finger panning is\n            // not enabled\n            self.initiated = false;\n        }\n        // On touch devices, only proceed to trigger click if a handler is\n        // defined\n        if (hasZoom &&\n            self.initiated &&\n            !fireClickEvent &&\n            e.cancelable !== false) {\n            e.preventDefault();\n        }\n        // Normalize each touch\n        [].map.call(touches, function (e) {\n            return self.normalize(e);\n        });\n        // Register the touch start position\n        if (e.type === 'touchstart') {\n            [].forEach.call(touches, function (e, i) {\n                pinchDown[i] = { chartX: e.chartX, chartY: e.chartY };\n            });\n            lastValidTouch.x = [pinchDown[0].chartX, pinchDown[1] &&\n                    pinchDown[1].chartX];\n            lastValidTouch.y = [pinchDown[0].chartY, pinchDown[1] &&\n                    pinchDown[1].chartY];\n            // Identify the data bounds in pixels\n            chart.axes.forEach(function (axis) {\n                if (axis.zoomEnabled) {\n                    var bounds = chart.bounds[axis.horiz ? 'h' : 'v'], minPixelPadding = axis.minPixelPadding, min = axis.toPixels(Math.min(pick(axis.options.min, axis.dataMin), axis.dataMin)), max = axis.toPixels(Math.max(pick(axis.options.max, axis.dataMax), axis.dataMax)), absMin = Math.min(min, max), absMax = Math.max(min, max);\n                    // Store the bounds for use in the touchmove handler\n                    bounds.min = Math.min(axis.pos, absMin - minPixelPadding);\n                    bounds.max = Math.max(axis.pos + axis.len, absMax + minPixelPadding);\n                }\n            });\n            self.res = true; // reset on next move\n            // Optionally move the tooltip on touchmove\n        }\n        else if (followTouchMove) {\n            this.runPointActions(self.normalize(e));\n            // Event type is touchmove, handle panning and pinching\n        }\n        else if (pinchDown.length) { // can be 0 when releasing, if touchend\n            // fires first\n            fireEvent(chart, 'touchpan', { originalEvent: e }, function () {\n                // Set the marker\n                if (!selectionMarker) {\n                    // @todo It's a mock object, so maybe we need a separate\n                    // interface\n                    self.selectionMarker = selectionMarker = extend({\n                        destroy: noop,\n                        touch: true\n                    }, chart.plotBox);\n                }\n                self.pinchTranslate(pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);\n                self.hasPinched = hasZoom;\n                // Scale and translate the groups to provide visual feedback\n                // during pinching\n                self.scaleGroups(transform, clip);\n            });\n            if (self.res) {\n                self.res = false;\n                this.reset(false, 0);\n            }\n        }\n    };\n    /**\n     * Run translation operations\n     * @private\n     * @function Highcharts.Pointer#pinchTranslate\n     */\n    Pointer.prototype.pinchTranslate = function (pinchDown, touches, transform, selectionMarker, clip, lastValidTouch) {\n        if (this.zoomHor) {\n            this.pinchTranslateDirection(true, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);\n        }\n        if (this.zoomVert) {\n            this.pinchTranslateDirection(false, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);\n        }\n    };\n    /**\n     * Run translation operations for each direction (horizontal and vertical)\n     * independently.\n     * @private\n     * @function Highcharts.Pointer#pinchTranslateDirection\n     */\n    Pointer.prototype.pinchTranslateDirection = function (horiz, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch, forcedScale) {\n        var chart = this.chart, xy = horiz ? 'x' : 'y', XY = horiz ? 'X' : 'Y', sChartXY = ('chart' + XY), wh = horiz ? 'width' : 'height', plotLeftTop = chart['plot' + (horiz ? 'Left' : 'Top')], inverted = chart.inverted, bounds = chart.bounds[horiz ? 'h' : 'v'], singleTouch = pinchDown.length === 1, touch0Start = pinchDown[0][sChartXY], touch1Start = !singleTouch && pinchDown[1][sChartXY], setScale = function () {\n            // Don't zoom if fingers are too close on this axis\n            if (typeof touch1Now === 'number' &&\n                Math.abs(touch0Start - touch1Start) > 20) {\n                scale = forcedScale ||\n                    Math.abs(touch0Now - touch1Now) /\n                        Math.abs(touch0Start - touch1Start);\n            }\n            clipXY = ((plotLeftTop - touch0Now) / scale) + touch0Start;\n            selectionWH = chart['plot' + (horiz ? 'Width' : 'Height')] / scale;\n        };\n        var selectionWH, selectionXY, clipXY, scale = forcedScale || 1, touch0Now = touches[0][sChartXY], touch1Now = !singleTouch && touches[1][sChartXY], outOfBounds;\n        // Set the scale, first pass\n        setScale();\n        // The clip position (x or y) is altered if out of bounds, the selection\n        // position is not\n        selectionXY = clipXY;\n        // Out of bounds\n        if (selectionXY < bounds.min) {\n            selectionXY = bounds.min;\n            outOfBounds = true;\n        }\n        else if (selectionXY + selectionWH > bounds.max) {\n            selectionXY = bounds.max - selectionWH;\n            outOfBounds = true;\n        }\n        // Is the chart dragged off its bounds, determined by dataMin and\n        // dataMax?\n        if (outOfBounds) {\n            // Modify the touchNow position in order to create an elastic drag\n            // movement. This indicates to the user that the chart is responsive\n            // but can't be dragged further.\n            touch0Now -= 0.8 * (touch0Now - lastValidTouch[xy][0]);\n            if (typeof touch1Now === 'number') {\n                touch1Now -= 0.8 * (touch1Now - lastValidTouch[xy][1]);\n            }\n            // Set the scale, second pass to adapt to the modified touchNow\n            // positions\n            setScale();\n        }\n        else {\n            lastValidTouch[xy] = [touch0Now, touch1Now];\n        }\n        // Set geometry for clipping, selection and transformation\n        if (!inverted) {\n            clip[xy] = clipXY - plotLeftTop;\n            clip[wh] = selectionWH;\n        }\n        var scaleKey = inverted ?\n            (horiz ? 'scaleY' : 'scaleX') : 'scale' + XY;\n        var transformScale = inverted ? 1 / scale : scale;\n        selectionMarker[wh] = selectionWH;\n        selectionMarker[xy] = selectionXY;\n        transform[scaleKey] = scale;\n        transform['translate' + XY] = (transformScale * plotLeftTop) +\n            (touch0Now - (transformScale * touch0Start));\n    };\n    /**\n     * Reset the tracking by hiding the tooltip, the hover series state and the\n     * hover point\n     *\n     * @function Highcharts.Pointer#reset\n     *\n     * @param {boolean} [allowMove]\n     * Instead of destroying the tooltip altogether, allow moving it if\n     * possible.\n     *\n     * @param {number} [delay]\n     */\n    Pointer.prototype.reset = function (allowMove, delay) {\n        var pointer = this, chart = pointer.chart, hoverSeries = chart.hoverSeries, hoverPoint = chart.hoverPoint, hoverPoints = chart.hoverPoints, tooltip = chart.tooltip, tooltipPoints = tooltip && tooltip.shared ?\n            hoverPoints :\n            hoverPoint;\n        // Check if the points have moved outside the plot area (#1003, #4736,\n        // #5101)\n        if (allowMove && tooltipPoints) {\n            splat(tooltipPoints).forEach(function (point) {\n                if (point.series.isCartesian &&\n                    typeof point.plotX === 'undefined') {\n                    allowMove = false;\n                }\n            });\n        }\n        // Just move the tooltip, #349\n        if (allowMove) {\n            if (tooltip && tooltipPoints && splat(tooltipPoints).length) {\n                tooltip.refresh(tooltipPoints);\n                if (tooltip.shared && hoverPoints) { // #8284\n                    hoverPoints.forEach(function (point) {\n                        point.setState(point.state, true);\n                        if (point.series.isCartesian) {\n                            if (point.series.xAxis.crosshair) {\n                                point.series.xAxis\n                                    .drawCrosshair(null, point);\n                            }\n                            if (point.series.yAxis.crosshair) {\n                                point.series.yAxis\n                                    .drawCrosshair(null, point);\n                            }\n                        }\n                    });\n                }\n                else if (hoverPoint) { // #2500\n                    hoverPoint.setState(hoverPoint.state, true);\n                    chart.axes.forEach(function (axis) {\n                        if (axis.crosshair &&\n                            hoverPoint.series[axis.coll] === axis) {\n                            axis.drawCrosshair(null, hoverPoint);\n                        }\n                    });\n                }\n            }\n            // Full reset\n        }\n        else {\n            if (hoverPoint) {\n                hoverPoint.onMouseOut();\n            }\n            if (hoverPoints) {\n                hoverPoints.forEach(function (point) {\n                    point.setState();\n                });\n            }\n            if (hoverSeries) {\n                hoverSeries.onMouseOut();\n            }\n            if (tooltip) {\n                tooltip.hide(delay);\n            }\n            if (pointer.unDocMouseMove) {\n                pointer.unDocMouseMove = pointer.unDocMouseMove();\n            }\n            // Remove crosshairs\n            chart.axes.forEach(function (axis) {\n                axis.hideCrosshair();\n            });\n            pointer.hoverX = chart.hoverPoints = chart.hoverPoint = null;\n        }\n    };\n    /**\n     * With line type charts with a single tracker, get the point closest to the\n     * mouse. Run Point.onMouseOver and display tooltip for the point or points.\n     *\n     * @private\n     * @function Highcharts.Pointer#runPointActions\n     *\n     * @emits Highcharts.Point#event:mouseOut\n     * @emits Highcharts.Point#event:mouseOver\n     */\n    Pointer.prototype.runPointActions = function (e, p, force) {\n        var pointer = this, chart = pointer.chart, series = chart.series, tooltip = (chart.tooltip && chart.tooltip.options.enabled ?\n            chart.tooltip :\n            void 0), shared = (tooltip ?\n            tooltip.shared :\n            false);\n        var hoverPoint = p || chart.hoverPoint, hoverSeries = hoverPoint && hoverPoint.series || chart.hoverSeries;\n        var // onMouseOver or already hovering a series with directTouch\n        isDirectTouch = (!e || e.type !== 'touchmove') && (!!p || ((hoverSeries && hoverSeries.directTouch) &&\n            pointer.isDirectTouch)), hoverData = this.getHoverData(hoverPoint, hoverSeries, series, isDirectTouch, shared, e);\n        // Update variables from hoverData.\n        hoverPoint = hoverData.hoverPoint;\n        hoverSeries = hoverData.hoverSeries;\n        var points = hoverData.hoverPoints, followPointer = hoverSeries &&\n            hoverSeries.tooltipOptions.followPointer &&\n            !hoverSeries.tooltipOptions.split, useSharedTooltip = (shared &&\n            hoverSeries &&\n            !hoverSeries.noSharedTooltip);\n        // Refresh tooltip for kdpoint if new hover point or tooltip was hidden\n        // #3926, #4200\n        if (hoverPoint &&\n            (force ||\n                hoverPoint !== chart.hoverPoint ||\n                (tooltip && tooltip.isHidden))) {\n            (chart.hoverPoints || []).forEach(function (p) {\n                if (points.indexOf(p) === -1) {\n                    p.setState();\n                }\n            });\n            // Set normal state to previous series\n            if (chart.hoverSeries !== hoverSeries) {\n                hoverSeries.onMouseOver();\n            }\n            pointer.applyInactiveState(points);\n            // Do mouseover on all points (#3919, #3985, #4410, #5622)\n            (points || []).forEach(function (p) {\n                p.setState('hover');\n            });\n            // If tracking is on series in stead of on each point,\n            // fire mouseOver on hover point. // #4448\n            if (chart.hoverPoint) {\n                chart.hoverPoint.firePointEvent('mouseOut');\n            }\n            // Hover point may have been destroyed in the event handlers (#7127)\n            if (!hoverPoint.series) {\n                return;\n            }\n            /**\n             * Contains all hovered points.\n             *\n             * @name Highcharts.Chart#hoverPoints\n             * @type {Array<Highcharts.Point>|null}\n             */\n            chart.hoverPoints = points;\n            /**\n             * Contains the original hovered point.\n             *\n             * @name Highcharts.Chart#hoverPoint\n             * @type {Highcharts.Point|null}\n             */\n            chart.hoverPoint = hoverPoint;\n            /**\n             * Hover state should not be lost when axis is updated (#12569)\n             * Axis.update runs pointer.reset which uses chart.hoverPoint.state\n             * to apply state which does not exist in hoverPoint yet.\n             * The mouseOver event should be triggered when hoverPoint\n             * is correct.\n             */\n            hoverPoint.firePointEvent('mouseOver', void 0, function () {\n                // Draw tooltip if necessary\n                if (tooltip && hoverPoint) {\n                    tooltip.refresh(useSharedTooltip ? points : hoverPoint, e);\n                }\n            });\n            // Update positions (regardless of kdpoint or hoverPoint)\n        }\n        else if (followPointer && tooltip && !tooltip.isHidden) {\n            var anchor = tooltip.getAnchor([{}], e);\n            if (chart.isInsidePlot(anchor[0], anchor[1], {\n                visiblePlotOnly: true\n            })) {\n                tooltip.updatePosition({ plotX: anchor[0], plotY: anchor[1] });\n            }\n        }\n        // Start the event listener to pick up the tooltip and crosshairs\n        if (!pointer.unDocMouseMove) {\n            pointer.unDocMouseMove = addEvent(chart.container.ownerDocument, 'mousemove', function (e) {\n                var chart = charts[Pointer.hoverChartIndex];\n                if (chart) {\n                    chart.pointer.onDocumentMouseMove(e);\n                }\n            });\n            pointer.eventsToUnbind.push(pointer.unDocMouseMove);\n        }\n        // Issues related to crosshair #4927, #5269 #5066, #5658\n        chart.axes.forEach(function drawAxisCrosshair(axis) {\n            var snap = pick((axis.crosshair || {}).snap, true);\n            var point;\n            if (snap) {\n                point = chart.hoverPoint; // #13002\n                if (!point || point.series[axis.coll] !== axis) {\n                    point = find(points, function (p) {\n                        return p.series && p.series[axis.coll] === axis;\n                    });\n                }\n            }\n            // Axis has snapping crosshairs, and one of the hover points belongs\n            // to axis. Always call drawCrosshair when it is not snap.\n            if (point || !snap) {\n                axis.drawCrosshair(e, point);\n                // Axis has snapping crosshairs, but no hover point belongs to axis\n            }\n            else {\n                axis.hideCrosshair();\n            }\n        });\n    };\n    /**\n     * Scale series groups to a certain scale and translation.\n     * @private\n     * @function Highcharts.Pointer#scaleGroups\n     */\n    Pointer.prototype.scaleGroups = function (attribs, clip) {\n        var chart = this.chart;\n        // Scale each series\n        chart.series.forEach(function (series) {\n            var seriesAttribs = attribs || series.getPlotBox(); // #1701\n            if (series.group &&\n                ((series.xAxis && series.xAxis.zoomEnabled) ||\n                    chart.mapView)) {\n                series.group.attr(seriesAttribs);\n                if (series.markerGroup) {\n                    series.markerGroup.attr(seriesAttribs);\n                    series.markerGroup.clip(clip ? chart.clipRect : null);\n                }\n                if (series.dataLabelsGroup) {\n                    series.dataLabelsGroup.attr(seriesAttribs);\n                }\n            }\n        });\n        // Clip\n        chart.clipRect.attr(clip || chart.clipBox);\n    };\n    /**\n     * Set the JS DOM events on the container and document. This method should\n     * contain a one-to-one assignment between methods and their handlers. Any\n     * advanced logic should be moved to the handler reflecting the event's\n     * name.\n     * @private\n     * @function Highcharts.Pointer#setDOMEvents\n     */\n    Pointer.prototype.setDOMEvents = function () {\n        var _this = this;\n        var container = this.chart.container, ownerDoc = container.ownerDocument;\n        container.onmousedown = this.onContainerMouseDown.bind(this);\n        container.onmousemove = this.onContainerMouseMove.bind(this);\n        container.onclick = this.onContainerClick.bind(this);\n        this.eventsToUnbind.push(addEvent(container, 'mouseenter', this.onContainerMouseEnter.bind(this)));\n        this.eventsToUnbind.push(addEvent(container, 'mouseleave', this.onContainerMouseLeave.bind(this)));\n        if (!Pointer.unbindDocumentMouseUp) {\n            Pointer.unbindDocumentMouseUp = addEvent(ownerDoc, 'mouseup', this.onDocumentMouseUp.bind(this));\n        }\n        // In case we are dealing with overflow, reset the chart position when\n        // scrolling parent elements\n        var parent = this.chart.renderTo.parentElement;\n        while (parent && parent.tagName !== 'BODY') {\n            this.eventsToUnbind.push(addEvent(parent, 'scroll', function () {\n                delete _this.chartPosition;\n            }));\n            parent = parent.parentElement;\n        }\n        if (H.hasTouch) {\n            this.eventsToUnbind.push(addEvent(container, 'touchstart', this.onContainerTouchStart.bind(this), { passive: false }));\n            this.eventsToUnbind.push(addEvent(container, 'touchmove', this.onContainerTouchMove.bind(this), { passive: false }));\n            if (!Pointer.unbindDocumentTouchEnd) {\n                Pointer.unbindDocumentTouchEnd = addEvent(ownerDoc, 'touchend', this.onDocumentTouchEnd.bind(this), { passive: false });\n            }\n        }\n    };\n    /**\n     * Sets the index of the hovered chart and leaves the previous hovered\n     * chart, to reset states like tooltip.\n     * @private\n     * @function Highcharts.Pointer#setHoverChartIndex\n     */\n    Pointer.prototype.setHoverChartIndex = function () {\n        var chart = this.chart;\n        var hoverChart = H.charts[pick(Pointer.hoverChartIndex, -1)];\n        if (hoverChart &&\n            hoverChart !== chart) {\n            hoverChart.pointer.onContainerMouseLeave({ relatedTarget: chart.container });\n        }\n        if (!hoverChart ||\n            !hoverChart.mouseIsDown) {\n            Pointer.hoverChartIndex = chart.index;\n        }\n    };\n    /**\n     * General touch handler shared by touchstart and touchmove.\n     * @private\n     * @function Highcharts.Pointer#touch\n     */\n    Pointer.prototype.touch = function (e, start) {\n        var chart = this.chart;\n        var hasMoved, pinchDown, isInside;\n        this.setHoverChartIndex();\n        if (e.touches.length === 1) {\n            e = this.normalize(e);\n            isInside = chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop, {\n                visiblePlotOnly: true\n            });\n            if (isInside && !chart.openMenu) {\n                // Run mouse events and display tooltip etc\n                if (start) {\n                    this.runPointActions(e);\n                }\n                // Android fires touchmove events after the touchstart even if\n                // the finger hasn't moved, or moved only a pixel or two. In iOS\n                // however, the touchmove doesn't fire unless the finger moves\n                // more than ~4px. So we emulate this behaviour in Android by\n                // checking how much it moved, and cancelling on small\n                // distances. #3450.\n                if (e.type === 'touchmove') {\n                    pinchDown = this.pinchDown;\n                    hasMoved = pinchDown[0] ? Math.sqrt(// #5266\n                    Math.pow(pinchDown[0].chartX - e.chartX, 2) +\n                        Math.pow(pinchDown[0].chartY - e.chartY, 2)) >= 4 : false;\n                }\n                if (pick(hasMoved, true)) {\n                    this.pinch(e);\n                }\n            }\n            else if (start) {\n                // Hide the tooltip on touching outside the plot area (#1203)\n                this.reset();\n            }\n        }\n        else if (e.touches.length === 2) {\n            this.pinch(e);\n        }\n    };\n    /**\n     * Returns true if the chart is set up for zooming by single touch and the\n     * event is capable\n     * @private\n     * @function Highcharts.Pointer#touchSelect\n     */\n    Pointer.prototype.touchSelect = function (e) {\n        return Boolean(this.chart.options.chart.zooming.singleTouch &&\n            e.touches &&\n            e.touches.length === 1);\n    };\n    /**\n     * Resolve the zoomType option, this is reset on all touch start and mouse\n     * down events.\n     * @private\n     * @function Highcharts.Pointer#zoomOption\n     */\n    Pointer.prototype.zoomOption = function (e) {\n        var chart = this.chart, options = chart.options.chart, inverted = chart.inverted;\n        var zoomType = options.zooming.type || '', zoomX, zoomY;\n        // Look for the pinchType option\n        if (/touch/.test(e.type)) {\n            zoomType = pick(options.zooming.pinchType, zoomType);\n        }\n        this.zoomX = zoomX = /x/.test(zoomType);\n        this.zoomY = zoomY = /y/.test(zoomType);\n        this.zoomHor = (zoomX && !inverted) || (zoomY && inverted);\n        this.zoomVert = (zoomY && !inverted) || (zoomX && inverted);\n        this.hasZoom = zoomX || zoomY;\n    };\n    return Pointer;\n}());\n/* *\n *\n *  Default Export\n *\n * */\nexport default Pointer;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Chart position and scale.\n *\n * @interface Highcharts.ChartPositionObject\n */ /**\n* @name Highcharts.ChartPositionObject#left\n* @type {number}\n*/ /**\n* @name Highcharts.ChartPositionObject#scaleX\n* @type {number}\n*/ /**\n* @name Highcharts.ChartPositionObject#scaleY\n* @type {number}\n*/ /**\n* @name Highcharts.ChartPositionObject#top\n* @type {number}\n*/\n/**\n * One position in relation to an axis.\n *\n * @interface Highcharts.PointerAxisCoordinateObject\n */ /**\n* Related axis.\n*\n* @name Highcharts.PointerAxisCoordinateObject#axis\n* @type {Highcharts.Axis}\n*/ /**\n* Axis value.\n*\n* @name Highcharts.PointerAxisCoordinateObject#value\n* @type {number}\n*/\n/**\n * Positions in terms of axis values.\n *\n * @interface Highcharts.PointerAxisCoordinatesObject\n */ /**\n* Positions on the x-axis.\n* @name Highcharts.PointerAxisCoordinatesObject#xAxis\n* @type {Array<Highcharts.PointerAxisCoordinateObject>}\n*/ /**\n* Positions on the y-axis.\n* @name Highcharts.PointerAxisCoordinatesObject#yAxis\n* @type {Array<Highcharts.PointerAxisCoordinateObject>}\n*/\n/**\n * Pointer coordinates.\n *\n * @interface Highcharts.PointerCoordinatesObject\n */ /**\n* @name Highcharts.PointerCoordinatesObject#chartX\n* @type {number}\n*/ /**\n* @name Highcharts.PointerCoordinatesObject#chartY\n* @type {number}\n*/\n/**\n * A native browser mouse or touch event, extended with position information\n * relative to the {@link Chart.container}.\n *\n * @interface Highcharts.PointerEventObject\n * @extends global.PointerEvent\n */ /**\n* The X coordinate of the pointer interaction relative to the chart.\n*\n* @name Highcharts.PointerEventObject#chartX\n* @type {number}\n*/ /**\n* The Y coordinate of the pointer interaction relative to the chart.\n*\n* @name Highcharts.PointerEventObject#chartY\n* @type {number}\n*/\n/**\n * Axis-specific data of a selection.\n *\n * @interface Highcharts.SelectDataObject\n */ /**\n* The selected Axis.\n* @name Highcharts.SelectDataObject#axis\n* @type {Highcharts.Axis}\n*/ /**\n* The maximum axis value, either automatic or set manually.\n* @name Highcharts.SelectDataObject#max\n* @type {number}\n*/ /**\n* The minimum axis value, either automatic or set manually.\n* @name Highcharts.SelectDataObject#min\n* @type {number}\n*/\n/**\n * Object for select events.\n * The primary axes are `xAxis[0]` and `yAxis[0]`. Remember the unit of a\n * datetime axis is milliseconds since 1970-01-01 00:00:00.\n *\n * @interface Highcharts.SelectEventObject\n */ /**\n* The related browser event.\n* @name Highcharts.SelectEventObject#originalEvent\n* @type {global.Event}\n*/ /**\n* Indicates a reset event to restore default state.\n* @name Highcharts.SelectEventObject#resetSelection\n* @type {boolean|undefined}\n*/ /**\n* Arrays containing the axes of each dimension and each axis' min and max\n* values.\n* @name Highcharts.SelectEventObject#xAxis\n* @type {Array<Highcharts.SelectDataObject>}\n*/ /**\n* Arrays containing the axes of each dimension and each axis' min and max\n* values.\n* @name Highcharts.SelectEventObject#yAxis\n* @type {Array<Highcharts.SelectDataObject>}\n*/\n''; // keeps doclets above in JS file\n"],"x_google_ignoreList":[0,1,2,3]}