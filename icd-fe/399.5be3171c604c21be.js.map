{"version":3,"file":"399.5be3171c604c21be.js","mappings":"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","names":["exporting","csv","annotations","itemDelimiter","join","columnHeaderFormatter","dateFormat","decimalPoint","lineDelimiter","showTable","useMultiLevelHeaders","useRowspanHeaders","lang","downloadCSV","downloadXLS","exportData","annotationHeader","categoryHeader","categoryDatetimeHeader","viewData","hideData","isSafari","Highcharts","win","doc","document","domurl","URL","webkitURL","dataURLtoBlob","dataURL","parts","replace","match","length","atob","ArrayBuffer","Uint8Array","Blob","createObjectURL","binStr","buf","binary","i","charCodeAt","blob","type","downloadURL","filename","nav","navigator","a","createElement","String","msSaveOrOpenBlob","concat","isOldEdgeBrowser","test","userAgent","indexOf","Error","download","href","body","appendChild","click","removeChild","windowRef","open","location","__spreadArray","to","from","pack","arguments","ar","l","Array","prototype","slice","call","H","getOptions","D","setOptions","DownloadURL","SeriesClass","SeriesRegistry","_a","AreaRangeSeries","arearange","GanttSeries","gantt","MapSeries","map","MapBubbleSeries","mapbubble","TreemapSeries","treemap","addEvent","U","defined","extend","find","fireEvent","isNumber","pick","composedClasses","chartDownloadCSV","this","getCSV","getBlobFromContent","encodeURIComponent","getFilename","chartDownloadXLS","template","getTable","btoa","unescape","chartGetCSV","useLocalDecimalPoint","rows","getDataRows","csvOptions","options","toLocaleString","forEach","row","val","j","toString","chartGetDataRows","multiLevelHeaders","xAxis","dataRows","columnTitleObj","x","xTitle","xAxisIndex","column","hasParallelCoords","hasParallelCoordinates","time","xAxes","rowArr","topLevelColumnTitles","columnTitles","exportDataOptions","item","key","keyLength","s","columnTitle","name","topLevelColumnTitle","title","text","dateTime","getCategoryAndDateTimeMap","series","pointArrayMap","pIdx","categoryMap","dateTimeValueAxisMap","prop","axisName","keyToAxis","axis","chart","categories","xAxisIndices","mockSeries","keys","data","filter","d","y","p","unshift","getPointArray","valueCount","xTaken","requireSorting","categoryAndDatetimeMap","includeInDataExport","isInternal","visible","index","push","autoIncrement","mockPoint","pointClass","applyOptions","apply","seriesIndices","includes","existingKeys","Object","propertyName","exportKey","hasNames","xValues","hasOwnProperty","sort","b","splice","category","Date","getTime","names","chartGetTable","serialize","node","tagName","textContent","attributes","html","value","children","child","tree","getTableAST","chartGetTableAST","rowLength","treeChildren","topHeaders","shift","subHeaders","getCellHTMLFromValue","classes","className","class","tableCaption","len","topheaders","subheaders","cur","rowspan","theadChildren","curColspan","row1","row2","isRowEqual","trChildren","scope","colspan","cell","valign","getTableHeaderHTML","Math","max","trs","e","id","chartHideData","toggleDataTable","chartToggleDataTable","show","createContainer","isDataTableVisible","dataTableDiv","renderTo","parentNode","insertBefore","nextSibling","style","oldDisplay","display","innerHTML","AST","addToDOM","element","wasHidden","exportDivElements","menuItems","buttons","contextButton","menuItemDefinitions","exportDivElement","chartViewData","content","webKit","MSBlobBuilder","append","getBlob","onChartAfterViewData","getCellValue","tr","allowTableSorting","querySelector","childNodes","th","table","closest","addEventListener","querySelectorAll","headers","ascending","v1","v2","isNaN","localeCompare","comparer","ascendingOrderInTable","classList","contains","remove","add","onChartRenderer","forExport","compose","ChartClass","chartProto","exportingOptions","textKey","onclick","ExportDataDefaults","low","high","start","end","ExportData","Chart"],"sourceRoot":"webpack:///","sources":["./node_modules/highcharts/es-modules/Extensions/ExportData/ExportDataDefaults.js","./node_modules/highcharts/es-modules/Extensions/DownloadURL.js","./node_modules/highcharts/es-modules/Extensions/ExportData/ExportData.js","./node_modules/highcharts/es-modules/masters/modules/export-data.src.js"],"sourcesContent":["/* *\n *\n *  Experimental data export module for Highcharts\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n/* *\n *\n *  Constants\n *\n * */\n/**\n * @optionparent exporting\n * @private\n */\nvar exporting = {\n    /**\n     * Caption for the data table. Same as chart title by default. Set to\n     * `false` to disable.\n     *\n     * @sample highcharts/export-data/multilevel-table\n     *         Multiple table headers\n     *\n     * @type      {boolean|string}\n     * @since     6.0.4\n     * @requires  modules/export-data\n     * @apioption exporting.tableCaption\n     */\n    /**\n     * Options for exporting data to CSV or ExCel, or displaying the data\n     * in a HTML table or a JavaScript structure.\n     *\n     * This module adds data export options to the export menu and provides\n     * functions like `Chart.getCSV`, `Chart.getTable`, `Chart.getDataRows`\n     * and `Chart.viewData`.\n     *\n     * The XLS converter is limited and only creates a HTML string that is\n     * passed for download, which works but creates a warning before\n     * opening. The workaround for this is to use a third party XLSX\n     * converter, as demonstrated in the sample below.\n     *\n     * @sample  highcharts/export-data/categorized/ Categorized data\n     * @sample  highcharts/export-data/stock-timeaxis/ Highcharts Stock time axis\n     * @sample  highcharts/export-data/xlsx/\n     *          Using a third party XLSX converter\n     *\n     * @since    6.0.0\n     * @requires modules/export-data\n     */\n    csv: {\n        /**\n         *\n         * Options for annotations in the export-data table.\n         *\n         * @since 8.2.0\n         * @requires modules/export-data\n         * @requires modules/annotations\n         *\n         *\n         */\n        annotations: {\n            /**\n            * The way to mark the separator for annotations\n            * combined in one export-data table cell.\n            *\n            * @since 8.2.0\n            * @requires modules/annotations\n            */\n            itemDelimiter: '; ',\n            /**\n            * When several labels are assigned to a specific point,\n            * they will be displayed in one field in the table.\n            *\n            * @sample highcharts/export-data/join-annotations/\n            *         Concatenate point annotations with itemDelimiter set.\n            *\n            * @since 8.2.0\n            * @requires modules/annotations\n            */\n            join: false\n        },\n        /**\n         * Formatter callback for the column headers. Parameters are:\n         * - `item` - The series or axis object)\n         * - `key` -  The point key, for example y or z\n         * - `keyLength` - The amount of value keys for this item, for\n         *   example a range series has the keys `low` and `high` so the\n         *   key length is 2.\n         *\n         * If [useMultiLevelHeaders](#exporting.useMultiLevelHeaders) is\n         * true, columnHeaderFormatter by default returns an object with\n         * columnTitle and topLevelColumnTitle for each key. Columns with\n         * the same topLevelColumnTitle have their titles merged into a\n         * single cell with colspan for table/Excel export.\n         *\n         * If `useMultiLevelHeaders` is false, or for CSV export, it returns\n         * the series name, followed by the key if there is more than one\n         * key.\n         *\n         * For the axis it returns the axis title or \"Category\" or\n         * \"DateTime\" by default.\n         *\n         * Return `false` to use Highcharts' proposed header.\n         *\n         * @sample highcharts/export-data/multilevel-table\n         *         Multiple table headers\n         *\n         * @type {Function|null}\n         */\n        columnHeaderFormatter: null,\n        /**\n         * Which date format to use for exported dates on a datetime X axis.\n         * See `Highcharts.dateFormat`.\n         */\n        dateFormat: '%Y-%m-%d %H:%M:%S',\n        /**\n         * Which decimal point to use for exported CSV. Defaults to the same\n         * as the browser locale, typically `.` (English) or `,` (German,\n         * French etc).\n         *\n         * @type  {string|null}\n         * @since 6.0.4\n         */\n        decimalPoint: null,\n        /**\n         * The item delimiter in the exported data. Use `;` for direct\n         * exporting to Excel. Defaults to a best guess based on the browser\n         * locale. If the locale _decimal point_ is `,`, the `itemDelimiter`\n         * defaults to `;`, otherwise the `itemDelimiter` defaults to `,`.\n         *\n         * @type {string|null}\n         */\n        itemDelimiter: null,\n        /**\n         * The line delimiter in the exported data, defaults to a newline.\n         */\n        lineDelimiter: '\\n'\n    },\n    /**\n     * Show a HTML table below the chart with the chart's current data.\n     *\n     * @sample highcharts/export-data/showtable/\n     *         Show the table\n     * @sample highcharts/studies/exporting-table-html\n     *         Experiment with putting the table inside the subtitle to\n     *         allow exporting it.\n     *\n     * @since    6.0.0\n     * @requires modules/export-data\n     */\n    showTable: false,\n    /**\n     * Use multi level headers in data table. If [csv.columnHeaderFormatter\n     * ](#exporting.csv.columnHeaderFormatter) is defined, it has to return\n     * objects in order for multi level headers to work.\n     *\n     * @sample highcharts/export-data/multilevel-table\n     *         Multiple table headers\n     *\n     * @since    6.0.4\n     * @requires modules/export-data\n     */\n    useMultiLevelHeaders: true,\n    /**\n     * If using multi level table headers, use rowspans for headers that\n     * have only one level.\n     *\n     * @sample highcharts/export-data/multilevel-table\n     *         Multiple table headers\n     *\n     * @since    6.0.4\n     * @requires modules/export-data\n     */\n    useRowspanHeaders: true\n};\n/**\n * @optionparent lang\n * @private\n */\nvar lang = {\n    /**\n     * The text for the menu item.\n     *\n     * @since    6.0.0\n     * @requires modules/export-data\n     */\n    downloadCSV: 'Download CSV',\n    /**\n     * The text for the menu item.\n     *\n     * @since    6.0.0\n     * @requires modules/export-data\n     */\n    downloadXLS: 'Download XLS',\n    /**\n     * The text for exported table.\n     *\n     * @since 8.1.0\n     * @requires modules/export-data\n     */\n    exportData: {\n        /**\n         * The annotation column title.\n         */\n        annotationHeader: 'Annotations',\n        /**\n         * The category column title.\n         */\n        categoryHeader: 'Category',\n        /**\n         * The category column title when axis type set to \"datetime\".\n         */\n        categoryDatetimeHeader: 'DateTime'\n    },\n    /**\n     * The text for the menu item.\n     *\n     * @since    6.0.0\n     * @requires modules/export-data\n     */\n    viewData: 'View data table',\n    /**\n     * The text for the menu item.\n     *\n     * @since 8.2.0\n     * @requires modules/export-data\n     */\n    hideData: 'Hide data table'\n};\n/* *\n *\n *  Default Export\n *\n * */\nvar ExportDataDefaults = {\n    exporting: exporting,\n    lang: lang\n};\nexport default ExportDataDefaults;\n/* *\n *\n *  API Options\n *\n * */\n/**\n * Callback that fires while exporting data. This allows the modification of\n * data rows before processed into the final format.\n *\n * @type      {Highcharts.ExportDataCallbackFunction}\n * @context   Highcharts.Chart\n * @requires  modules/export-data\n * @apioption chart.events.exportData\n */\n/**\n * When set to `false` will prevent the series data from being included in\n * any form of data export.\n *\n * Since version 6.0.0 until 7.1.0 the option was existing undocumented\n * as `includeInCSVExport`.\n *\n * @type      {boolean}\n * @since     7.1.0\n * @requires  modules/export-data\n * @apioption plotOptions.series.includeInDataExport\n */\n(''); // keep doclets above in JS file\n","/* *\n *\n *  (c) 2015-2021 Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Mixin for downloading content in the browser\n *\n * */\n'use strict';\nimport Highcharts from '../Core/Globals.js';\nvar isSafari = Highcharts.isSafari;\nvar win = Highcharts.win, doc = win.document, domurl = win.URL || win.webkitURL || win;\n/**\n * Convert base64 dataURL to Blob if supported, otherwise returns undefined.\n * @private\n * @function Highcharts.dataURLtoBlob\n * @param {string} dataURL\n *        URL to convert\n * @return {string|undefined}\n *         Blob\n */\nvar dataURLtoBlob = Highcharts.dataURLtoBlob = function (dataURL) {\n    var parts = dataURL\n        .replace(/filename=.*;/, '')\n        .match(/data:([^;]*)(;base64)?,([0-9A-Za-z+/]+)/);\n    if (parts &&\n        parts.length > 3 &&\n        (win.atob) &&\n        win.ArrayBuffer &&\n        win.Uint8Array &&\n        win.Blob &&\n        (domurl.createObjectURL)) {\n        // Try to convert data URL to Blob\n        var binStr = win.atob(parts[3]), buf = new win.ArrayBuffer(binStr.length), binary = new win.Uint8Array(buf);\n        for (var i = 0; i < binary.length; ++i) {\n            binary[i] = binStr.charCodeAt(i);\n        }\n        var blob = new win.Blob([binary], { 'type': parts[1] });\n        return domurl.createObjectURL(blob);\n    }\n};\n/**\n * Download a data URL in the browser. Can also take a blob as first param.\n *\n * @private\n * @function Highcharts.downloadURL\n * @param {string|global.URL} dataURL\n *        The dataURL/Blob to download\n * @param {string} filename\n *        The name of the resulting file (w/extension)\n * @return {void}\n */\nvar downloadURL = Highcharts.downloadURL = function (dataURL, filename) {\n    var nav = win.navigator, a = doc.createElement('a');\n    // IE specific blob implementation\n    // Don't use for normal dataURLs\n    if (typeof dataURL !== 'string' &&\n        !(dataURL instanceof String) &&\n        nav.msSaveOrOpenBlob) {\n        nav.msSaveOrOpenBlob(dataURL, filename);\n        return;\n    }\n    dataURL = \"\".concat(dataURL);\n    // Some browsers have limitations for data URL lengths. Try to convert to\n    // Blob or fall back. Edge always needs that blob.\n    var isOldEdgeBrowser = /Edge\\/\\d+/.test(nav.userAgent);\n    // Safari on iOS needs Blob in order to download PDF\n    var safariBlob = (isSafari &&\n        typeof dataURL === 'string' &&\n        dataURL.indexOf('data:application/pdf') === 0);\n    if (safariBlob || isOldEdgeBrowser || dataURL.length > 2000000) {\n        dataURL = dataURLtoBlob(dataURL) || '';\n        if (!dataURL) {\n            throw new Error('Failed to convert to blob');\n        }\n    }\n    // Try HTML5 download attr if supported\n    if (typeof a.download !== 'undefined') {\n        a.href = dataURL;\n        a.download = filename; // HTML5 download attribute\n        doc.body.appendChild(a);\n        a.click();\n        doc.body.removeChild(a);\n    }\n    else {\n        // No download attr, just opening data URI\n        try {\n            var windowRef = win.open(dataURL, 'chart');\n            if (typeof windowRef === 'undefined' || windowRef === null) {\n                throw new Error('Failed to open window');\n            }\n        }\n        catch (e) {\n            // window.open failed, trying location.href\n            win.location.href = dataURL;\n        }\n    }\n};\nvar DownloadURL = {\n    dataURLtoBlob: dataURLtoBlob,\n    downloadURL: downloadURL\n};\nexport default DownloadURL;\n","/* *\n *\n *  Experimental data export module for Highcharts\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n// @todo\n// - Set up systematic tests for all series types, paired with tests of the data\n//   module importing the same data.\n'use strict';\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport AST from '../../Core/Renderer/HTML/AST.js';\nimport ExportDataDefaults from './ExportDataDefaults.js';\nimport H from '../../Core/Globals.js';\nvar doc = H.doc, win = H.win;\nimport D from '../../Core/Defaults.js';\nvar getOptions = D.getOptions, setOptions = D.setOptions;\nimport DownloadURL from '../DownloadURL.js';\nvar downloadURL = DownloadURL.downloadURL;\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nvar SeriesClass = SeriesRegistry.series, _a = SeriesRegistry.seriesTypes, AreaRangeSeries = _a.arearange, GanttSeries = _a.gantt, MapSeries = _a.map, MapBubbleSeries = _a.mapbubble, TreemapSeries = _a.treemap;\nimport U from '../../Core/Utilities.js';\nvar addEvent = U.addEvent, defined = U.defined, extend = U.extend, find = U.find, fireEvent = U.fireEvent, isNumber = U.isNumber, pick = U.pick;\n/* *\n *\n *  Constants\n *\n * */\nvar composedClasses = [];\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Generates a data URL of CSV for local download in the browser. This is the\n * default action for a click on the 'Download CSV' button.\n *\n * See {@link Highcharts.Chart#getCSV} to get the CSV data itself.\n *\n * @function Highcharts.Chart#downloadCSV\n *\n * @requires modules/exporting\n */\nfunction chartDownloadCSV() {\n    var csv = this.getCSV(true);\n    downloadURL(getBlobFromContent(csv, 'text/csv') ||\n        'data:text/csv,\\uFEFF' + encodeURIComponent(csv), this.getFilename() + '.csv');\n}\n/**\n * Generates a data URL of an XLS document for local download in the browser.\n * This is the default action for a click on the 'Download XLS' button.\n *\n * See {@link Highcharts.Chart#getTable} to get the table data itself.\n *\n * @function Highcharts.Chart#downloadXLS\n *\n * @requires modules/exporting\n */\nfunction chartDownloadXLS() {\n    var uri = 'data:application/vnd.ms-excel;base64,', template = '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" ' +\n        'xmlns:x=\"urn:schemas-microsoft-com:office:excel\" ' +\n        'xmlns=\"http://www.w3.org/TR/REC-html40\">' +\n        '<head><!--[if gte mso 9]><xml><x:ExcelWorkbook>' +\n        '<x:ExcelWorksheets><x:ExcelWorksheet>' +\n        '<x:Name>Ark1</x:Name>' +\n        '<x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions>' +\n        '</x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook>' +\n        '</xml><![endif]-->' +\n        '<style>td{border:none;font-family: Calibri, sans-serif;} ' +\n        '.number{mso-number-format:\"0.00\";} ' +\n        '.text{ mso-number-format:\"\\@\";}</style>' +\n        '<meta name=ProgId content=Excel.Sheet>' +\n        '<meta charset=UTF-8>' +\n        '</head><body>' +\n        this.getTable(true) +\n        '</body></html>', base64 = function (s) {\n        return win.btoa(unescape(encodeURIComponent(s))); // #50\n    };\n    downloadURL(getBlobFromContent(template, 'application/vnd.ms-excel') ||\n        uri + base64(template), this.getFilename() + '.xls');\n}\n/**\n * Export-data module required. Returns the current chart data as a CSV string.\n *\n * @function Highcharts.Chart#getCSV\n *\n * @param {boolean} [useLocalDecimalPoint]\n *        Whether to use the local decimal point as detected from the browser.\n *        This makes it easier to export data to Excel in the same locale as the\n *        user is.\n *\n * @return {string}\n *         CSV representation of the data\n */\nfunction chartGetCSV(useLocalDecimalPoint) {\n    var csv = '';\n    var rows = this.getDataRows(), csvOptions = this.options.exporting.csv, decimalPoint = pick(csvOptions.decimalPoint, csvOptions.itemDelimiter !== ',' && useLocalDecimalPoint ?\n        (1.1).toLocaleString()[1] :\n        '.'), \n    // use ';' for direct to Excel\n    itemDelimiter = pick(csvOptions.itemDelimiter, decimalPoint === ',' ? ';' : ','), \n    // '\\n' isn't working with the js csv data extraction\n    lineDelimiter = csvOptions.lineDelimiter;\n    // Transform the rows to CSV\n    rows.forEach(function (row, i) {\n        var val = '', j = row.length;\n        while (j--) {\n            val = row[j];\n            if (typeof val === 'string') {\n                val = '\"' + val + '\"';\n            }\n            if (typeof val === 'number') {\n                if (decimalPoint !== '.') {\n                    val = val.toString().replace('.', decimalPoint);\n                }\n            }\n            row[j] = val;\n        }\n        // The first row is the header - it defines the number of columns.\n        // Empty columns between not-empty cells are covered in the getDataRows\n        // method.\n        // Now add empty values only to the end of the row so all rows have\n        // the same number of columns, #17186\n        row.length = rows.length ? rows[0].length : 0;\n        // Add the values\n        csv += row.join(itemDelimiter);\n        // Add the line delimiter\n        if (i < rows.length - 1) {\n            csv += lineDelimiter;\n        }\n    });\n    return csv;\n}\n/**\n * Export-data module required. Returns a two-dimensional array containing the\n * current chart data.\n *\n * @function Highcharts.Chart#getDataRows\n *\n * @param {boolean} [multiLevelHeaders]\n *        Use multilevel headers for the rows by default. Adds an extra row with\n *        top level headers. If a custom columnHeaderFormatter is defined, this\n *        can override the behavior.\n *\n * @return {Array<Array<(number|string)>>}\n *         The current chart data\n *\n * @emits Highcharts.Chart#event:exportData\n */\nfunction chartGetDataRows(multiLevelHeaders) {\n    var hasParallelCoords = this.hasParallelCoordinates, time = this.time, csvOptions = ((this.options.exporting && this.options.exporting.csv) || {}), xAxes = this.xAxis, rows = {}, rowArr = [], topLevelColumnTitles = [], columnTitles = [], langOptions = this.options.lang, exportDataOptions = langOptions.exportData, categoryHeader = exportDataOptions.categoryHeader, categoryDatetimeHeader = exportDataOptions.categoryDatetimeHeader, \n    // Options\n    columnHeaderFormatter = function (item, key, keyLength) {\n        if (csvOptions.columnHeaderFormatter) {\n            var s = csvOptions.columnHeaderFormatter(item, key, keyLength);\n            if (s !== false) {\n                return s;\n            }\n        }\n        if (!item) {\n            return categoryHeader;\n        }\n        if (!(item instanceof SeriesClass)) {\n            return (item.options.title && item.options.title.text) ||\n                (item.dateTime ? categoryDatetimeHeader : categoryHeader);\n        }\n        if (multiLevelHeaders) {\n            return {\n                columnTitle: keyLength > 1 ?\n                    key :\n                    item.name,\n                topLevelColumnTitle: item.name\n            };\n        }\n        return item.name + (keyLength > 1 ? ' (' + key + ')' : '');\n    }, \n    // Map the categories for value axes\n    getCategoryAndDateTimeMap = function (series, pointArrayMap, pIdx) {\n        var categoryMap = {}, dateTimeValueAxisMap = {};\n        pointArrayMap.forEach(function (prop) {\n            var axisName = ((series.keyToAxis && series.keyToAxis[prop]) ||\n                prop) + 'Axis', \n            // Points in parallel coordinates refers to all yAxis\n            // not only `series.yAxis`\n            axis = isNumber(pIdx) ?\n                series.chart[axisName][pIdx] :\n                series[axisName];\n            categoryMap[prop] = (axis && axis.categories) || [];\n            dateTimeValueAxisMap[prop] = (axis && axis.dateTime);\n        });\n        return {\n            categoryMap: categoryMap,\n            dateTimeValueAxisMap: dateTimeValueAxisMap\n        };\n    }, \n    // Create point array depends if xAxis is category\n    // or point.name is defined #13293\n    getPointArray = function (series, xAxis) {\n        var namedPoints = series.data.filter(function (d) {\n            return (typeof d.y !== 'undefined') && d.name;\n        });\n        if (namedPoints.length &&\n            xAxis &&\n            !xAxis.categories &&\n            !series.keyToAxis) {\n            if (series.pointArrayMap) {\n                var pointArrayMapCheck = series.pointArrayMap\n                    .filter(function (p) { return p === 'x'; });\n                if (pointArrayMapCheck.length) {\n                    series.pointArrayMap.unshift('x');\n                    return series.pointArrayMap;\n                }\n            }\n            return ['x', 'y'];\n        }\n        return series.pointArrayMap || ['y'];\n    }, xAxisIndices = [];\n    var xAxis, dataRows, columnTitleObj, i = 0, // Loop the series and index values\n    x, xTitle;\n    this.series.forEach(function (series) {\n        var keys = series.options.keys, xAxis = series.xAxis, pointArrayMap = keys || getPointArray(series, xAxis), valueCount = pointArrayMap.length, xTaken = !series.requireSorting && {}, xAxisIndex = xAxes.indexOf(xAxis);\n        var categoryAndDatetimeMap = getCategoryAndDateTimeMap(series, pointArrayMap), mockSeries, j;\n        if (series.options.includeInDataExport !== false &&\n            !series.options.isInternal &&\n            series.visible !== false // #55\n        ) {\n            // Build a lookup for X axis index and the position of the first\n            // series that belongs to that X axis. Includes -1 for non-axis\n            // series types like pies.\n            if (!find(xAxisIndices, function (index) {\n                return index[0] === xAxisIndex;\n            })) {\n                xAxisIndices.push([xAxisIndex, i]);\n            }\n            // Compute the column headers and top level headers, usually the\n            // same as series names\n            j = 0;\n            while (j < valueCount) {\n                columnTitleObj = columnHeaderFormatter(series, pointArrayMap[j], pointArrayMap.length);\n                columnTitles.push(columnTitleObj.columnTitle || columnTitleObj);\n                if (multiLevelHeaders) {\n                    topLevelColumnTitles.push(columnTitleObj.topLevelColumnTitle ||\n                        columnTitleObj);\n                }\n                j++;\n            }\n            mockSeries = {\n                chart: series.chart,\n                autoIncrement: series.autoIncrement,\n                options: series.options,\n                pointArrayMap: series.pointArrayMap,\n                index: series.index\n            };\n            // Export directly from options.data because we need the uncropped\n            // data (#7913), and we need to support Boost (#7026).\n            series.options.data.forEach(function eachData(options, pIdx) {\n                var mockPoint = { series: mockSeries };\n                var key, prop, val;\n                // In parallel coordinates chart, each data point is connected\n                // to a separate yAxis, conform this\n                if (hasParallelCoords) {\n                    categoryAndDatetimeMap = getCategoryAndDateTimeMap(series, pointArrayMap, pIdx);\n                }\n                series.pointClass.prototype.applyOptions.apply(mockPoint, [options]);\n                key = mockPoint.x;\n                if (defined(rows[key]) &&\n                    rows[key].seriesIndices.includes(mockSeries.index)) {\n                    // find keys, which belong to actual series\n                    var keysFromActualSeries = Object.keys(rows).filter(function (i) {\n                        return rows[i].seriesIndices.includes(mockSeries.index) &&\n                            key;\n                    }), \n                    // find all properties, which start with actual key\n                    existingKeys = keysFromActualSeries\n                        .filter(function (propertyName) {\n                        return propertyName.indexOf(String(key)) === 0;\n                    });\n                    key = key.toString() + ',' + existingKeys.length;\n                }\n                var name = series.data[pIdx] && series.data[pIdx].name;\n                j = 0;\n                // Pies, funnels, geo maps etc. use point name in X row\n                if (!xAxis ||\n                    series.exportKey === 'name' ||\n                    (!hasParallelCoords && xAxis && xAxis.hasNames) && name) {\n                    key = name;\n                }\n                if (xTaken) {\n                    if (xTaken[key]) {\n                        key += '|' + pIdx;\n                    }\n                    xTaken[key] = true;\n                }\n                if (!rows[key]) {\n                    // Generate the row\n                    rows[key] = [];\n                    // Contain the X values from one or more X axes\n                    rows[key].xValues = [];\n                }\n                rows[key].x = mockPoint.x;\n                rows[key].name = name;\n                rows[key].xValues[xAxisIndex] = mockPoint.x;\n                if (!defined(rows[key].seriesIndices)) {\n                    rows[key].seriesIndices = [];\n                }\n                rows[key].seriesIndices = __spreadArray(__spreadArray([], rows[key].seriesIndices, true), [\n                    mockSeries.index\n                ], false);\n                while (j < valueCount) {\n                    prop = pointArrayMap[j]; // y, z etc\n                    val = mockPoint[prop];\n                    rows[key][i + j] = pick(\n                    // Y axis category if present\n                    categoryAndDatetimeMap.categoryMap[prop][val], \n                    // datetime yAxis\n                    categoryAndDatetimeMap.dateTimeValueAxisMap[prop] ?\n                        time.dateFormat(csvOptions.dateFormat, val) :\n                        null, \n                    // linear/log yAxis\n                    val);\n                    j++;\n                }\n            });\n            i = i + j;\n        }\n    });\n    // Make a sortable array\n    for (x in rows) {\n        if (Object.hasOwnProperty.call(rows, x)) {\n            rowArr.push(rows[x]);\n        }\n    }\n    var xAxisIndex, column;\n    // Add computed column headers and top level headers to final row set\n    dataRows = multiLevelHeaders ? [topLevelColumnTitles, columnTitles] :\n        [columnTitles];\n    i = xAxisIndices.length;\n    while (i--) { // Start from end to splice in\n        xAxisIndex = xAxisIndices[i][0];\n        column = xAxisIndices[i][1];\n        xAxis = xAxes[xAxisIndex];\n        // Sort it by X values\n        rowArr.sort(function (// eslint-disable-line no-loop-func\n        a, b) {\n            return a.xValues[xAxisIndex] - b.xValues[xAxisIndex];\n        });\n        // Add header row\n        xTitle = columnHeaderFormatter(xAxis);\n        dataRows[0].splice(column, 0, xTitle);\n        if (multiLevelHeaders && dataRows[1]) {\n            // If using multi level headers, we just added top level header.\n            // Also add for sub level\n            dataRows[1].splice(column, 0, xTitle);\n        }\n        // Add the category column\n        rowArr.forEach(function (// eslint-disable-line no-loop-func\n        row) {\n            var category = row.name;\n            if (xAxis && !defined(category)) {\n                if (xAxis.dateTime) {\n                    if (row.x instanceof Date) {\n                        row.x = row.x.getTime();\n                    }\n                    category = time.dateFormat(csvOptions.dateFormat, row.x);\n                }\n                else if (xAxis.categories) {\n                    category = pick(xAxis.names[row.x], xAxis.categories[row.x], row.x);\n                }\n                else {\n                    category = row.x;\n                }\n            }\n            // Add the X/date/category\n            row.splice(column, 0, category);\n        });\n    }\n    dataRows = dataRows.concat(rowArr);\n    fireEvent(this, 'exportData', { dataRows: dataRows });\n    return dataRows;\n}\n/**\n * Export-data module required. Build a HTML table with the chart's current\n * data.\n *\n * @sample highcharts/export-data/viewdata/\n *         View the data from the export menu\n *\n * @function Highcharts.Chart#getTable\n *\n * @param {boolean} [useLocalDecimalPoint]\n *        Whether to use the local decimal point as detected from the browser.\n *        This makes it easier to export data to Excel in the same locale as the\n *        user is.\n *\n * @return {string}\n *         HTML representation of the data.\n *\n * @emits Highcharts.Chart#event:afterGetTable\n */\nfunction chartGetTable(useLocalDecimalPoint) {\n    var serialize = function (node) {\n        if (!node.tagName || node.tagName === '#text') {\n            // Text node\n            return node.textContent || '';\n        }\n        var attributes = node.attributes;\n        var html = \"<\".concat(node.tagName);\n        if (attributes) {\n            Object.keys(attributes)\n                .forEach(function (key) {\n                var value = attributes[key];\n                html += \" \".concat(key, \"=\\\"\").concat(value, \"\\\"\");\n            });\n        }\n        html += '>';\n        html += node.textContent || '';\n        (node.children || []).forEach(function (child) {\n            html += serialize(child);\n        });\n        html += \"</\".concat(node.tagName, \">\");\n        return html;\n    };\n    var tree = this.getTableAST(useLocalDecimalPoint);\n    return serialize(tree);\n}\n/**\n * Get the AST of a HTML table representing the chart data.\n *\n * @private\n *\n * @function Highcharts.Chart#getTableAST\n *\n * @param {boolean} [useLocalDecimalPoint]\n *        Whether to use the local decimal point as detected from the browser.\n *        This makes it easier to export data to Excel in the same locale as the\n *        user is.\n *\n * @return {Highcharts.ASTNode}\n *         The abstract syntax tree\n */\nfunction chartGetTableAST(useLocalDecimalPoint) {\n    var rowLength = 0;\n    var treeChildren = [];\n    var options = this.options, decimalPoint = useLocalDecimalPoint ? (1.1).toLocaleString()[1] : '.', useMultiLevelHeaders = pick(options.exporting.useMultiLevelHeaders, true), rows = this.getDataRows(useMultiLevelHeaders), topHeaders = useMultiLevelHeaders ? rows.shift() : null, subHeaders = rows.shift(), \n    // Compare two rows for equality\n    isRowEqual = function (row1, row2) {\n        var i = row1.length;\n        if (row2.length === i) {\n            while (i--) {\n                if (row1[i] !== row2[i]) {\n                    return false;\n                }\n            }\n        }\n        else {\n            return false;\n        }\n        return true;\n    }, \n    // Get table cell HTML from value\n    getCellHTMLFromValue = function (tagName, classes, attributes, value) {\n        var textContent = pick(value, ''), className = 'highcharts-text' + (classes ? ' ' + classes : '');\n        // Convert to string if number\n        if (typeof textContent === 'number') {\n            textContent = textContent.toString();\n            if (decimalPoint === ',') {\n                textContent = textContent.replace('.', decimalPoint);\n            }\n            className = 'highcharts-number';\n        }\n        else if (!value) {\n            className = 'highcharts-empty';\n        }\n        attributes = extend({ 'class': className }, attributes);\n        return {\n            tagName: tagName,\n            attributes: attributes,\n            textContent: textContent\n        };\n    }, \n    // Get table header markup from row data\n    getTableHeaderHTML = function (topheaders, subheaders, rowLength) {\n        var theadChildren = [];\n        var i = 0, len = rowLength || subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n        // Clean up multiple table headers. Chart.getDataRows() returns two\n        // levels of headers when using multilevel, not merged. We need to\n        // merge identical headers, remove redundant headers, and keep it\n        // all marked up nicely.\n        if (useMultiLevelHeaders &&\n            topheaders &&\n            subheaders &&\n            !isRowEqual(topheaders, subheaders)) {\n            var trChildren = [];\n            for (; i < len; ++i) {\n                cur = topheaders[i];\n                next = topheaders[i + 1];\n                if (cur === next) {\n                    ++curColspan;\n                }\n                else if (curColspan) {\n                    // Ended colspan\n                    // Add cur to HTML with colspan.\n                    trChildren.push(getCellHTMLFromValue('th', 'highcharts-table-topheading', {\n                        scope: 'col',\n                        colspan: curColspan + 1\n                    }, cur));\n                    curColspan = 0;\n                }\n                else {\n                    // Cur is standalone. If it is same as sublevel,\n                    // remove sublevel and add just toplevel.\n                    if (cur === subheaders[i]) {\n                        if (options.exporting.useRowspanHeaders) {\n                            rowspan = 2;\n                            delete subheaders[i];\n                        }\n                        else {\n                            rowspan = 1;\n                            subheaders[i] = '';\n                        }\n                    }\n                    else {\n                        rowspan = 1;\n                    }\n                    var cell = getCellHTMLFromValue('th', 'highcharts-table-topheading', { scope: 'col' }, cur);\n                    if (rowspan > 1 && cell.attributes) {\n                        cell.attributes.valign = 'top';\n                        cell.attributes.rowspan = rowspan;\n                    }\n                    trChildren.push(cell);\n                }\n            }\n            theadChildren.push({\n                tagName: 'tr',\n                children: trChildren\n            });\n        }\n        // Add the subheaders (the only headers if not using multilevels)\n        if (subheaders) {\n            var trChildren = [];\n            for (i = 0, len = subheaders.length; i < len; ++i) {\n                if (typeof subheaders[i] !== 'undefined') {\n                    trChildren.push(getCellHTMLFromValue('th', null, { scope: 'col' }, subheaders[i]));\n                }\n            }\n            theadChildren.push({\n                tagName: 'tr',\n                children: trChildren\n            });\n        }\n        return {\n            tagName: 'thead',\n            children: theadChildren\n        };\n    };\n    // Add table caption\n    if (options.exporting.tableCaption !== false) {\n        treeChildren.push({\n            tagName: 'caption',\n            attributes: {\n                'class': 'highcharts-table-caption'\n            },\n            textContent: pick(options.exporting.tableCaption, (options.title.text ?\n                options.title.text :\n                'Chart'))\n        });\n    }\n    // Find longest row\n    for (var i = 0, len = rows.length; i < len; ++i) {\n        if (rows[i].length > rowLength) {\n            rowLength = rows[i].length;\n        }\n    }\n    // Add header\n    treeChildren.push(getTableHeaderHTML(topHeaders, subHeaders, Math.max(rowLength, subHeaders.length)));\n    // Transform the rows to HTML\n    var trs = [];\n    rows.forEach(function (row) {\n        var trChildren = [];\n        for (var j = 0; j < rowLength; j++) {\n            // Make first column a header too. Especially important for\n            // category axes, but also might make sense for datetime? Should\n            // await user feedback on this.\n            trChildren.push(getCellHTMLFromValue(j ? 'td' : 'th', null, j ? {} : { scope: 'row' }, row[j]));\n        }\n        trs.push({\n            tagName: 'tr',\n            children: trChildren\n        });\n    });\n    treeChildren.push({\n        tagName: 'tbody',\n        children: trs\n    });\n    var e = {\n        tree: {\n            tagName: 'table',\n            id: \"highcharts-data-table-\".concat(this.index),\n            children: treeChildren\n        }\n    };\n    fireEvent(this, 'aftergetTableAST', e);\n    return e.tree;\n}\n/**\n * Export-data module required. Hide the data table when visible.\n *\n * @function Highcharts.Chart#hideData\n */\nfunction chartHideData() {\n    this.toggleDataTable(false);\n}\n/**\n * @private\n */\nfunction chartToggleDataTable(show) {\n    show = pick(show, !this.isDataTableVisible);\n    // Create the div\n    var createContainer = show && !this.dataTableDiv;\n    if (createContainer) {\n        this.dataTableDiv = doc.createElement('div');\n        this.dataTableDiv.className = 'highcharts-data-table';\n        // Insert after the chart container\n        this.renderTo.parentNode.insertBefore(this.dataTableDiv, this.renderTo.nextSibling);\n    }\n    // Toggle the visibility\n    if (this.dataTableDiv) {\n        var style = this.dataTableDiv.style, oldDisplay = style.display;\n        style.display = show ? 'block' : 'none';\n        // Generate the data table\n        if (show) {\n            this.dataTableDiv.innerHTML = AST.emptyHTML;\n            var ast = new AST([this.getTableAST()]);\n            ast.addToDOM(this.dataTableDiv);\n            fireEvent(this, 'afterViewData', {\n                element: this.dataTableDiv,\n                wasHidden: createContainer || oldDisplay !== style.display\n            });\n        }\n    }\n    // Set the flag\n    this.isDataTableVisible = show;\n    // Change the menu item text\n    var exportDivElements = this.exportDivElements, options = this.options.exporting, menuItems = options &&\n        options.buttons &&\n        options.buttons.contextButton.menuItems, lang = this.options.lang;\n    if (options &&\n        options.menuItemDefinitions &&\n        lang &&\n        lang.viewData &&\n        lang.hideData &&\n        menuItems &&\n        exportDivElements) {\n        var exportDivElement = exportDivElements[menuItems.indexOf('viewData')];\n        if (exportDivElement) {\n            AST.setElementHTML(exportDivElement, this.isDataTableVisible ? lang.hideData : lang.viewData);\n        }\n    }\n}\n/**\n * Export-data module required. View the data in a table below the chart.\n *\n * @function Highcharts.Chart#viewData\n *\n * @emits Highcharts.Chart#event:afterViewData\n */\nfunction chartViewData() {\n    this.toggleDataTable(true);\n}\n/**\n * @private\n */\nfunction compose(ChartClass) {\n    if (composedClasses.indexOf(ChartClass) === -1) {\n        composedClasses.push(ChartClass);\n        // Add an event listener to handle the showTable option\n        addEvent(ChartClass, 'afterViewData', onChartAfterViewData);\n        addEvent(ChartClass, 'render', onChartRenderer);\n        var chartProto = ChartClass.prototype;\n        chartProto.downloadCSV = chartDownloadCSV;\n        chartProto.downloadXLS = chartDownloadXLS;\n        chartProto.getCSV = chartGetCSV;\n        chartProto.getDataRows = chartGetDataRows;\n        chartProto.getTable = chartGetTable;\n        chartProto.getTableAST = chartGetTableAST;\n        chartProto.hideData = chartHideData;\n        chartProto.toggleDataTable = chartToggleDataTable;\n        chartProto.viewData = chartViewData;\n    }\n    if (composedClasses.indexOf(setOptions) === -1) {\n        composedClasses.push(setOptions);\n        var exportingOptions = getOptions().exporting;\n        // Add \"Download CSV\" to the exporting menu.\n        // @todo consider move to defaults\n        if (exportingOptions) {\n            extend(exportingOptions.menuItemDefinitions, {\n                downloadCSV: {\n                    textKey: 'downloadCSV',\n                    onclick: function () {\n                        this.downloadCSV();\n                    }\n                },\n                downloadXLS: {\n                    textKey: 'downloadXLS',\n                    onclick: function () {\n                        this.downloadXLS();\n                    }\n                },\n                viewData: {\n                    textKey: 'viewData',\n                    onclick: function () {\n                        this.toggleDataTable();\n                    }\n                }\n            });\n            if (exportingOptions.buttons &&\n                exportingOptions.buttons.contextButton.menuItems) {\n                exportingOptions.buttons.contextButton.menuItems.push('separator', 'downloadCSV', 'downloadXLS', 'viewData');\n            }\n        }\n        setOptions(ExportDataDefaults);\n    }\n    if (AreaRangeSeries && composedClasses.indexOf(AreaRangeSeries) === -1) {\n        composedClasses.push(AreaRangeSeries);\n        AreaRangeSeries.prototype.keyToAxis = {\n            low: 'y',\n            high: 'y'\n        };\n    }\n    if (GanttSeries && composedClasses.indexOf(GanttSeries) === -1) {\n        composedClasses.push(GanttSeries);\n        GanttSeries.prototype.keyToAxis = {\n            start: 'x',\n            end: 'x'\n        };\n    }\n    if (MapSeries && composedClasses.indexOf(MapSeries) === -1) {\n        composedClasses.push(MapSeries);\n        MapSeries.prototype.exportKey = 'name';\n    }\n    if (MapBubbleSeries && composedClasses.indexOf(MapBubbleSeries) === -1) {\n        composedClasses.push(MapBubbleSeries);\n        MapBubbleSeries.prototype.exportKey = 'name';\n    }\n    if (TreemapSeries && composedClasses.indexOf(TreemapSeries) === -1) {\n        composedClasses.push(TreemapSeries);\n        TreemapSeries.prototype.exportKey = 'name';\n    }\n}\n/**\n * Get a blob object from content, if blob is supported\n *\n * @private\n * @param {string} content\n *        The content to create the blob from.\n * @param {string} type\n *        The type of the content.\n * @return {string|undefined}\n *         The blob object, or undefined if not supported.\n */\nfunction getBlobFromContent(content, type) {\n    var nav = win.navigator, webKit = (nav.userAgent.indexOf('WebKit') > -1 &&\n        nav.userAgent.indexOf('Chrome') < 0), domurl = win.URL || win.webkitURL || win;\n    try {\n        // MS specific\n        if ((nav.msSaveOrOpenBlob) && win.MSBlobBuilder) {\n            var blob = new win.MSBlobBuilder();\n            blob.append(content);\n            return blob.getBlob('image/svg+xml');\n        }\n        // Safari requires data URI since it doesn't allow navigation to blob\n        // URLs.\n        if (!webKit) {\n            return domurl.createObjectURL(new win.Blob(['\\uFEFF' + content], // #7084\n            { type: type }));\n        }\n    }\n    catch (e) {\n        // Ignore\n    }\n}\n/**\n * @private\n */\nfunction onChartAfterViewData() {\n    var chart = this, dataTableDiv = chart.dataTableDiv, getCellValue = function (tr, index) {\n        return tr.children[index].textContent;\n    }, comparer = function (index, ascending) {\n        return function (a, b) {\n            var sort = function (v1, v2) { return (v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ?\n                v1 - v2 :\n                v1.toString().localeCompare(v2)); };\n            return sort(getCellValue(ascending ? a : b, index), getCellValue(ascending ? b : a, index));\n        };\n    };\n    if (dataTableDiv &&\n        chart.options.exporting &&\n        chart.options.exporting.allowTableSorting) {\n        var row = dataTableDiv.querySelector('thead tr');\n        if (row) {\n            row.childNodes.forEach(function (th) {\n                var table = th.closest('table');\n                th.addEventListener('click', function () {\n                    var rows = __spreadArray([], dataTableDiv.querySelectorAll('tr:not(thead tr)'), true), headers = __spreadArray([], th.parentNode.children, true);\n                    rows.sort(comparer(headers.indexOf(th), chart.ascendingOrderInTable =\n                        !chart.ascendingOrderInTable)).forEach(function (tr) {\n                        table.appendChild(tr);\n                    });\n                    headers.forEach(function (th) {\n                        [\n                            'highcharts-sort-ascending',\n                            'highcharts-sort-descending'\n                        ].forEach(function (className) {\n                            if (th.classList.contains(className)) {\n                                th.classList.remove(className);\n                            }\n                        });\n                    });\n                    th.classList.add(chart.ascendingOrderInTable ?\n                        'highcharts-sort-ascending' :\n                        'highcharts-sort-descending');\n                });\n            });\n        }\n    }\n}\n/**\n * Handle the showTable option\n * @private\n */\nfunction onChartRenderer() {\n    if (this.options &&\n        this.options.exporting &&\n        this.options.exporting.showTable &&\n        !this.options.chart.forExport) {\n        this.viewData();\n    }\n}\n/* *\n *\n *  Default Export\n *\n * */\nvar ExportData = {\n    compose: compose\n};\nexport default ExportData;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Function callback to execute while data rows are processed for exporting.\n * This allows the modification of data rows before processed into the final\n * format.\n *\n * @callback Highcharts.ExportDataCallbackFunction\n * @extends Highcharts.EventCallbackFunction<Highcharts.Chart>\n *\n * @param {Highcharts.Chart} this\n * Chart context where the event occured.\n *\n * @param {Highcharts.ExportDataEventObject} event\n * Event object with data rows that can be modified.\n */\n/**\n * Contains information about the export data event.\n *\n * @interface Highcharts.ExportDataEventObject\n */ /**\n* Contains the data rows for the current export task and can be modified.\n* @name Highcharts.ExportDataEventObject#dataRows\n* @type {Array<Array<string>>}\n*/\n(''); // keeps doclets above in JS file\n","/**\n * @license Highcharts JS v10.3.3 (2023-01-20)\n * @module highcharts/modules/export-data\n * @requires highcharts\n * @requires highcharts/modules/exporting\n *\n * Exporting module\n *\n * (c) 2010-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n'use strict';\nimport Highcharts from '../../Core/Globals.js';\nvar G = Highcharts;\nimport ExportData from '../../Extensions/ExportData/ExportData.js';\nExportData.compose(G.Chart);\n"],"x_google_ignoreList":[0,1,2,3]}