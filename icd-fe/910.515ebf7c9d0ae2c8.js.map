{"version":3,"file":"910.515ebf7c9d0ae2c8.js","mappings":"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","names":["isTouchDevice","H","exporting","allowTableSorting","type","url","pdfFont","normal","bold","bolditalic","italic","printMaxWidth","scale","buttons","contextButton","className","menuClassName","symbol","titleKey","menuItems","menuItemDefinitions","viewFullscreen","textKey","onclick","this","fullscreen","toggle","printChart","print","separator","downloadPNG","exportChart","downloadJPEG","downloadPDF","downloadSVG","lang","exitFullscreen","contextButtonTitle","navigation","buttonOptions","symbolSize","symbolX","symbolY","align","buttonSpacing","height","verticalAlign","width","symbolFill","symbolStroke","symbolStrokeWidth","theme","padding","menuStyle","border","concat","background","menuItemStyle","color","fontSize","transition","menuItemHoverStyle","ExportingSymbols","modifiedClasses","menu","x","y","menuball","h","path","circle","compose","SVGRendererClass","indexOf","push","symbols","prototype","bind","addEvent","U","fireEvent","composedClasses","onChartBeforeRender","Fullscreen","chart","isOpen","container","renderTo","browserProps","requestFullscreen","fullscreenChange","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","ChartClass","close","optionsChart","options","ownerDocument","Document","unbindFullscreenEvent","setSize","origWidth","origHeight","origWidthOption","origHeightOption","setButtonText","open","chartWidth","chartHeight","unbindChange_1","unbindDestroy_1","promise","catch","alert","exportDivElements","exportingOptions","exportDivElement","AST","text","doc","G","createElement","discardElement","merge","objectEach","HttpUtilities","ajax","settings","headers","json","xml","octet","r","XMLHttpRequest","handleError","xhr","err","error","toUpperCase","setRequestHeader","dataType","val","key","responseType","onreadystatechange","res","readyState","status","responseText","JSON","parse","e","Error","success","data","stringify","send","getJSON","post","formAttributes","form","method","action","enctype","display","body","name","value","submit","Exporting","defaultOptions","D","setOptions","SVG_NS","win","css","extend","find","isObject","pick","removeEvent","uniqueKey","inlineDenylist","inlineToAttributes","inlineAllowlist","printingChart","unstyledElements","addButton","renderer","btnOptions","btnCount","exportSVGElements","enabled","callback","attr","styledMode","fill","stroke","stopPropagation","call","contextMenu","button","translateX","translateY","setState","paddingLeft","useHTML","addClass","title","_titleKey","zIndex","add","exportingGroup","buttonOffset","afterPrint","printReverseInfo","_a","childNodes","origDisplay","resetParams","moveContainers","forEach","node","i","nodeType","style","isPrinting","apply","beforePrint","pointer","reset","chartCallback","composition","renderExporting","destroyExport","items","innerMenu","navOptions","cacheName","menuPadding","Math","max","exportContextMenu","position","pointerEvents","fixedDiv","listStyle","margin","MozBoxShadow","WebkitBoxShadow","boxShadow","hideMenu","openMenu","overflow","hideTimer","exportEvents","setTimeout","inClass","target","item","element","isDataTableVisible","arguments","onmouseover","onmouseout","cursor","exportMenuWidth","offsetWidth","exportMenuHeight","offsetHeight","right","left","alignOptions","bottom","top","elem","ontouchstart","destroy","length","unbind","chartOptions","svg","getSVGForExport","HU","filename","replace","getFilename","getChartHTML","inlineStyles","innerHTML","s","userOptions","toLowerCase","substr","getSVG","seriesOptions","plotOptions","time","sandbox","cssWidth","cssHeight","sourceWidth","test","parseInt","isGantt","sourceHeight","animation","forExport","series","serie","enableMouseTracking","showCheckbox","visible","isInternal","colls","axes","axis","internalKey","coll","chartCopy","constructor","collOptions","update","axisCopy","copy","extremes","getExtremes","userMin","userMax","min","setExtremes","sanitizeSVG","chartExportingOptions","borderRadius","dummySVG","denylist","allowlist","defaultStyles","iframe","visibility","appendChild","iframeDoc","contentWindow","document","createElementNS","recurse","styles","parentStyles","dummy","denylisted","allowlisted","filteredStyles","filterStyles","prop","nodeName","setAttribute","hyphenate","a","b","getComputedStyle","parentNode","getElementsByTagName","namespaceURI","defaults","removeChild","p","Object","hasOwnProperty","children","querySelector","tearDown","moveTo","scrollingContainer","div","onChartInit","redraw","isDirtyExporting","ChartNavigationComposition","addUpdate","focus","isDirty","g","split","html","allowHTML","ieSanitizeSVG","chartProto","callbacks","addListener","mqlEvent","matches","ExportingDefaults","Highcharts","Chart","Renderer"],"sourceRoot":"webpack:///","sources":["./node_modules/highcharts/es-modules/Extensions/Exporting/ExportingDefaults.js","./node_modules/highcharts/es-modules/Extensions/Exporting/ExportingSymbols.js","./node_modules/highcharts/es-modules/Extensions/Exporting/Fullscreen.js","./node_modules/highcharts/es-modules/Core/HttpUtilities.js","./node_modules/highcharts/es-modules/Extensions/Exporting/Exporting.js","./node_modules/highcharts/es-modules/masters/modules/exporting.src.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport H from '../../Core/Globals.js';\nvar isTouchDevice = H.isTouchDevice;\n/* *\n *\n *  API Options\n *\n * */\n// Add the export related options\n/**\n * Options for the exporting module. For an overview on the matter, see\n * [the docs](https://www.highcharts.com/docs/export-module/export-module-overview).\n *\n * @requires     modules/exporting\n * @optionparent exporting\n */\nvar exporting = {\n    /**\n     * Experimental setting to allow HTML inside the chart (added through\n     * the `useHTML` options), directly in the exported image. This allows\n     * you to preserve complicated HTML structures like tables or bi-directional\n     * text in exported charts.\n     *\n     * Disclaimer: The HTML is rendered in a `foreignObject` tag in the\n     * generated SVG. The official export server is based on PhantomJS,\n     * which supports this, but other SVG clients, like Batik, does not\n     * support it. This also applies to downloaded SVG that you want to\n     * open in a desktop client.\n     *\n     * @type      {boolean}\n     * @default   false\n     * @since     4.1.8\n     * @apioption exporting.allowHTML\n     */\n    /**\n     * Allows the end user to sort the data table by clicking on column headers.\n     *\n     * @since 10.3.3\n     * @apioption exporting.allowTableSorting\n     */\n    allowTableSorting: true,\n    /**\n     * Additional chart options to be merged into the chart before exporting to\n     * an image format. This does not apply to printing the chart via the export\n     * menu.\n     *\n     * For example, a common use case is to add data labels to improve\n     * readability of the exported chart, or to add a printer-friendly color\n     * scheme to exported PDFs.\n     *\n     * @sample {highcharts} highcharts/exporting/chartoptions-data-labels/\n     *         Added data labels\n     * @sample {highstock} highcharts/exporting/chartoptions-data-labels/\n     *         Added data labels\n     *\n     * @type      {Highcharts.Options}\n     * @apioption exporting.chartOptions\n     */\n    /**\n     * Whether to enable the exporting module. Disabling the module will\n     * hide the context button, but API methods will still be available.\n     *\n     * @sample {highcharts} highcharts/exporting/enabled-false/\n     *         Exporting module is loaded but disabled\n     * @sample {highstock} highcharts/exporting/enabled-false/\n     *         Exporting module is loaded but disabled\n     *\n     * @type      {boolean}\n     * @default   true\n     * @since     2.0\n     * @apioption exporting.enabled\n     */\n    /**\n     * Function to call if the offline-exporting module fails to export\n     * a chart on the client side, and [fallbackToExportServer](\n     * #exporting.fallbackToExportServer) is disabled. If left undefined, an\n     * exception is thrown instead. Receives two parameters, the exporting\n     * options, and the error from the module.\n     *\n     * @see [fallbackToExportServer](#exporting.fallbackToExportServer)\n     *\n     * @type      {Highcharts.ExportingErrorCallbackFunction}\n     * @since     5.0.0\n     * @requires  modules/exporting\n     * @requires  modules/offline-exporting\n     * @apioption exporting.error\n     */\n    /**\n     * Whether or not to fall back to the export server if the offline-exporting\n     * module is unable to export the chart on the client side. This happens for\n     * certain browsers, and certain features (e.g.\n     * [allowHTML](#exporting.allowHTML)), depending on the image type exporting\n     * to. For very complex charts, it is possible that export can fail in\n     * browsers that don't support Blob objects, due to data URL length limits.\n     * It is recommended to define the [exporting.error](#exporting.error)\n     * handler if disabling fallback, in order to notify users in case export\n     * fails.\n     *\n     * @type      {boolean}\n     * @default   true\n     * @since     4.1.8\n     * @requires  modules/exporting\n     * @requires  modules/offline-exporting\n     * @apioption exporting.fallbackToExportServer\n     */\n    /**\n     * The filename, without extension, to use for the exported chart.\n     *\n     * @sample {highcharts} highcharts/exporting/filename/\n     *         Custom file name\n     * @sample {highstock} highcharts/exporting/filename/\n     *         Custom file name\n     *\n     * @type      {string}\n     * @default   chart\n     * @since     2.0\n     * @apioption exporting.filename\n     */\n    /**\n     * An object containing additional key value data for the POST form that\n     * sends the SVG to the export server. For example, a `target` can be set to\n     * make sure the generated image is received in another frame, or a custom\n     * `enctype` or `encoding` can be set.\n     *\n     * @type      {Highcharts.HTMLAttributes}\n     * @since     3.0.8\n     * @apioption exporting.formAttributes\n     */\n    /**\n     * Path where Highcharts will look for export module dependencies to\n     * load on demand if they don't already exist on `window`. Should currently\n     * point to location of [CanVG](https://github.com/canvg/canvg) library,\n     * [jsPDF](https://github.com/parallax/jsPDF) and\n     * [svg2pdf.js](https://github.com/yWorks/svg2pdf.js), required for client\n     * side export in certain browsers.\n     *\n     * @type      {string}\n     * @default   https://code.highcharts.com/{version}/lib\n     * @since     5.0.0\n     * @apioption exporting.libURL\n     */\n    /**\n     * Analogous to [sourceWidth](#exporting.sourceWidth).\n     *\n     * @type      {number}\n     * @since     3.0\n     * @apioption exporting.sourceHeight\n     */\n    /**\n     * The width of the original chart when exported, unless an explicit\n     * [chart.width](#chart.width) is set, or a pixel width is set on the\n     * container. The width exported raster image is then multiplied by\n     * [scale](#exporting.scale).\n     *\n     * @sample {highcharts} highcharts/exporting/sourcewidth/\n     *         Source size demo\n     * @sample {highstock} highcharts/exporting/sourcewidth/\n     *         Source size demo\n     * @sample {highmaps} maps/exporting/sourcewidth/\n     *         Source size demo\n     *\n     * @type      {number}\n     * @since     3.0\n     * @apioption exporting.sourceWidth\n     */\n    /**\n     * The pixel width of charts exported to PNG or JPG. As of Highcharts\n     * 3.0, the default pixel width is a function of the [chart.width](\n     * #chart.width) or [exporting.sourceWidth](#exporting.sourceWidth) and the\n     * [exporting.scale](#exporting.scale).\n     *\n     * @sample {highcharts} highcharts/exporting/width/\n     *         Export to 200px wide images\n     * @sample {highstock} highcharts/exporting/width/\n     *         Export to 200px wide images\n     *\n     * @type      {number}\n     * @since     2.0\n     * @apioption exporting.width\n     */\n    /**\n     * Default MIME type for exporting if `chart.exportChart()` is called\n     * without specifying a `type` option. Possible values are `image/png`,\n     *  `image/jpeg`, `application/pdf` and `image/svg+xml`.\n     *\n     * @type  {Highcharts.ExportingMimeTypeValue}\n     * @since 2.0\n     */\n    type: 'image/png',\n    /**\n     * The URL for the server module converting the SVG string to an image\n     * format. By default this points to Highchart's free web service.\n     *\n     * @since 2.0\n     */\n    url: 'https://export.highcharts.com/',\n    /**\n     * Settings for a custom font for the exported PDF, when using the\n     * `offline-exporting` module. This is used for languages containing\n     * non-ASCII characters, like Chinese, Russian, Japanese etc.\n     *\n     * As described in the [jsPDF\n     * docs](https://github.com/parallax/jsPDF#use-of-unicode-characters--utf-8),\n     * the 14 standard fonts in PDF are limited to the ASCII-codepage.\n     * Therefore, in order to support other text in the exported PDF, one or\n     * more TTF font files have to be passed on to the exporting module.\n     *\n     * See more in [the\n     * docs](https://www.highcharts.com/docs/export-module/client-side-export).\n     *\n     * @sample {highcharts} highcharts/exporting/offline-download-pdffont/\n     *         Download PDF in a language containing non-Latin characters.\n     *\n     * @since 10.0.0\n     * @requires modules/offline-exporting\n     */\n    pdfFont: {\n        /**\n         * The TTF font file for normal `font-style`. If font variations like\n         * `bold` or `italic` are not defined, the `normal` font will be used\n         * for those too.\n         *\n         * @type string|undefined\n         */\n        normal: void 0,\n        /**\n         * The TTF font file for bold text.\n         *\n         * @type string|undefined\n         */\n        bold: void 0,\n        /**\n         * The TTF font file for bold and italic text.\n         *\n         * @type string|undefined\n         */\n        bolditalic: void 0,\n        /**\n         * The TTF font file for italic text.\n         *\n         * @type string|undefined\n         */\n        italic: void 0\n    },\n    /**\n     * When printing the chart from the menu item in the burger menu, if\n     * the on-screen chart exceeds this width, it is resized. After printing\n     * or cancelled, it is restored. The default width makes the chart\n     * fit into typical paper format. Note that this does not affect the\n     * chart when printing the web page as a whole.\n     *\n     * @since 4.2.5\n     */\n    printMaxWidth: 780,\n    /**\n     * Defines the scale or zoom factor for the exported image compared\n     * to the on-screen display. While for instance a 600px wide chart\n     * may look good on a website, it will look bad in print. The default\n     * scale of 2 makes this chart export to a 1200px PNG or JPG.\n     *\n     * @see [chart.width](#chart.width)\n     * @see [exporting.sourceWidth](#exporting.sourceWidth)\n     *\n     * @sample {highcharts} highcharts/exporting/scale/\n     *         Scale demonstrated\n     * @sample {highstock} highcharts/exporting/scale/\n     *         Scale demonstrated\n     * @sample {highmaps} maps/exporting/scale/\n     *         Scale demonstrated\n     *\n     * @since 3.0\n     */\n    scale: 2,\n    /**\n     * Options for the export related buttons, print and export. In addition\n     * to the default buttons listed here, custom buttons can be added.\n     * See [navigation.buttonOptions](#navigation.buttonOptions) for general\n     * options.\n     *\n     * @type     {Highcharts.Dictionary<*>}\n     * @requires modules/exporting\n     */\n    buttons: {\n        /**\n         * Options for the export button.\n         *\n         * In styled mode, export button styles can be applied with the\n         * `.highcharts-contextbutton` class.\n         *\n         * @declare  Highcharts.ExportingButtonsOptionsObject\n         * @extends  navigation.buttonOptions\n         * @requires modules/exporting\n         */\n        contextButton: {\n            /**\n             * A click handler callback to use on the button directly instead of\n             * the popup menu.\n             *\n             * @sample highcharts/exporting/buttons-contextbutton-onclick/\n             *         Skip the menu and export the chart directly\n             *\n             * @type      {Function}\n             * @since     2.0\n             * @apioption exporting.buttons.contextButton.onclick\n             */\n            /**\n             * See [navigation.buttonOptions.symbolFill](\n             * #navigation.buttonOptions.symbolFill).\n             *\n             * @type      {Highcharts.ColorString}\n             * @default   #666666\n             * @since     2.0\n             * @apioption exporting.buttons.contextButton.symbolFill\n             */\n            /**\n             * The horizontal position of the button relative to the `align`\n             * option.\n             *\n             * @type      {number}\n             * @default   -10\n             * @since     2.0\n             * @apioption exporting.buttons.contextButton.x\n             */\n            /**\n             * The class name of the context button.\n             */\n            className: 'highcharts-contextbutton',\n            /**\n             * The class name of the menu appearing from the button.\n             */\n            menuClassName: 'highcharts-contextmenu',\n            /**\n             * The symbol for the button. Points to a definition function in\n             * the `Highcharts.Renderer.symbols` collection. The default\n             * `menu` function is part of the exporting module. Possible\n             * values are \"circle\", \"square\", \"diamond\", \"triangle\",\n             * \"triangle-down\", \"menu\", \"menuball\" or custom shape.\n             *\n             * @sample highcharts/exporting/buttons-contextbutton-symbol/\n             *         Use a circle for symbol\n             * @sample highcharts/exporting/buttons-contextbutton-symbol-custom/\n             *         Custom shape as symbol\n             *\n             * @type  {Highcharts.SymbolKeyValue|\"menu\"|\"menuball\"|string}\n             * @since 2.0\n             */\n            symbol: 'menu',\n            /**\n             * The key to a [lang](#lang) option setting that is used for the\n             * button's title tooltip. When the key is `contextButtonTitle`, it\n             * refers to [lang.contextButtonTitle](#lang.contextButtonTitle)\n             * that defaults to \"Chart context menu\".\n             *\n             * @since 6.1.4\n             */\n            titleKey: 'contextButtonTitle',\n            /**\n             * This option is deprecated, use\n             * [titleKey](#exporting.buttons.contextButton.titleKey) instead.\n             *\n             * @deprecated\n             * @type      {string}\n             * @apioption exporting.buttons.contextButton._titleKey\n             */\n            /**\n             * A collection of strings pointing to config options for the menu\n             * items. The config options are defined in the\n             * `menuItemDefinitions` option.\n             *\n             * By default, there is the \"View in full screen\" and \"Print\" menu\n             * items, plus one menu item for each of the available export types.\n             *\n             * @sample {highcharts} highcharts/exporting/menuitemdefinitions/\n             *         Menu item definitions\n             * @sample {highstock} highcharts/exporting/menuitemdefinitions/\n             *         Menu item definitions\n             * @sample {highmaps} highcharts/exporting/menuitemdefinitions/\n             *         Menu item definitions\n             *\n             * @type    {Array<string>}\n             * @default [\"viewFullscreen\", \"printChart\", \"separator\", \"downloadPNG\", \"downloadJPEG\", \"downloadPDF\", \"downloadSVG\"]\n             * @since   2.0\n             */\n            menuItems: [\n                'viewFullscreen',\n                'printChart',\n                'separator',\n                'downloadPNG',\n                'downloadJPEG',\n                'downloadPDF',\n                'downloadSVG'\n            ]\n        }\n    },\n    /**\n     * An object consisting of definitions for the menu items in the context\n     * menu. Each key value pair has a `key` that is referenced in the\n     * [menuItems](#exporting.buttons.contextButton.menuItems) setting,\n     * and a `value`, which is an object with the following properties:\n     *\n     * - **onclick:** The click handler for the menu item\n     *\n     * - **text:** The text for the menu item\n     *\n     * - **textKey:** If internationalization is required, the key to a language\n     *   string\n     *\n     * Custom text for the \"exitFullScreen\" can be set only in lang options\n     * (it is not a separate button).\n     *\n     * @sample {highcharts} highcharts/exporting/menuitemdefinitions/\n     *         Menu item definitions\n     * @sample {highstock} highcharts/exporting/menuitemdefinitions/\n     *         Menu item definitions\n     * @sample {highmaps} highcharts/exporting/menuitemdefinitions/\n     *         Menu item definitions\n     *\n     *\n     * @type    {Highcharts.Dictionary<Highcharts.ExportingMenuObject>}\n     * @default {\"viewFullscreen\": {}, \"printChart\": {}, \"separator\": {}, \"downloadPNG\": {}, \"downloadJPEG\": {}, \"downloadPDF\": {}, \"downloadSVG\": {}}\n     * @since   5.0.13\n     */\n    menuItemDefinitions: {\n        /**\n         * @ignore\n         */\n        viewFullscreen: {\n            textKey: 'viewFullscreen',\n            onclick: function () {\n                if (this.fullscreen) {\n                    this.fullscreen.toggle();\n                }\n            }\n        },\n        /**\n         * @ignore\n         */\n        printChart: {\n            textKey: 'printChart',\n            onclick: function () {\n                this.print();\n            }\n        },\n        /**\n         * @ignore\n         */\n        separator: {\n            separator: true\n        },\n        /**\n         * @ignore\n         */\n        downloadPNG: {\n            textKey: 'downloadPNG',\n            onclick: function () {\n                this.exportChart();\n            }\n        },\n        /**\n         * @ignore\n         */\n        downloadJPEG: {\n            textKey: 'downloadJPEG',\n            onclick: function () {\n                this.exportChart({\n                    type: 'image/jpeg'\n                });\n            }\n        },\n        /**\n         * @ignore\n         */\n        downloadPDF: {\n            textKey: 'downloadPDF',\n            onclick: function () {\n                this.exportChart({\n                    type: 'application/pdf'\n                });\n            }\n        },\n        /**\n         * @ignore\n         */\n        downloadSVG: {\n            textKey: 'downloadSVG',\n            onclick: function () {\n                this.exportChart({\n                    type: 'image/svg+xml'\n                });\n            }\n        }\n    }\n};\n// Add language\n/**\n * @optionparent lang\n */\nvar lang = {\n    /**\n     * Exporting module only. The text for the menu item to view the chart\n     * in full screen.\n     *\n     * @since 8.0.1\n     */\n    viewFullscreen: 'View in full screen',\n    /**\n     * Exporting module only. The text for the menu item to exit the chart\n     * from full screen.\n     *\n     * @since 8.0.1\n     */\n    exitFullscreen: 'Exit from full screen',\n    /**\n     * Exporting module only. The text for the menu item to print the chart.\n     *\n     * @since    3.0.1\n     * @requires modules/exporting\n     */\n    printChart: 'Print chart',\n    /**\n     * Exporting module only. The text for the PNG download menu item.\n     *\n     * @since    2.0\n     * @requires modules/exporting\n     */\n    downloadPNG: 'Download PNG image',\n    /**\n     * Exporting module only. The text for the JPEG download menu item.\n     *\n     * @since    2.0\n     * @requires modules/exporting\n     */\n    downloadJPEG: 'Download JPEG image',\n    /**\n     * Exporting module only. The text for the PDF download menu item.\n     *\n     * @since    2.0\n     * @requires modules/exporting\n     */\n    downloadPDF: 'Download PDF document',\n    /**\n     * Exporting module only. The text for the SVG download menu item.\n     *\n     * @since    2.0\n     * @requires modules/exporting\n     */\n    downloadSVG: 'Download SVG vector image',\n    /**\n     * Exporting module menu. The tooltip title for the context menu holding\n     * print and export menu items.\n     *\n     * @since    3.0\n     * @requires modules/exporting\n     */\n    contextButtonTitle: 'Chart context menu'\n};\n/**\n * A collection of options for buttons and menus appearing in the exporting\n * module or in Stock Tools.\n *\n * @requires     modules/exporting\n * @optionparent navigation\n */\nvar navigation = {\n    /**\n     * A collection of options for buttons appearing in the exporting\n     * module.\n     *\n     * In styled mode, the buttons are styled with the\n     * `.highcharts-contextbutton` and `.highcharts-button-symbol` classes.\n     *\n     * @requires modules/exporting\n     */\n    buttonOptions: {\n        /**\n         * Whether to enable buttons.\n         *\n         * @sample highcharts/navigation/buttonoptions-enabled/\n         *         Exporting module loaded but buttons disabled\n         *\n         * @type      {boolean}\n         * @default   true\n         * @since     2.0\n         * @apioption navigation.buttonOptions.enabled\n         */\n        /**\n         * The pixel size of the symbol on the button.\n         *\n         * @sample highcharts/navigation/buttonoptions-height/\n         *         Bigger buttons\n         *\n         * @since 2.0\n         */\n        symbolSize: 14,\n        /**\n         * The x position of the center of the symbol inside the button.\n         *\n         * @sample highcharts/navigation/buttonoptions-height/\n         *         Bigger buttons\n         *\n         * @since 2.0\n         */\n        symbolX: 12.5,\n        /**\n         * The y position of the center of the symbol inside the button.\n         *\n         * @sample highcharts/navigation/buttonoptions-height/\n         *         Bigger buttons\n         *\n         * @since 2.0\n         */\n        symbolY: 10.5,\n        /**\n         * Alignment for the buttons.\n         *\n         * @sample highcharts/navigation/buttonoptions-align/\n         *         Center aligned\n         *\n         * @type  {Highcharts.AlignValue}\n         * @since 2.0\n         */\n        align: 'right',\n        /**\n         * The pixel spacing between buttons.\n         *\n         * @since 2.0\n         */\n        buttonSpacing: 3,\n        /**\n         * Pixel height of the buttons.\n         *\n         * @sample highcharts/navigation/buttonoptions-height/\n         *         Bigger buttons\n         *\n         * @since 2.0\n         */\n        height: 22,\n        /**\n         * A text string to add to the individual button.\n         *\n         * @sample highcharts/exporting/buttons-text/\n         *         Full text button\n         * @sample highcharts/exporting/buttons-text-usehtml/\n         *         Icon using CSS font in text\n         * @sample highcharts/exporting/buttons-text-symbol/\n         *         Combined symbol and text\n         *\n         * @type      {string}\n         * @default   null\n         * @since     3.0\n         * @apioption navigation.buttonOptions.text\n         */\n        /**\n         * Whether to use HTML for rendering the button. HTML allows for things\n         * like inline CSS or image-based icons.\n         *\n         * @sample highcharts/exporting/buttons-text-usehtml/\n         *         Icon using CSS font in text\n         *\n         * @type      boolean\n         * @default   false\n         * @since 10.3.0\n         * @apioption navigation.buttonOptions.useHTML\n         */\n        /**\n         * The vertical offset of the button's position relative to its\n         * `verticalAlign`.\n         *\n         * @sample highcharts/navigation/buttonoptions-verticalalign/\n         *         Buttons at lower right\n         *\n         * @type      {number}\n         * @default   0\n         * @since     2.0\n         * @apioption navigation.buttonOptions.y\n         */\n        /**\n         * The vertical alignment of the buttons. Can be one of `\"top\"`,\n         * `\"middle\"` or `\"bottom\"`.\n         *\n         * @sample highcharts/navigation/buttonoptions-verticalalign/\n         *         Buttons at lower right\n         *\n         * @type  {Highcharts.VerticalAlignValue}\n         * @since 2.0\n         */\n        verticalAlign: 'top',\n        /**\n         * The pixel width of the button.\n         *\n         * @sample highcharts/navigation/buttonoptions-height/\n         *         Bigger buttons\n         *\n         * @since 2.0\n         */\n        width: 24,\n        /**\n         * Fill color for the symbol within the button.\n         *\n         * @sample highcharts/navigation/buttonoptions-symbolfill/\n         *         Blue symbol stroke for one of the buttons\n         *\n         * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @since 2.0\n         */\n        symbolFill: \"#666666\" /* Palette.neutralColor60 */,\n        /**\n         * The color of the symbol's stroke or line.\n         *\n         * @sample highcharts/navigation/buttonoptions-symbolstroke/\n         *         Blue symbol stroke\n         *\n         * @type  {Highcharts.ColorString}\n         * @since 2.0\n         */\n        symbolStroke: \"#666666\" /* Palette.neutralColor60 */,\n        /**\n         * The pixel stroke width of the symbol on the button.\n         *\n         * @sample highcharts/navigation/buttonoptions-height/\n         *         Bigger buttons\n         *\n         * @since 2.0\n         */\n        symbolStrokeWidth: 3,\n        /**\n         * A configuration object for the button theme. The object accepts\n         * SVG properties like `stroke-width`, `stroke` and `fill`.\n         * Tri-state button styles are supported by the `states.hover` and\n         * `states.select` objects.\n         *\n         * @sample highcharts/navigation/buttonoptions-theme/\n         *         Theming the buttons\n         *\n         * @requires modules/exporting\n         *\n         * @since 3.0\n         */\n        theme: {\n            /**\n             * The default fill exists only to capture hover events.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default   #ffffff\n             * @apioption navigation.buttonOptions.theme.fill\n             */\n            /**\n             * Default stroke for the buttons.\n             *\n             * @type      {Highcharts.ColorString}\n             * @default   none\n             * @apioption navigation.buttonOptions.theme.stroke\n             */\n            /**\n             * Padding for the button.\n             */\n            padding: 5\n        }\n    },\n    /**\n     * CSS styles for the popup menu appearing by default when the export\n     * icon is clicked. This menu is rendered in HTML.\n     *\n     * @see In styled mode, the menu is styled with the `.highcharts-menu`\n     *      class.\n     *\n     * @sample highcharts/navigation/menustyle/\n     *         Light gray menu background\n     *\n     * @type    {Highcharts.CSSObject}\n     * @default {\"border\": \"1px solid #999999\", \"background\": \"#ffffff\", \"padding\": \"5px 0\"}\n     * @since   2.0\n     */\n    menuStyle: {\n        /** @ignore-option */\n        border: \"1px solid \".concat(\"#999999\" /* Palette.neutralColor40 */),\n        /** @ignore-option */\n        background: \"#ffffff\" /* Palette.backgroundColor */,\n        /** @ignore-option */\n        padding: '5px 0'\n    },\n    /**\n     * CSS styles for the individual items within the popup menu appearing\n     * by default when the export icon is clicked. The menu items are\n     * rendered in HTML. Font size defaults to `11px` on desktop and `14px`\n     * on touch devices.\n     *\n     * @see In styled mode, the menu items are styled with the\n     *      `.highcharts-menu-item` class.\n     *\n     * @sample {highcharts} highcharts/navigation/menuitemstyle/\n     *         Add a grey stripe to the left\n     *\n     * @type    {Highcharts.CSSObject}\n     * @default {\"padding\": \"0.5em 1em\", \"color\": \"#333333\", \"background\": \"none\", \"fontSize\": \"11px/14px\", \"transition\": \"background 250ms, color 250ms\"}\n     * @since   2.0\n     */\n    menuItemStyle: {\n        /** @ignore-option */\n        padding: '0.5em 1em',\n        /** @ignore-option */\n        color: \"#333333\" /* Palette.neutralColor80 */,\n        /** @ignore-option */\n        background: 'none',\n        /** @ignore-option */\n        fontSize: isTouchDevice ? '14px' : '11px',\n        /** @ignore-option */\n        transition: 'background 250ms, color 250ms'\n    },\n    /**\n     * CSS styles for the hover state of the individual items within the\n     * popup menu appearing by default when the export icon is clicked. The\n     * menu items are rendered in HTML.\n     *\n     * @see In styled mode, the menu items are styled with the\n     *      `.highcharts-menu-item` class.\n     *\n     * @sample highcharts/navigation/menuitemhoverstyle/\n     *         Bold text on hover\n     *\n     * @type    {Highcharts.CSSObject}\n     * @default {\"background\": \"#335cad\", \"color\": \"#ffffff\"}\n     * @since   2.0\n     */\n    menuItemHoverStyle: {\n        /** @ignore-option */\n        background: \"#335cad\" /* Palette.highlightColor80 */,\n        /** @ignore-option */\n        color: \"#ffffff\" /* Palette.backgroundColor */\n    }\n};\n/* *\n *\n *  Default Export\n *\n * */\nvar ExportingDefaults = {\n    exporting: exporting,\n    lang: lang,\n    navigation: navigation\n};\nexport default ExportingDefaults;\n","/* *\n *\n *  Exporting module\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n/* *\n *\n *  Composition\n *\n * */\nvar ExportingSymbols;\n(function (ExportingSymbols) {\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    var modifiedClasses = [];\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * @private\n     */\n    function compose(SVGRendererClass) {\n        if (modifiedClasses.indexOf(SVGRendererClass) === -1) {\n            modifiedClasses.push(SVGRendererClass);\n            var symbols = SVGRendererClass.prototype.symbols;\n            symbols.menu = menu;\n            symbols.menuball = menuball.bind(symbols);\n        }\n    }\n    ExportingSymbols.compose = compose;\n    /**\n     * @private\n     */\n    function menu(x, y, width, height) {\n        var arr = [\n            ['M', x, y + 2.5],\n            ['L', x + width, y + 2.5],\n            ['M', x, y + height / 2 + 0.5],\n            ['L', x + width, y + height / 2 + 0.5],\n            ['M', x, y + height - 1.5],\n            ['L', x + width, y + height - 1.5]\n        ];\n        return arr;\n    }\n    /**\n     * @private\n     */\n    function menuball(x, y, width, height) {\n        var h = (height / 3) - 2;\n        var path = [];\n        path = path.concat(this.circle(width - h, y, h, h), this.circle(width - h, y + h + 4, h, h), this.circle(width - h, y + 2 * (h + 4), h, h));\n        return path;\n    }\n})(ExportingSymbols || (ExportingSymbols = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default ExportingSymbols;\n","/* *\n *\n *  (c) 2009-2021 Rafal Sebestjanski\n *\n *  Full screen for Highcharts\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n/**\n * The module allows user to enable display chart in full screen mode.\n * Used in StockTools too.\n * Based on default solutions in browsers.\n */\n'use strict';\n/* *\n *\n *  Imports\n *\n * */\nimport AST from '../../Core/Renderer/HTML/AST.js';\nimport U from '../../Core/Utilities.js';\nvar addEvent = U.addEvent, fireEvent = U.fireEvent;\n/* *\n *\n *  Constants\n *\n * */\nvar composedClasses = [];\n/* *\n *\n *  Functions\n *\n * */\n/**\n * @private\n */\nfunction onChartBeforeRender() {\n    /**\n     * @name Highcharts.Chart#fullscreen\n     * @type {Highcharts.Fullscreen}\n     * @requires modules/full-screen\n     */\n    this.fullscreen = new Fullscreen(this);\n}\n/* *\n *\n *  Class\n *\n * */\n/**\n * Handles displaying chart's container in the fullscreen mode.\n *\n * **Note**: Fullscreen is not supported on iPhone due to iOS limitations.\n *\n * @class\n * @name Highcharts.Fullscreen\n *\n * @requires modules/exporting\n */\nvar Fullscreen = /** @class */ (function () {\n    /* *\n     *\n     *  Constructors\n     *\n     * */\n    function Fullscreen(chart) {\n        /**\n         * Chart managed by the fullscreen controller.\n         * @name Highcharts.Fullscreen#chart\n         * @type {Highcharts.Chart}\n         */\n        this.chart = chart;\n        /**\n         * The flag is set to `true` when the chart is displayed in\n         * the fullscreen mode.\n         *\n         * @name Highcharts.Fullscreen#isOpen\n         * @type {boolean|undefined}\n         * @since 8.0.1\n         */\n        this.isOpen = false;\n        var container = chart.renderTo;\n        // Hold event and methods available only for a current browser.\n        if (!this.browserProps) {\n            if (typeof container.requestFullscreen === 'function') {\n                this.browserProps = {\n                    fullscreenChange: 'fullscreenchange',\n                    requestFullscreen: 'requestFullscreen',\n                    exitFullscreen: 'exitFullscreen'\n                };\n            }\n            else if (container.mozRequestFullScreen) {\n                this.browserProps = {\n                    fullscreenChange: 'mozfullscreenchange',\n                    requestFullscreen: 'mozRequestFullScreen',\n                    exitFullscreen: 'mozCancelFullScreen'\n                };\n            }\n            else if (container.webkitRequestFullScreen) {\n                this.browserProps = {\n                    fullscreenChange: 'webkitfullscreenchange',\n                    requestFullscreen: 'webkitRequestFullScreen',\n                    exitFullscreen: 'webkitExitFullscreen'\n                };\n            }\n            else if (container.msRequestFullscreen) {\n                this.browserProps = {\n                    fullscreenChange: 'MSFullscreenChange',\n                    requestFullscreen: 'msRequestFullscreen',\n                    exitFullscreen: 'msExitFullscreen'\n                };\n            }\n        }\n    }\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    /**\n     * Prepares the chart class to support fullscreen.\n     *\n     * @param {typeof_Highcharts.Chart} ChartClass\n     * The chart class to decorate with fullscreen support.\n     */\n    Fullscreen.compose = function (ChartClass) {\n        if (composedClasses.indexOf(ChartClass) === -1) {\n            composedClasses.push(ChartClass);\n            // Initialize fullscreen\n            addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n        }\n    };\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Stops displaying the chart in fullscreen mode.\n     * Exporting module required.\n     *\n     * @since       8.0.1\n     *\n     * @function    Highcharts.Fullscreen#close\n     * @return      {void}\n     * @requires    modules/full-screen\n     */\n    Fullscreen.prototype.close = function () {\n        var fullscreen = this, chart = fullscreen.chart, optionsChart = chart.options.chart;\n        fireEvent(chart, 'fullscreenClose', null, function () {\n            // Don't fire exitFullscreen() when user exited\n            // using 'Escape' button.\n            if (fullscreen.isOpen &&\n                fullscreen.browserProps &&\n                chart.container.ownerDocument instanceof Document) {\n                chart.container.ownerDocument[fullscreen.browserProps.exitFullscreen]();\n            }\n            // Unbind event as it's necessary only before exiting\n            // from fullscreen.\n            if (fullscreen.unbindFullscreenEvent) {\n                fullscreen.unbindFullscreenEvent = fullscreen\n                    .unbindFullscreenEvent();\n            }\n            chart.setSize(fullscreen.origWidth, fullscreen.origHeight, false);\n            fullscreen.origWidth = void 0;\n            fullscreen.origHeight = void 0;\n            optionsChart.width = fullscreen.origWidthOption;\n            optionsChart.height = fullscreen.origHeightOption;\n            fullscreen.origWidthOption = void 0;\n            fullscreen.origHeightOption = void 0;\n            fullscreen.isOpen = false;\n            fullscreen.setButtonText();\n        });\n    };\n    /**\n     * Displays the chart in fullscreen mode.\n     * When fired customly by user before exporting context button is created,\n     * button's text will not be replaced - it's on the user side.\n     * Exporting module required.\n     *\n     * @since       8.0.1\n     *\n     * @function Highcharts.Fullscreen#open\n     * @return      {void}\n     * @requires    modules/full-screen\n     */\n    Fullscreen.prototype.open = function () {\n        var fullscreen = this, chart = fullscreen.chart, optionsChart = chart.options.chart;\n        fireEvent(chart, 'fullscreenOpen', null, function () {\n            if (optionsChart) {\n                fullscreen.origWidthOption = optionsChart.width;\n                fullscreen.origHeightOption = optionsChart.height;\n            }\n            fullscreen.origWidth = chart.chartWidth;\n            fullscreen.origHeight = chart.chartHeight;\n            // Handle exitFullscreen() method when user clicks 'Escape' button.\n            if (fullscreen.browserProps) {\n                var unbindChange_1 = addEvent(chart.container.ownerDocument, // chart's document\n                fullscreen.browserProps.fullscreenChange, function () {\n                    // Handle lack of async of browser's\n                    // fullScreenChange event.\n                    if (fullscreen.isOpen) {\n                        fullscreen.isOpen = false;\n                        fullscreen.close();\n                    }\n                    else {\n                        chart.setSize(null, null, false);\n                        fullscreen.isOpen = true;\n                        fullscreen.setButtonText();\n                    }\n                });\n                var unbindDestroy_1 = addEvent(chart, 'destroy', unbindChange_1);\n                fullscreen.unbindFullscreenEvent = function () {\n                    unbindChange_1();\n                    unbindDestroy_1();\n                };\n                var promise = chart.renderTo[fullscreen.browserProps.requestFullscreen]();\n                if (promise) {\n                    // No dot notation because of IE8 compatibility\n                    promise['catch'](function () {\n                        alert(// eslint-disable-line no-alert\n                        'Full screen is not supported inside a frame.');\n                    });\n                }\n            }\n        });\n    };\n    /**\n     * Replaces the exporting context button's text when toogling the\n     * fullscreen mode.\n     *\n     * @private\n     *\n     * @since 8.0.1\n     *\n     * @requires modules/full-screen\n     */\n    Fullscreen.prototype.setButtonText = function () {\n        var chart = this.chart, exportDivElements = chart.exportDivElements, exportingOptions = chart.options.exporting, menuItems = (exportingOptions &&\n            exportingOptions.buttons &&\n            exportingOptions.buttons.contextButton.menuItems), lang = chart.options.lang;\n        if (exportingOptions &&\n            exportingOptions.menuItemDefinitions &&\n            lang &&\n            lang.exitFullscreen &&\n            lang.viewFullscreen &&\n            menuItems &&\n            exportDivElements) {\n            var exportDivElement = exportDivElements[menuItems.indexOf('viewFullscreen')];\n            if (exportDivElement) {\n                AST.setElementHTML(exportDivElement, !this.isOpen ?\n                    (exportingOptions.menuItemDefinitions.viewFullscreen\n                        .text ||\n                        lang.viewFullscreen) : lang.exitFullscreen);\n            }\n        }\n    };\n    /**\n     * Toggles displaying the chart in fullscreen mode.\n     * By default, when the exporting module is enabled, a context button with\n     * a drop down menu in the upper right corner accesses this function.\n     * Exporting module required.\n     *\n     * @since 8.0.1\n     *\n     * @sample      highcharts/members/chart-togglefullscreen/\n     *              Toggle fullscreen mode from a HTML button\n     *\n     * @function Highcharts.Fullscreen#toggle\n     * @requires    modules/full-screen\n     */\n    Fullscreen.prototype.toggle = function () {\n        var fullscreen = this;\n        if (!fullscreen.isOpen) {\n            fullscreen.open();\n        }\n        else {\n            fullscreen.close();\n        }\n    };\n    return Fullscreen;\n}());\n/* *\n *\n *  Default Export\n *\n * */\nexport default Fullscreen;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Gets fired when closing the fullscreen\n *\n * @callback Highcharts.FullScreenfullscreenCloseCallbackFunction\n *\n * @param {Highcharts.Chart} chart\n *        The chart on which the event occured.\n *\n * @param {global.Event} event\n *        The event that occured.\n */\n/**\n * Gets fired when opening the fullscreen\n *\n * @callback Highcharts.FullScreenfullscreenOpenCallbackFunction\n *\n * @param {Highcharts.Chart} chart\n *        The chart on which the event occured.\n *\n * @param {global.Event} event\n *        The event that occured.\n */\n(''); // keeps doclets above separated from following code\n/* *\n *\n *  API Options\n *\n * */\n/**\n * Fires when a fullscreen is closed through the context menu item,\n * or a fullscreen is closed on the `Escape` button click,\n * or the `Chart.fullscreen.close` method.\n *\n * @sample highcharts/chart/events-fullscreen\n *         Title size change on fullscreen open\n *\n * @type      {Highcharts.FullScreenfullscreenCloseCallbackFunction}\n * @since     10.1.0\n * @context   Highcharts.Chart\n * @requires  modules/full-screen\n * @apioption chart.events.fullscreenClose\n */\n/**\n * Fires when a fullscreen is opened through the context menu item,\n * or the `Chart.fullscreen.open` method.\n *\n * @sample highcharts/chart/events-fullscreen\n *         Title size change on fullscreen open\n *\n * @type      {Highcharts.FullScreenfullscreenOpenCallbackFunction}\n * @since     10.1.0\n * @context   Highcharts.Chart\n * @requires  modules/full-screen\n * @apioption chart.events.fullscreenOpen\n */\n(''); // keeps doclets above in transpiled file\n","/* *\n *\n *  (c) 2010-2021 Christer Vasseng, Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport G from '../Core/Globals.js';\nvar doc = G.doc;\nimport U from '../Core/Utilities.js';\nvar createElement = U.createElement, discardElement = U.discardElement, merge = U.merge, objectEach = U.objectEach;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Perform an Ajax call.\n *\n * @function Highcharts.ajax\n *\n * @param {Highcharts.AjaxSettingsObject} settings\n *        The Ajax settings to use.\n *\n * @return {false|undefined}\n *         Returns false, if error occured.\n */\nfunction ajax(settings) {\n    var headers = {\n        json: 'application/json',\n        xml: 'application/xml',\n        text: 'text/plain',\n        octet: 'application/octet-stream'\n    }, r = new XMLHttpRequest();\n    /**\n     * Private error handler.\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * Internal request object.\n     * @param {string|Error} err\n     * Occured error.\n     */\n    function handleError(xhr, err) {\n        if (settings.error) {\n            settings.error(xhr, err);\n        }\n        else {\n            // @todo Maybe emit a highcharts error event here\n        }\n    }\n    if (!settings.url) {\n        return false;\n    }\n    r.open((settings.type || 'get').toUpperCase(), settings.url, true);\n    if (!settings.headers || !settings.headers['Content-Type']) {\n        r.setRequestHeader('Content-Type', headers[settings.dataType || 'json'] || headers.text);\n    }\n    objectEach(settings.headers, function (val, key) {\n        r.setRequestHeader(key, val);\n    });\n    if (settings.responseType) {\n        r.responseType = settings.responseType;\n    }\n    // @todo lacking timeout handling\n    r.onreadystatechange = function () {\n        var res;\n        if (r.readyState === 4) {\n            if (r.status === 200) {\n                if (settings.responseType !== 'blob') {\n                    res = r.responseText;\n                    if (settings.dataType === 'json') {\n                        try {\n                            res = JSON.parse(res);\n                        }\n                        catch (e) {\n                            if (e instanceof Error) {\n                                return handleError(r, e);\n                            }\n                        }\n                    }\n                }\n                return settings.success && settings.success(res, r);\n            }\n            handleError(r, r.responseText);\n        }\n    };\n    if (settings.data && typeof settings.data !== 'string') {\n        settings.data = JSON.stringify(settings.data);\n    }\n    r.send(settings.data);\n}\n/**\n * Get a JSON resource over XHR, also supporting CORS without preflight.\n *\n * @function Highcharts.getJSON\n * @param {string} url\n *        The URL to load.\n * @param {Function} success\n *        The success callback. For error handling, use the `Highcharts.ajax`\n *        function instead.\n */\nfunction getJSON(url, success) {\n    HttpUtilities.ajax({\n        url: url,\n        success: success,\n        dataType: 'json',\n        headers: {\n            // Override the Content-Type to avoid preflight problems with CORS\n            // in the Highcharts demos\n            'Content-Type': 'text/plain'\n        }\n    });\n}\n/**\n * The post utility\n *\n * @private\n * @function Highcharts.post\n *\n * @param {string} url\n * Post URL\n *\n * @param {Object} data\n * Post data\n *\n * @param {Highcharts.Dictionary<string>} [formAttributes]\n * Additional attributes for the post request\n */\nfunction post(url, data, formAttributes) {\n    // create the form\n    var form = createElement('form', merge({\n        method: 'post',\n        action: url,\n        enctype: 'multipart/form-data'\n    }, formAttributes), {\n        display: 'none'\n    }, doc.body);\n    // add the data\n    objectEach(data, function (val, name) {\n        createElement('input', {\n            type: 'hidden',\n            name: name,\n            value: val\n        }, void 0, form);\n    });\n    // submit\n    form.submit();\n    // clean up\n    discardElement(form);\n}\n/* *\n *\n *  Default Export\n *\n * */\nvar HttpUtilities = {\n    ajax: ajax,\n    getJSON: getJSON,\n    post: post\n};\nexport default HttpUtilities;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * @interface Highcharts.AjaxSettingsObject\n */ /**\n* The payload to send.\n*\n* @name Highcharts.AjaxSettingsObject#data\n* @type {string|Highcharts.Dictionary<any>|undefined}\n*/ /**\n* The data type expected.\n* @name Highcharts.AjaxSettingsObject#dataType\n* @type {\"json\"|\"xml\"|\"text\"|\"octet\"|undefined}\n*/ /**\n* Function to call on error.\n* @name Highcharts.AjaxSettingsObject#error\n* @type {Function|undefined}\n*/ /**\n* The headers; keyed on header name.\n* @name Highcharts.AjaxSettingsObject#headers\n* @type {Highcharts.Dictionary<string>|undefined}\n*/ /**\n* Function to call on success.\n* @name Highcharts.AjaxSettingsObject#success\n* @type {Function|undefined}\n*/ /**\n* The HTTP method to use. For example GET or POST.\n* @name Highcharts.AjaxSettingsObject#type\n* @type {string|undefined}\n*/ /**\n* The URL to call.\n* @name Highcharts.AjaxSettingsObject#url\n* @type {string}\n*/\n(''); // keeps doclets above in JS file\n","/* *\n *\n *  Exporting module\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport AST from '../../Core/Renderer/HTML/AST.js';\nimport Chart from '../../Core/Chart/Chart.js';\nimport ChartNavigationComposition from '../../Core/Chart/ChartNavigationComposition.js';\nimport D from '../../Core/Defaults.js';\nvar defaultOptions = D.defaultOptions, setOptions = D.setOptions;\nimport ExportingDefaults from './ExportingDefaults.js';\nimport ExportingSymbols from './ExportingSymbols.js';\nimport Fullscreen from './Fullscreen.js';\nimport G from '../../Core/Globals.js';\nvar doc = G.doc, SVG_NS = G.SVG_NS, win = G.win;\nimport HU from '../../Core/HttpUtilities.js';\nimport U from '../../Core/Utilities.js';\nvar addEvent = U.addEvent, css = U.css, createElement = U.createElement, discardElement = U.discardElement, extend = U.extend, find = U.find, fireEvent = U.fireEvent, isObject = U.isObject, merge = U.merge, objectEach = U.objectEach, pick = U.pick, removeEvent = U.removeEvent, uniqueKey = U.uniqueKey;\n/* *\n *\n *  Composition\n *\n * */\nvar Exporting;\n(function (Exporting) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    var composedClasses = [];\n    // These CSS properties are not inlined. Remember camelCase.\n    var inlineDenylist = [\n        /-/,\n        /^(clipPath|cssText|d|height|width)$/,\n        /^font$/,\n        /[lL]ogical(Width|Height)$/,\n        /^parentRule$/,\n        /perspective/,\n        /TapHighlightColor/,\n        /^transition/,\n        /^length$/,\n        /^[0-9]+$/ // #17538\n    ];\n    // These ones are translated to attributes rather than styles\n    var inlineToAttributes = [\n        'fill',\n        'stroke',\n        'strokeLinecap',\n        'strokeLinejoin',\n        'strokeWidth',\n        'textAnchor',\n        'x',\n        'y'\n    ];\n    Exporting.inlineAllowlist = [];\n    var unstyledElements = [\n        'clipPath',\n        'defs',\n        'desc'\n    ];\n    /* *\n     *\n     *  Variables\n     *\n     * */\n    var printingChart;\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Add the export button to the chart, with options.\n     *\n     * @private\n     * @function Highcharts.Chart#addButton\n     * @param {Highcharts.NavigationButtonOptions} options\n     * @requires modules/exporting\n     */\n    function addButton(options) {\n        var chart = this, renderer = chart.renderer, btnOptions = merge(chart.options.navigation.buttonOptions, options), onclick = btnOptions.onclick, menuItems = btnOptions.menuItems, symbolSize = btnOptions.symbolSize || 12;\n        var symbol;\n        if (!chart.btnCount) {\n            chart.btnCount = 0;\n        }\n        // Keeps references to the button elements\n        if (!chart.exportDivElements) {\n            chart.exportDivElements = [];\n            chart.exportSVGElements = [];\n        }\n        if (btnOptions.enabled === false || !btnOptions.theme) {\n            return;\n        }\n        var attr = btnOptions.theme;\n        var callback;\n        if (!chart.styledMode) {\n            attr.fill = pick(attr.fill, \"#ffffff\" /* Palette.backgroundColor */);\n            attr.stroke = pick(attr.stroke, 'none');\n        }\n        if (onclick) {\n            callback = function (e) {\n                if (e) {\n                    e.stopPropagation();\n                }\n                onclick.call(chart, e);\n            };\n        }\n        else if (menuItems) {\n            callback = function (e) {\n                // consistent with onclick call (#3495)\n                if (e) {\n                    e.stopPropagation();\n                }\n                chart.contextMenu(button.menuClassName, menuItems, button.translateX, button.translateY, button.width, button.height, button);\n                button.setState(2);\n            };\n        }\n        if (btnOptions.text && btnOptions.symbol) {\n            attr.paddingLeft = pick(attr.paddingLeft, 30);\n        }\n        else if (!btnOptions.text) {\n            extend(attr, {\n                width: btnOptions.width,\n                height: btnOptions.height,\n                padding: 0\n            });\n        }\n        if (!chart.styledMode) {\n            attr['stroke-linecap'] = 'round';\n            attr.fill = pick(attr.fill, \"#ffffff\" /* Palette.backgroundColor */);\n            attr.stroke = pick(attr.stroke, 'none');\n        }\n        var button = renderer\n            .button(btnOptions.text, 0, 0, callback, attr, void 0, void 0, void 0, void 0, btnOptions.useHTML)\n            .addClass(options.className)\n            .attr({\n            title: pick(chart.options.lang[btnOptions._titleKey || btnOptions.titleKey], '')\n        });\n        button.menuClassName = (options.menuClassName ||\n            'highcharts-menu-' + chart.btnCount++);\n        if (btnOptions.symbol) {\n            symbol = renderer\n                .symbol(btnOptions.symbol, btnOptions.symbolX - (symbolSize / 2), btnOptions.symbolY - (symbolSize / 2), symbolSize, symbolSize\n            // If symbol is an image, scale it (#7957)\n            , {\n                width: symbolSize,\n                height: symbolSize\n            })\n                .addClass('highcharts-button-symbol')\n                .attr({\n                zIndex: 1\n            })\n                .add(button);\n            if (!chart.styledMode) {\n                symbol.attr({\n                    stroke: btnOptions.symbolStroke,\n                    fill: btnOptions.symbolFill,\n                    'stroke-width': btnOptions.symbolStrokeWidth || 1\n                });\n            }\n        }\n        button\n            .add(chart.exportingGroup)\n            .align(extend(btnOptions, {\n            width: button.width,\n            x: pick(btnOptions.x, chart.buttonOffset) // #1654\n        }), true, 'spacingBox');\n        chart.buttonOffset += ((button.width + btnOptions.buttonSpacing) *\n            (btnOptions.align === 'right' ? -1 : 1));\n        chart.exportSVGElements.push(button, symbol);\n    }\n    /**\n     * Clena up after printing a chart.\n     *\n     * @function Highcharts#afterPrint\n     *\n     * @private\n     *\n     * @param {Highcharts.Chart} chart\n     *        Chart that was (or suppose to be) printed\n     *\n     * @emits Highcharts.Chart#event:afterPrint\n     */\n    function afterPrint() {\n        var chart = this;\n        if (!chart.printReverseInfo) {\n            return void 0;\n        }\n        var _a = chart.printReverseInfo, childNodes = _a.childNodes, origDisplay = _a.origDisplay, resetParams = _a.resetParams;\n        // put the chart back in\n        chart.moveContainers(chart.renderTo);\n        // restore all body content\n        [].forEach.call(childNodes, function (node, i) {\n            if (node.nodeType === 1) {\n                node.style.display = (origDisplay[i] || '');\n            }\n        });\n        chart.isPrinting = false;\n        // Reset printMaxWidth\n        if (resetParams) {\n            chart.setSize.apply(chart, resetParams);\n        }\n        delete chart.printReverseInfo;\n        printingChart = void 0;\n        fireEvent(chart, 'afterPrint');\n    }\n    /**\n     * Prepare chart and document before printing a chart.\n     *\n     * @function Highcharts#beforePrint\n     *\n     * @private\n     *\n     *\n     * @emits Highcharts.Chart#event:beforePrint\n     */\n    function beforePrint() {\n        var chart = this, body = doc.body, printMaxWidth = chart.options.exporting.printMaxWidth, printReverseInfo = {\n            childNodes: body.childNodes,\n            origDisplay: [],\n            resetParams: void 0\n        };\n        chart.isPrinting = true;\n        chart.pointer.reset(null, 0);\n        fireEvent(chart, 'beforePrint');\n        // Handle printMaxWidth\n        var handleMaxWidth = printMaxWidth &&\n            chart.chartWidth > printMaxWidth;\n        if (handleMaxWidth) {\n            printReverseInfo.resetParams = [\n                chart.options.chart.width,\n                void 0,\n                false\n            ];\n            chart.setSize(printMaxWidth, void 0, false);\n        }\n        // hide all body content\n        [].forEach.call(printReverseInfo.childNodes, function (node, i) {\n            if (node.nodeType === 1) {\n                printReverseInfo.origDisplay[i] = node.style.display;\n                node.style.display = 'none';\n            }\n        });\n        // pull out the chart\n        chart.moveContainers(body);\n        // Storage details for undo action after printing\n        chart.printReverseInfo = printReverseInfo;\n    }\n    /**\n     * @private\n     */\n    function chartCallback(chart) {\n        var composition = chart;\n        composition.renderExporting();\n        addEvent(chart, 'redraw', composition.renderExporting);\n        // Destroy the export elements at chart destroy\n        addEvent(chart, 'destroy', composition.destroyExport);\n        // Uncomment this to see a button directly below the chart, for quick\n        // testing of export\n        /*\n        let button, viewImage, viewSource;\n        if (!chart.renderer.forExport) {\n            viewImage = function () {\n                let div = doc.createElement('div');\n                div.innerHTML = chart.getSVGForExport();\n                chart.renderTo.parentNode.appendChild(div);\n            };\n\n            viewSource = function () {\n                let pre = doc.createElement('pre');\n                pre.innerHTML = chart.getSVGForExport()\n                    .replace(/</g, '\\n&lt;')\n                    .replace(/>/g, '&gt;');\n                chart.renderTo.parentNode.appendChild(pre);\n            };\n\n            viewImage();\n\n            // View SVG Image\n            button = doc.createElement('button');\n            button.innerHTML = 'View SVG Image';\n            chart.renderTo.parentNode.appendChild(button);\n            button.onclick = viewImage;\n\n            // View SVG Source\n            button = doc.createElement('button');\n            button.innerHTML = 'View SVG Source';\n            chart.renderTo.parentNode.appendChild(button);\n            button.onclick = viewSource;\n        }\n        //*/\n    }\n    /**\n     * @private\n     */\n    function compose(ChartClass, SVGRendererClass) {\n        ExportingSymbols.compose(SVGRendererClass);\n        Fullscreen.compose(ChartClass);\n        if (composedClasses.indexOf(ChartClass) === -1) {\n            composedClasses.push(ChartClass);\n            var chartProto = ChartClass.prototype;\n            chartProto.afterPrint = afterPrint;\n            chartProto.exportChart = exportChart;\n            chartProto.inlineStyles = inlineStyles;\n            chartProto.print = print;\n            chartProto.sanitizeSVG = sanitizeSVG;\n            chartProto.getChartHTML = getChartHTML;\n            chartProto.getSVG = getSVG;\n            chartProto.getSVGForExport = getSVGForExport;\n            chartProto.getFilename = getFilename;\n            chartProto.moveContainers = moveContainers;\n            chartProto.beforePrint = beforePrint;\n            chartProto.contextMenu = contextMenu;\n            chartProto.addButton = addButton;\n            chartProto.destroyExport = destroyExport;\n            chartProto.renderExporting = renderExporting;\n            chartProto.callbacks.push(chartCallback);\n            addEvent(ChartClass, 'init', onChartInit);\n            if (G.isSafari) {\n                G.win.matchMedia('print').addListener(function (mqlEvent) {\n                    if (!printingChart) {\n                        return void 0;\n                    }\n                    if (mqlEvent.matches) {\n                        printingChart.beforePrint();\n                    }\n                    else {\n                        printingChart.afterPrint();\n                    }\n                });\n            }\n        }\n        if (composedClasses.indexOf(setOptions) === -1) {\n            composedClasses.push(setOptions);\n            defaultOptions.exporting = merge(ExportingDefaults.exporting, defaultOptions.exporting);\n            defaultOptions.lang = merge(ExportingDefaults.lang, defaultOptions.lang);\n            // Buttons and menus are collected in a separate config option set\n            // called 'navigation'. This can be extended later to add control\n            // buttons like zoom and pan right click menus.\n            defaultOptions.navigation = merge(ExportingDefaults.navigation, defaultOptions.navigation);\n        }\n    }\n    Exporting.compose = compose;\n    /**\n     * Display a popup menu for choosing the export type.\n     *\n     * @private\n     * @function Highcharts.Chart#contextMenu\n     * @param {string} className\n     *        An identifier for the menu.\n     * @param {Array<string|Highcharts.ExportingMenuObject>} items\n     *        A collection with text and onclicks for the items.\n     * @param {number} x\n     *        The x position of the opener button\n     * @param {number} y\n     *        The y position of the opener button\n     * @param {number} width\n     *        The width of the opener button\n     * @param {number} height\n     *        The height of the opener button\n     * @requires modules/exporting\n     */\n    function contextMenu(className, items, x, y, width, height, button) {\n        var chart = this, navOptions = chart.options.navigation, chartWidth = chart.chartWidth, chartHeight = chart.chartHeight, cacheName = 'cache-' + className, menuPadding = Math.max(width, height); // for mouse leave detection\n        var innerMenu, menu = chart[cacheName];\n        // create the menu only the first time\n        if (!menu) {\n            // create a HTML element above the SVG\n            chart.exportContextMenu = chart[cacheName] = menu =\n                createElement('div', {\n                    className: className\n                }, {\n                    position: 'absolute',\n                    zIndex: 1000,\n                    padding: menuPadding + 'px',\n                    pointerEvents: 'auto'\n                }, chart.fixedDiv || chart.container);\n            innerMenu = createElement('ul', { className: 'highcharts-menu' }, {\n                listStyle: 'none',\n                margin: 0,\n                padding: 0\n            }, menu);\n            // Presentational CSS\n            if (!chart.styledMode) {\n                css(innerMenu, extend({\n                    MozBoxShadow: '3px 3px 10px #888',\n                    WebkitBoxShadow: '3px 3px 10px #888',\n                    boxShadow: '3px 3px 10px #888'\n                }, navOptions.menuStyle));\n            }\n            // hide on mouse out\n            menu.hideMenu = function () {\n                css(menu, { display: 'none' });\n                if (button) {\n                    button.setState(0);\n                }\n                chart.openMenu = false;\n                // #10361, #9998\n                css(chart.renderTo, { overflow: 'hidden' });\n                css(chart.container, { overflow: 'hidden' });\n                U.clearTimeout(menu.hideTimer);\n                fireEvent(chart, 'exportMenuHidden');\n            };\n            // Hide the menu some time after mouse leave (#1357)\n            chart.exportEvents.push(addEvent(menu, 'mouseleave', function () {\n                menu.hideTimer = win.setTimeout(menu.hideMenu, 500);\n            }), addEvent(menu, 'mouseenter', function () {\n                U.clearTimeout(menu.hideTimer);\n            }), \n            // Hide it on clicking or touching outside the menu (#2258,\n            // #2335, #2407)\n            addEvent(doc, 'mouseup', function (e) {\n                if (!chart.pointer.inClass(e.target, className)) {\n                    menu.hideMenu();\n                }\n            }), addEvent(menu, 'click', function () {\n                if (chart.openMenu) {\n                    menu.hideMenu();\n                }\n            }));\n            // create the items\n            items.forEach(function (item) {\n                if (typeof item === 'string') {\n                    item = chart.options.exporting\n                        .menuItemDefinitions[item];\n                }\n                if (isObject(item, true)) {\n                    var element = void 0;\n                    if (item.separator) {\n                        element = createElement('hr', void 0, void 0, innerMenu);\n                    }\n                    else {\n                        // When chart initialized with the table, wrong button\n                        // text displayed, #14352.\n                        if (item.textKey === 'viewData' &&\n                            chart.isDataTableVisible) {\n                            item.textKey = 'hideData';\n                        }\n                        element = createElement('li', {\n                            className: 'highcharts-menu-item',\n                            onclick: function (e) {\n                                if (e) { // IE7\n                                    e.stopPropagation();\n                                }\n                                menu.hideMenu();\n                                if (item.onclick) {\n                                    item.onclick\n                                        .apply(chart, arguments);\n                                }\n                            }\n                        }, void 0, innerMenu);\n                        AST.setElementHTML(element, item.text ||\n                            chart.options.lang[item.textKey]);\n                        if (!chart.styledMode) {\n                            element.onmouseover = function () {\n                                css(this, navOptions.menuItemHoverStyle);\n                            };\n                            element.onmouseout = function () {\n                                css(this, navOptions.menuItemStyle);\n                            };\n                            css(element, extend({\n                                cursor: 'pointer'\n                            }, navOptions.menuItemStyle || {}));\n                        }\n                    }\n                    // Keep references to menu divs to be able to destroy them\n                    chart.exportDivElements.push(element);\n                }\n            });\n            // Keep references to menu and innerMenu div to be able to destroy\n            // them\n            chart.exportDivElements.push(innerMenu, menu);\n            chart.exportMenuWidth = menu.offsetWidth;\n            chart.exportMenuHeight = menu.offsetHeight;\n        }\n        var menuStyle = { display: 'block' };\n        // if outside right, right align it\n        if (x + chart.exportMenuWidth > chartWidth) {\n            menuStyle.right = (chartWidth - x - width - menuPadding) + 'px';\n        }\n        else {\n            menuStyle.left = (x - menuPadding) + 'px';\n        }\n        // if outside bottom, bottom align it\n        if (y + height + chart.exportMenuHeight > chartHeight &&\n            button.alignOptions.verticalAlign !== 'top') {\n            menuStyle.bottom = (chartHeight - y - menuPadding) + 'px';\n        }\n        else {\n            menuStyle.top = (y + height - menuPadding) + 'px';\n        }\n        css(menu, menuStyle);\n        // #10361, #9998\n        css(chart.renderTo, { overflow: '' });\n        css(chart.container, { overflow: '' });\n        chart.openMenu = true;\n        fireEvent(chart, 'exportMenuShown');\n    }\n    /**\n     * Destroy the export buttons.\n     * @private\n     * @function Highcharts.Chart#destroyExport\n     * @param {global.Event} [e]\n     * @requires modules/exporting\n     */\n    function destroyExport(e) {\n        var chart = e ? e.target : this, exportSVGElements = chart.exportSVGElements, exportDivElements = chart.exportDivElements, exportEvents = chart.exportEvents;\n        var cacheName;\n        // Destroy the extra buttons added\n        if (exportSVGElements) {\n            exportSVGElements.forEach(function (elem, i) {\n                // Destroy and null the svg elements\n                if (elem) { // #1822\n                    elem.onclick = elem.ontouchstart = null;\n                    cacheName = 'cache-' + elem.menuClassName;\n                    if (chart[cacheName]) {\n                        delete chart[cacheName];\n                    }\n                    exportSVGElements[i] = elem.destroy();\n                }\n            });\n            exportSVGElements.length = 0;\n        }\n        // Destroy the exporting group\n        if (chart.exportingGroup) {\n            chart.exportingGroup.destroy();\n            delete chart.exportingGroup;\n        }\n        // Destroy the divs for the menu\n        if (exportDivElements) {\n            exportDivElements.forEach(function (elem, i) {\n                if (elem) {\n                    // Remove the event handler\n                    U.clearTimeout(elem.hideTimer); // #5427\n                    removeEvent(elem, 'mouseleave');\n                    // Remove inline events\n                    // (chart.exportDivElements as any)[i] =\n                    exportDivElements[i] =\n                        elem.onmouseout =\n                            elem.onmouseover =\n                                elem.ontouchstart =\n                                    elem.onclick = null;\n                    // Destroy the div by moving to garbage bin\n                    discardElement(elem);\n                }\n            });\n            exportDivElements.length = 0;\n        }\n        if (exportEvents) {\n            exportEvents.forEach(function (unbind) {\n                unbind();\n            });\n            exportEvents.length = 0;\n        }\n    }\n    /**\n     * Exporting module required. Submit an SVG version of the chart to a server\n     * along with some parameters for conversion.\n     *\n     * @sample highcharts/members/chart-exportchart/\n     *         Export with no options\n     * @sample highcharts/members/chart-exportchart-filename/\n     *         PDF type and custom filename\n     * @sample highcharts/members/chart-exportchart-custom-background/\n     *         Different chart background in export\n     * @sample stock/members/chart-exportchart/\n     *         Export with Highcharts Stock\n     *\n     * @function Highcharts.Chart#exportChart\n     *\n     * @param {Highcharts.ExportingOptions} exportingOptions\n     *        Exporting options in addition to those defined in\n     *        [exporting](https://api.highcharts.com/highcharts/exporting).\n     *\n     * @param {Highcharts.Options} chartOptions\n     *        Additional chart options for the exported chart. For example a\n     *        different background color can be added here, or `dataLabels` for\n     *        export only.\n     *\n     * @requires modules/exporting\n     */\n    function exportChart(exportingOptions, chartOptions) {\n        var svg = this.getSVGForExport(exportingOptions, chartOptions);\n        // merge the options\n        exportingOptions = merge(this.options.exporting, exportingOptions);\n        // do the post\n        HU.post(exportingOptions.url, {\n            filename: exportingOptions.filename ?\n                exportingOptions.filename.replace(/\\//g, '-') :\n                this.getFilename(),\n            type: exportingOptions.type,\n            // IE8 fails to post undefined correctly, so use 0\n            width: exportingOptions.width || 0,\n            scale: exportingOptions.scale,\n            svg: svg\n        }, exportingOptions.formAttributes);\n    }\n    /**\n     * Return the unfiltered innerHTML of the chart container. Used as hook for\n     * plugins. In styled mode, it also takes care of inlining CSS style rules.\n     *\n     * @see Chart#getSVG\n     *\n     * @function Highcharts.Chart#getChartHTML\n     *\n     * @return {string}\n     * The unfiltered SVG of the chart.\n     *\n     * @requires modules/exporting\n     */\n    function getChartHTML() {\n        if (this.styledMode) {\n            this.inlineStyles();\n        }\n        return this.container.innerHTML;\n    }\n    /**\n     * Get the default file name used for exported charts. By default it creates\n     * a file name based on the chart title.\n     *\n     * @function Highcharts.Chart#getFilename\n     *\n     * @return {string} A file name without extension.\n     *\n     * @requires modules/exporting\n     */\n    function getFilename() {\n        var s = this.userOptions.title && this.userOptions.title.text;\n        var filename = this.options.exporting.filename;\n        if (filename) {\n            return filename.replace(/\\//g, '-');\n        }\n        if (typeof s === 'string') {\n            filename = s\n                .toLowerCase()\n                .replace(/<\\/?[^>]+(>|$)/g, '') // strip HTML tags\n                .replace(/[\\s_]+/g, '-')\n                .replace(/[^a-z0-9\\-]/g, '') // preserve only latin\n                .replace(/^[\\-]+/g, '') // dashes in the start\n                .replace(/[\\-]+/g, '-') // dashes in a row\n                .substr(0, 24)\n                .replace(/[\\-]+$/g, ''); // dashes in the end;\n        }\n        if (!filename || filename.length < 5) {\n            filename = 'chart';\n        }\n        return filename;\n    }\n    /**\n     * Return an SVG representation of the chart.\n     *\n     * @sample highcharts/members/chart-getsvg/\n     *         View the SVG from a button\n     *\n     * @function Highcharts.Chart#getSVG\n     *\n     * @param {Highcharts.Options} [chartOptions]\n     *        Additional chart options for the generated SVG representation. For\n     *        collections like `xAxis`, `yAxis` or `series`, the additional\n     *        options is either merged in to the original item of the same\n     *        `id`, or to the first item if a common id is not found.\n     *\n     * @return {string}\n     *         The SVG representation of the rendered chart.\n     *\n     * @emits Highcharts.Chart#event:getSVG\n     *\n     * @requires modules/exporting\n     */\n    function getSVG(chartOptions) {\n        var chart = this;\n        var svg, seriesOptions, \n        // Copy the options and add extra options\n        options = merge(chart.options, chartOptions);\n        // Use userOptions to make the options chain in series right (#3881)\n        options.plotOptions = merge(chart.userOptions.plotOptions, chartOptions && chartOptions.plotOptions);\n        // ... and likewise with time, avoid that undefined time properties are\n        // merged over legacy global time options\n        options.time = merge(chart.userOptions.time, chartOptions && chartOptions.time);\n        // create a sandbox where a new chart will be generated\n        var sandbox = createElement('div', null, {\n            position: 'absolute',\n            top: '-9999em',\n            width: chart.chartWidth + 'px',\n            height: chart.chartHeight + 'px'\n        }, doc.body);\n        // get the source size\n        var cssWidth = chart.renderTo.style.width, cssHeight = chart.renderTo.style.height, sourceWidth = options.exporting.sourceWidth ||\n            options.chart.width ||\n            (/px$/.test(cssWidth) && parseInt(cssWidth, 10)) ||\n            (options.isGantt ? 800 : 600), sourceHeight = options.exporting.sourceHeight ||\n            options.chart.height ||\n            (/px$/.test(cssHeight) && parseInt(cssHeight, 10)) ||\n            400;\n        // override some options\n        extend(options.chart, {\n            animation: false,\n            renderTo: sandbox,\n            forExport: true,\n            renderer: 'SVGRenderer',\n            width: sourceWidth,\n            height: sourceHeight\n        });\n        options.exporting.enabled = false; // hide buttons in print\n        delete options.data; // #3004\n        // prepare for replicating the chart\n        options.series = [];\n        chart.series.forEach(function (serie) {\n            seriesOptions = merge(serie.userOptions, {\n                animation: false,\n                enableMouseTracking: false,\n                showCheckbox: false,\n                visible: serie.visible\n            });\n            // Used for the navigator series that has its own option set\n            if (!seriesOptions.isInternal) {\n                options.series.push(seriesOptions);\n            }\n        });\n        var colls = {};\n        chart.axes.forEach(function (axis) {\n            // Assign an internal key to ensure a one-to-one mapping (#5924)\n            if (!axis.userOptions.internalKey) { // #6444\n                axis.userOptions.internalKey = uniqueKey();\n            }\n            if (!axis.options.isInternal) {\n                if (!colls[axis.coll]) {\n                    colls[axis.coll] = true;\n                    options[axis.coll] = [];\n                }\n                options[axis.coll].push(merge(axis.userOptions, {\n                    visible: axis.visible\n                }));\n            }\n        });\n        // Generate the chart copy\n        var chartCopy = new chart.constructor(options, chart.callback);\n        // Axis options and series options  (#2022, #3900, #5982)\n        if (chartOptions) {\n            ['xAxis', 'yAxis', 'series'].forEach(function (coll) {\n                var collOptions = {};\n                if (chartOptions[coll]) {\n                    collOptions[coll] = chartOptions[coll];\n                    chartCopy.update(collOptions);\n                }\n            });\n        }\n        // Reflect axis extremes in the export (#5924)\n        chart.axes.forEach(function (axis) {\n            var axisCopy = find(chartCopy.axes, function (copy) {\n                return copy.options.internalKey ===\n                    axis.userOptions.internalKey;\n            }), extremes = axis.getExtremes(), userMin = extremes.userMin, userMax = extremes.userMax;\n            if (axisCopy &&\n                ((typeof userMin !== 'undefined' &&\n                    userMin !== axisCopy.min) || (typeof userMax !== 'undefined' &&\n                    userMax !== axisCopy.max))) {\n                axisCopy.setExtremes(userMin, userMax, true, false);\n            }\n        });\n        // Get the SVG from the container's innerHTML\n        svg = chartCopy.getChartHTML();\n        fireEvent(this, 'getSVG', { chartCopy: chartCopy });\n        svg = chart.sanitizeSVG(svg, options);\n        // free up memory\n        options = null;\n        chartCopy.destroy();\n        discardElement(sandbox);\n        return svg;\n    }\n    /**\n     * @private\n     * @function Highcharts.Chart#getSVGForExport\n     */\n    function getSVGForExport(options, chartOptions) {\n        var chartExportingOptions = this.options.exporting;\n        return this.getSVG(merge({ chart: { borderRadius: 0 } }, chartExportingOptions.chartOptions, chartOptions, {\n            exporting: {\n                sourceWidth: ((options && options.sourceWidth) ||\n                    chartExportingOptions.sourceWidth),\n                sourceHeight: ((options && options.sourceHeight) ||\n                    chartExportingOptions.sourceHeight)\n            }\n        }));\n    }\n    /**\n     * Make hyphenated property names out of camelCase\n     * @private\n     * @param {string} prop\n     * Property name in camelCase\n     * @return {string}\n     * Hyphenated property name\n     */\n    function hyphenate(prop) {\n        return prop.replace(/([A-Z])/g, function (a, b) {\n            return '-' + b.toLowerCase();\n        });\n    }\n    /**\n     * Analyze inherited styles from stylesheets and add them inline\n     *\n     * @private\n     * @function Highcharts.Chart#inlineStyles\n     *\n     * @todo What are the border styles for text about? In general, text has a\n     *       lot of properties.\n     *\n     * @todo Make it work with IE9 and IE10.\n     *\n     * @requires modules/exporting\n     */\n    function inlineStyles() {\n        var denylist = inlineDenylist, allowlist = Exporting.inlineAllowlist, // For IE\n        defaultStyles = {};\n        var dummySVG;\n        // Create an iframe where we read default styles without pollution from\n        // this body\n        var iframe = doc.createElement('iframe');\n        css(iframe, {\n            width: '1px',\n            height: '1px',\n            visibility: 'hidden'\n        });\n        doc.body.appendChild(iframe);\n        var iframeDoc = (iframe.contentWindow && iframe.contentWindow.document);\n        if (iframeDoc) {\n            iframeDoc.body.appendChild(iframeDoc.createElementNS(SVG_NS, 'svg'));\n        }\n        /**\n         * Call this on all elements and recurse to children\n         * @private\n         * @param {Highcharts.HTMLDOMElement} node\n         *        Element child\n             */\n        function recurse(node) {\n            var filteredStyles = {};\n            var styles, parentStyles, dummy, denylisted, allowlisted, i;\n            /**\n             * Check computed styles and whether they are in the allow/denylist\n             * for styles or atttributes.\n             * @private\n             * @param {string} val\n             *        Style value\n             * @param {string} prop\n             *        Style property name\n                     */\n            function filterStyles(val, prop) {\n                // Check against allowlist & denylist\n                denylisted = allowlisted = false;\n                if (allowlist.length) {\n                    // Styled mode in IE has a allowlist instead. Exclude all\n                    // props not in this list.\n                    i = allowlist.length;\n                    while (i-- && !allowlisted) {\n                        allowlisted = allowlist[i].test(prop);\n                    }\n                    denylisted = !allowlisted;\n                }\n                // Explicitly remove empty transforms\n                if (prop === 'transform' && val === 'none') {\n                    denylisted = true;\n                }\n                i = denylist.length;\n                while (i-- && !denylisted) {\n                    denylisted = (denylist[i].test(prop) ||\n                        typeof val === 'function');\n                }\n                if (!denylisted) {\n                    // If parent node has the same style, it gets inherited, no\n                    // need to inline it. Top-level props should be diffed\n                    // against parent (#7687).\n                    if ((parentStyles[prop] !== val ||\n                        node.nodeName === 'svg') &&\n                        defaultStyles[node.nodeName][prop] !== val) {\n                        // Attributes\n                        if (!inlineToAttributes ||\n                            inlineToAttributes.indexOf(prop) !== -1) {\n                            if (val) {\n                                node.setAttribute(hyphenate(prop), val);\n                            }\n                            // Styles\n                        }\n                        else {\n                            filteredStyles[prop] = val;\n                        }\n                    }\n                }\n            }\n            if (iframeDoc &&\n                node.nodeType === 1 &&\n                unstyledElements.indexOf(node.nodeName) === -1) {\n                styles = win.getComputedStyle(node, null);\n                parentStyles = node.nodeName === 'svg' ?\n                    {} :\n                    win.getComputedStyle(node.parentNode, null);\n                // Get default styles from the browser so that we don't have to\n                // add these\n                if (!defaultStyles[node.nodeName]) {\n                    /*\n                    if (!dummySVG) {\n                        dummySVG = doc.createElementNS(H.SVG_NS, 'svg');\n                        dummySVG.setAttribute('version', '1.1');\n                        doc.body.appendChild(dummySVG);\n                    }\n                    */\n                    dummySVG = iframeDoc.getElementsByTagName('svg')[0];\n                    dummy = iframeDoc.createElementNS(node.namespaceURI, node.nodeName);\n                    dummySVG.appendChild(dummy);\n                    // Get the defaults into a standard object (simple merge\n                    // won't do)\n                    var s = win.getComputedStyle(dummy, null), defaults = {};\n                    for (var key in s) {\n                        if (typeof s[key] === 'string' &&\n                            !/^[0-9]+$/.test(key)) {\n                            defaults[key] = s[key];\n                        }\n                    }\n                    defaultStyles[node.nodeName] = defaults;\n                    // Remove default fill, otherwise text disappears when\n                    // exported\n                    if (node.nodeName === 'text') {\n                        delete defaultStyles.text.fill;\n                    }\n                    dummySVG.removeChild(dummy);\n                }\n                // Loop through all styles and add them inline if they are ok\n                for (var p in styles) {\n                    if (\n                    // Some browsers put lots of styles on the prototype...\n                    G.isFirefox ||\n                        G.isMS ||\n                        G.isSafari || // #16902\n                        // ... Chrome puts them on the instance\n                        Object.hasOwnProperty.call(styles, p)) {\n                        filterStyles(styles[p], p);\n                    }\n                }\n                // Apply styles\n                css(node, filteredStyles);\n                // Set default stroke width (needed at least for IE)\n                if (node.nodeName === 'svg') {\n                    node.setAttribute('stroke-width', '1px');\n                }\n                if (node.nodeName === 'text') {\n                    return;\n                }\n                // Recurse\n                [].forEach.call(node.children || node.childNodes, recurse);\n            }\n        }\n        /**\n         * Remove the dummy objects used to get defaults\n         * @private\n         */\n        function tearDown() {\n            dummySVG.parentNode.removeChild(dummySVG);\n            // Remove trash from DOM that stayed after each exporting\n            iframe.parentNode.removeChild(iframe);\n        }\n        recurse(this.container.querySelector('svg'));\n        tearDown();\n    }\n    /**\n     * Move the chart container(s) to another div.\n     *\n     * @function Highcharts#moveContainers\n     *\n     * @private\n     *\n     * @param {Highcharts.HTMLDOMElement} moveTo\n     *        Move target\n     */\n    function moveContainers(moveTo) {\n        var chart = this;\n        (chart.fixedDiv ? // When scrollablePlotArea is active (#9533)\n            [chart.fixedDiv, chart.scrollingContainer] :\n            [chart.container]).forEach(function (div) {\n            moveTo.appendChild(div);\n        });\n    }\n    /**\n     * Add update methods to handle chart.update and chart.exporting.update and\n     * chart.navigation.update. These must be added to the chart instance rather\n     * than the Chart prototype in order to use the chart instance inside the\n     * update function.\n     * @private\n     */\n    function onChartInit() {\n        var chart = this, \n        /**\n         * @private\n         * @param {\"exporting\"|\"navigation\"} prop\n         *        Property name in option root\n         * @param {Highcharts.ExportingOptions|Highcharts.NavigationOptions} options\n         *        Options to update\n         * @param {boolean} [redraw=true]\n         *        Whether to redraw\n                 */\n        update = function (prop, options, redraw) {\n            chart.isDirtyExporting = true;\n            merge(true, chart.options[prop], options);\n            if (pick(redraw, true)) {\n                chart.redraw();\n            }\n        };\n        chart.exporting = {\n            update: function (options, redraw) {\n                update('exporting', options, redraw);\n            }\n        };\n        // Register update() method for navigation. Cannot be set the same way\n        // as for exporting, because navigation options are shared with bindings\n        // which has separate update() logic.\n        ChartNavigationComposition\n            .compose(chart).navigation\n            .addUpdate(function (options, redraw) {\n            update('navigation', options, redraw);\n        });\n    }\n    /**\n     * Exporting module required. Clears away other elements in the page and\n     * prints the chart as it is displayed. By default, when the exporting\n     * module is enabled, a context button with a drop down menu in the upper\n     * right corner accesses this function.\n     *\n     * @sample highcharts/members/chart-print/\n     *         Print from a HTML button\n     *\n     * @function Highcharts.Chart#print\n     *\n     *\n     * @emits Highcharts.Chart#event:beforePrint\n     * @emits Highcharts.Chart#event:afterPrint\n     *\n     * @requires modules/exporting\n     */\n    function print() {\n        var chart = this;\n        if (chart.isPrinting) { // block the button while in printing mode\n            return;\n        }\n        printingChart = chart;\n        if (!G.isSafari) {\n            chart.beforePrint();\n        }\n        // Give the browser time to draw WebGL content, an issue that randomly\n        // appears (at least) in Chrome ~67 on the Mac (#8708).\n        setTimeout(function () {\n            win.focus(); // #1510\n            win.print();\n            // allow the browser to prepare before reverting\n            if (!G.isSafari) {\n                setTimeout(function () {\n                    chart.afterPrint();\n                }, 1000);\n            }\n        }, 1);\n    }\n    /**\n     * Add the buttons on chart load\n     * @private\n     * @function Highcharts.Chart#renderExporting\n     * @requires modules/exporting\n     */\n    function renderExporting() {\n        var chart = this, exportingOptions = chart.options.exporting, buttons = exportingOptions.buttons, isDirty = chart.isDirtyExporting || !chart.exportSVGElements;\n        chart.buttonOffset = 0;\n        if (chart.isDirtyExporting) {\n            chart.destroyExport();\n        }\n        if (isDirty && exportingOptions.enabled !== false) {\n            chart.exportEvents = [];\n            chart.exportingGroup = chart.exportingGroup ||\n                chart.renderer.g('exporting-group').attr({\n                    zIndex: 3 // #4955, // #8392\n                }).add();\n            objectEach(buttons, function (button) {\n                chart.addButton(button);\n            });\n            chart.isDirtyExporting = false;\n        }\n    }\n    /**\n     * Exporting module only. A collection of fixes on the produced SVG to\n     * account for expando properties, browser bugs, VML problems and other.\n     * Returns a cleaned SVG.\n     *\n     * @private\n     * @function Highcharts.Chart#sanitizeSVG\n     * @param {string} svg\n     *        SVG code to sanitize\n     * @param {Highcharts.Options} options\n     *        Chart options to apply\n     * @return {string}\n     *         Sanitized SVG code\n     * @requires modules/exporting\n     */\n    function sanitizeSVG(svg, options) {\n        var split = svg.indexOf('</svg>') + 6;\n        var html = svg.substr(split);\n        // Remove any HTML added to the container after the SVG (#894, #9087)\n        svg = svg.substr(0, split);\n        // Move HTML into a foreignObject\n        if (options && options.exporting && options.exporting.allowHTML) {\n            if (html) {\n                html = '<foreignObject x=\"0\" y=\"0\" ' +\n                    'width=\"' + options.chart.width + '\" ' +\n                    'height=\"' + options.chart.height + '\">' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\">' +\n                    // Some tags needs to be closed in xhtml (#13726)\n                    html.replace(/(<(?:img|br).*?(?=\\>))>/g, '$1 />') +\n                    '</body>' +\n                    '</foreignObject>';\n                svg = svg.replace('</svg>', html + '</svg>');\n            }\n        }\n        svg = svg\n            .replace(/zIndex=\"[^\"]+\"/g, '')\n            .replace(/symbolName=\"[^\"]+\"/g, '')\n            .replace(/jQuery[0-9]+=\"[^\"]+\"/g, '')\n            .replace(/url\\((\"|&quot;)(.*?)(\"|&quot;)\\;?\\)/g, 'url($2)')\n            .replace(/url\\([^#]+#/g, 'url(#')\n            .replace(/<svg /, '<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" ')\n            .replace(/ (|NS[0-9]+\\:)href=/g, ' xlink:href=') // #3567\n            .replace(/\\n/, ' ')\n            // Batik doesn't support rgba fills and strokes (#3095)\n            .replace(/(fill|stroke)=\"rgba\\(([ 0-9]+,[ 0-9]+,[ 0-9]+),([ 0-9\\.]+)\\)\"/g, // eslint-disable-line max-len\n        '$1=\"rgb($2)\" $1-opacity=\"$3\"')\n            // Replace HTML entities, issue #347\n            .replace(/&nbsp;/g, '\\u00A0') // no-break space\n            .replace(/&shy;/g, '\\u00AD'); // soft hyphen\n        // Further sanitize for oldIE\n        if (this.ieSanitizeSVG) {\n            svg = this.ieSanitizeSVG(svg);\n        }\n        return svg;\n    }\n})(Exporting || (Exporting = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default Exporting;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Gets fired after a chart is printed through the context menu item or the\n * Chart.print method.\n *\n * @callback Highcharts.ExportingAfterPrintCallbackFunction\n *\n * @param {Highcharts.Chart} this\n *        The chart on which the event occured.\n *\n * @param {global.Event} event\n *        The event that occured.\n */\n/**\n * Gets fired before a chart is printed through the context menu item or the\n * Chart.print method.\n *\n * @callback Highcharts.ExportingBeforePrintCallbackFunction\n *\n * @param {Highcharts.Chart} this\n *        The chart on which the event occured.\n *\n * @param {global.Event} event\n *        The event that occured.\n */\n/**\n * Function to call if the offline-exporting module fails to export a chart on\n * the client side.\n *\n * @callback Highcharts.ExportingErrorCallbackFunction\n *\n * @param {Highcharts.ExportingOptions} options\n *        The exporting options.\n *\n * @param {global.Error} err\n *        The error from the module.\n */\n/**\n * Definition for a menu item in the context menu.\n *\n * @interface Highcharts.ExportingMenuObject\n */ /**\n* The text for the menu item.\n*\n* @name Highcharts.ExportingMenuObject#text\n* @type {string|undefined}\n*/ /**\n* If internationalization is required, the key to a language string.\n*\n* @name Highcharts.ExportingMenuObject#textKey\n* @type {string|undefined}\n*/ /**\n* The click handler for the menu item.\n*\n* @name Highcharts.ExportingMenuObject#onclick\n* @type {Highcharts.EventCallbackFunction<Highcharts.Chart>|undefined}\n*/ /**\n* Indicates a separator line instead of an item.\n*\n* @name Highcharts.ExportingMenuObject#separator\n* @type {boolean|undefined}\n*/\n/**\n * Possible MIME types for exporting.\n *\n * @typedef {\"image/png\"|\"image/jpeg\"|\"application/pdf\"|\"image/svg+xml\"} Highcharts.ExportingMimeTypeValue\n */\n(''); // keeps doclets above in transpiled file\n/* *\n *\n *  API Options\n *\n * */\n/**\n * Fires after a chart is printed through the context menu item or the\n * `Chart.print` method.\n *\n * @sample highcharts/chart/events-beforeprint-afterprint/\n *         Rescale the chart to print\n *\n * @type      {Highcharts.ExportingAfterPrintCallbackFunction}\n * @since     4.1.0\n * @context   Highcharts.Chart\n * @requires  modules/exporting\n * @apioption chart.events.afterPrint\n */\n/**\n * Fires before a chart is printed through the context menu item or\n * the `Chart.print` method.\n *\n * @sample highcharts/chart/events-beforeprint-afterprint/\n *         Rescale the chart to print\n *\n * @type      {Highcharts.ExportingBeforePrintCallbackFunction}\n * @since     4.1.0\n * @context   Highcharts.Chart\n * @requires  modules/exporting\n * @apioption chart.events.beforePrint\n */\n(''); // keeps doclets above in transpiled file\n","/**\n * @license Highcharts JS v10.3.3 (2023-01-20)\n * @module highcharts/modules/exporting\n * @requires highcharts\n *\n * Exporting module\n *\n * (c) 2010-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n'use strict';\nimport Highcharts from '../../Core/Globals.js';\nimport Exporting from '../../Extensions/Exporting/Exporting.js';\nimport HttpUtilities from '../../Core/HttpUtilities.js';\nvar G = Highcharts;\nG.HttpUtilities = HttpUtilities;\nG.ajax = HttpUtilities.ajax;\nG.getJSON = HttpUtilities.getJSON;\nG.post = HttpUtilities.post;\nExporting.compose(G.Chart, G.Renderer);\n"],"x_google_ignoreList":[0,1,2,3,4,5]}