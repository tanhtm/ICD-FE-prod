{"version":3,"file":"916.2895fd5f9957ba35.js","mappings":"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","names":["CenteredUtilities","deg2rad","H","fireEvent","U","isNumber","pick","relativeLength","getCenter","handleSlicingRoom","i","value","options","this","chart","slicingRoom","slicedOffset","plotWidth","plotHeight","centerOption","center","smallestSize","Math","min","thickness","size","innerSize","parseFloat","positions","angular","Series","test","getStartAndEndRadians","start","end","startAngle","endAngle","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","isFirefox","isMS","isWebKit","win","css","defined","extend","pInt","HTMLElement","_super","apply","arguments","compose","SVGElementClass","composedClasses","indexOf","push","htmlElementProto","svgElementProto","getSpanCorrection","htmlCss","htmlGetBBox","htmlUpdateTransform","setSpanRotation","width","baseline","alignCorrection","xCorr","yCorr","styles","doTransform","wrapper","isSettingWidth","element","tagName","textWidth","textOverflow","whiteSpace","overflow","x","offsetLeft","y","offsetTop","offsetWidth","height","offsetHeight","added","renderer","elem","translateX","translateY","align","textAlign","left","right","marginLeft","marginTop","styledMode","shadows","forEach","shadow","inverted","childNodes","child","invertChild","rotation","currentTextTransform","innerHTML","join","hasBoxWidthChanged","oldTextWidth","textPxLength","getTextPxLength","textContent","innerText","style","display","cTT","fontMetrics","fontSize","oldRotation","oldAlign","top","alignOnAdd","rotationStyle","cssTransformKey","navigator","userAgent","opera","transform","transformOrigin","SVGElement","attr","createElement","HTMLRenderer","SVGRendererClass","html","str","isSVG","addSetters","gWrapper","prop","key","styleObject","div","addedSetters","textSetter","textStr","bBox","AST","xSetter","ySetter","alignSetter","rotationSetter","alignValue","afterSetters","text","round","position","fontFamily","add","svgGroupWrapper","htmlGroup","parentGroup","container","box","parentNode","parents","reverse","cls","translateSetter","htmlGroupStyle","parentGroupStyles","className","opacity","cursor","pointerEvents","visibility","classSetter","setAttribute","on","onEvents","translateXSetter","translateYSetter","appendChild","SVGRenderer","DateTimeAxis","addEvent","getMagnitude","normalizeTickInterval","timeUnits","getTimeTicks","time","onInit","e","axis","userOptions","type","dateTime","Additions","AxisClass","keepProps","normalizeTimeTickInterval","tickInterval","unitsOption","units","unit","length","interval","multiples","year","unitRange","count","max","unitName","getXDateFormat","dateTimeLabelFormats","closestPointRange","getDateFormat","startOfWeek","resolveDTLFormat","main","day","LogarithmicAxis","logarithmic","onAfterInit","log","lin2val","num","lin2log","val2lin","log2lin","getLogTickPositions","minor","axisLength","len","minorAutoInterval","getLinearTickPositions","intermediate","j","pos","lastPos","break2","floor","realMin","realMax","tickIntervalOption","getMinorTickInterval","tickPixelInterval","tickPositions","map","pow","LN10","PlotLineOrBandAxis","erase","PlotLineOrBandClass","PlotLineOrBandType","getPlotBandPath","from","to","isFlat","toPath","getPlotLinePath","force","acrossPanes","result","horiz","outside","path","plus","toString","pathStart","pathEnd","toPathStart","toPathEnd","addPlotBand","addPlotBandOrLine","addPlotLine","coll","_this","obj","visible","render","_addedPlotLB","plotLines","concat","plotBands","plotLineOptions","updatedOptions","plotLinesAndBands","removePlotBandOrLine","id","i_1","destroy","arr","removePlotBand","removePlotLine","arrayMax","arrayMin","destroyObjectProperties","merge","objectEach","PlotLineOrBand","group","plotLine","color","zIndex","events","groupAttribs","optionsLabel","label","svgElem","isBand","isLine","isNew","attribs","class","groupName","stroke","dashStyle","dashstyle","fill","borderWidth","borderColor","plotLinesAndBandsGroups","g","lineWidth","strokeWidth","eventsAdded","event","eventType","show","animate","hide","formatter","verticalAlign","renderLabel","getLabelText","useHTML","xBounds","yBounds","alignAttr","clip","chartWidth","stop","A","Chart","scrollablePixelsX","scrollablePixelsY","corrections","scrollablePlotArea","scrollableMinWidth","minWidth","scrollableMinHeight","minHeight","forExport","scrollablePlotBox","plotBox","clipBox","name","chartHeight","skipAxes","axes","side","marginName","correctionValue","margin","Axis","setAxisSize","setAxisTranslation","setUpScrolling","applyFixed","fixedDiv","lastHoverPoint","WebkitOverflowScrolling","overflowX","overflowY","scrollingParent","renderTo","scrollingContainer","pointer","chartPosition","hoverPoint","runPointActions","innerContainer","axisClass","fixedRenderer","fixedSelectors","querySelectorAll","namespaceURI","SVG_NS","scrollableWidth","scrollableHeight","firstTime","chartOptions","scrollableOptions","Renderer","RendererRegistry","insertBefore","scrollableMask","backgroundColor","addClass","moveFixedElements","setSize","scrollableDirty","boxWrapper","viewBox","chartBackground","scrollPositionX","scrollLeft","scrollPositionY","scrollTop","axisOffset","maskTop","plotTop","maskLeft","plotLeft","maskBottom","maskRight","maskPlotRight","maskPlotBottom","redrawTrigger","getDeferredAnimation","seriesProto","SeriesRegistry","correctFloat","isArray","chartGetStacks","yAxis","stacking","stacks","hasVisibleSeries","oldStacks","series","xAxisOptions","xAxis","ignoreHiddenSeries","stackKey","stack","onAxisDestroy","stackTotalGroup","onAxisInit","AxisAdditions","seriesGetStackIndicator","stackIndicator","index","seriesModifyStacks","processedXData","stacker","pointExtremes","getStackIndicator","points","seriesPercentStacker","totalFactor","total","stackedYData","seriesSetGroupedPoints","centerInCategory","is","setStackedPoints","slice","seriesSetStackedPoints","stackingParam","isNegative","other","pointKey","xData","yData","processedYData","yDataLength","seriesOptions","threshold","stackThreshold","startFromThreshold","stackOption","negKey","negStacks","stacksTouched","StackItem","stackLabels","cumulative","base","touched","singleStacks","abs","hasValidPoints","usePercentage","StackingAxis","buildStacks","actualSeries","axisSeries","reversedStacks","setGroupedPoints","modifyStacks","cleanStacks","resetStacks","renderStackTotals","animationConfig","animation","translate","ChartClass","SeriesClass","getStacks","seriesProto_1","percentStacker","LineSeries","data","drawGraph","graphPath","gappedPath","getGraphPath","props","lineColor","getZonesGraphs","graphKey","graph","verb","endX","preventGraphAnimation","xMap","fillGraph","linecap","startX","isArea","nullsAsZeroes","connectCliffs","gap","step","reversed","getValidPoints","connectNulls","point","pathToPoint","plotX","plotY","lastPoint","leftCliff","rightCliff","isNull","getPointSpline","zones","zone","propset","defaultOptions","Color","AreaSeries","areaPath","fillColor","areaKey","area","setOpacity","fillOpacity","get","shiftUnit","yBottom","bottomPoints","graphPoints","seriesIndex","translatedThreshold","getThreshold","addDummyPoints","otherI","bottom","stackedValues","nullVal","cliffVal","isCliff","doCurve","getStackPoints","iEnd","leftNull","rightNull","rectPlotX","topPath","bottomPath","firstBottomPoint","segment","keys","pointMap","yAxisSeries","seriesLength","upOrDown","stackX","sort","a","visibleSeries_1","s","idx","stackPoint","direction","nullName","cliffName","otherStack","cliff","si","drawLegendSymbol","LegendSymbol","SplineSeries","leftContX","leftContY","rightContX","rightContY","smoothing","denom","nextPoint","otherPoint","lastY","nextY","correction","ret","_a","areaProto","AreaSplineSeries","DataLabel","format","F","isString","splat","alignDataLabel","dataLabel","alignTo","rotCorr","isCartesian","enabledDataSorting","isInsidePlot","paneCoordinates","setStartPos","alignOptions","justify","setDataLabelStartPos","forceDL","inside","getBBox","bBoxCorrection","middle","Number","justifyDataLabel","crop","shape","anchorX","anchorY","placed","drawDataLabels","dataLabelsGroup","hasRendered","plotBackgroundColor","contrastColor","getContrast","seriesDlOptions","dataLabels","defer","duration","mergeArrays","plotOptions","enabled","_hasPointLabels","plotGroup","dlOptions","labelOptions","labelConfig","formatString","labelText","labelEnabled","dataLabelOnNull","applyFilter","filter","op","operator","property","val","connector","connectors","labelDistance","distance","getLabelConfig","formatPrefix","r","borderRadius","padding","backgroundColor_1","colorIndex","textPathOptions","textPath","setTextPath","getDataLabelPath","graphic","dataLabelPath","off","justified","_b","one","two","res","el","isInside","labelCenter","pointWidth","halfWidth","startXPos","startYPos","ColumnDataLabel","overshoot","xLen","plotSizeX","yLen","plotSizeY","dlBox","shapeArgs","below","ColumnSeriesClass","BarSeries","ColumnSeries","setAnimation","PiePoint","getConnectorPath","labelPosition","predefinedShapes","connectorShapes","connectorShape","final","alignment","connectorPosition","getTranslate","sliced","slicedTranslation","haloPath","symbols","arc","innerR","init","toggleSlice","isValid","setVisible","vis","redraw","ignoreHiddenPoint","legendItem","legend","colorizeItem","state","setState","isDirty","shadowGroup","Point","fixedOffset","breakAt","touchingSliceAt","softConnector","straight","crookedLine","pieCenterX","radius","crookDistance","crookX","useCrook","Pie_PieSeriesDefaults","colorByPoint","allowOverlap","connectorPadding","inactiveOtherPoints","legendType","marker","showInLegend","stickyTracking","tooltip","followPointer","states","hover","brightness","CU","noop","clamp","PieSeries","maxLabelDistance","startAngleRad","args","startR","drawEmpty","centerX","centerY","endAngleRad","Symbols","drawPoints","hasNewShapeType","shapeType","delayedRendering","generatePoints","updateTotals","getX","radii","angle","asin","cos","hasData","redrawPoints","groupTranslation","pointAttr","animateTo","pointAttribs","selected","setRadialReference","getClassName","sortByAngle","sign","finalConnectorOffset","radiusX","radiusY","precision","connectorOffset","radians","circ","percentage","PI","sin","tooltipPos","half","natural","PieSeriesDefaults","axisTypes","directTouch","drawTracker","getSymbol","noSharedTooltip","pointClass","requireSorting","searchPoint","trackerGroups","distribute","R","dataLabelPositioners","radialDistributionY","distributeBox","radialDistributionX","naturalY","seriesCenter","alignToPlotEdges","dataLabelWidth","alignToConnectors","maxDataLabelWidth","connectorWidth","labelHeight","pointDataLabelsOptions","maxWidth","halves","shortened","_pos","sideOverflow","distributionLength","target","rank","positionIndex","_attr","verifyDataLabelOverflow","placeDataLabels","connectorColor","moved","minSize","newSize","PieSeriesClass","pieProto","hideOrShow","complete","newOpacity","isLabelAffected","oldOpacity","isOld","labels","labelCollectors","collector","stackItem","labelrank","nodes","hideOverlappingLabels","label1","label2","box1","box2","ren","getAbsoluteBox","parent","lineHeightCorrection","xOffset","h","absoluteBox","Responsive","find","isObject","uniqueKey","currentOptions","getCurrent","curr","depth","collectionsWithUpdate","matchResponsiveRule","rule","matches","condition","callback","MAX_VALUE","maxHeight","_id","setResponsive","reset","undoOptions","responsive","currentResponsive","ruleIds","rules","mergedOptions","ruleId","isResponsiveOptions","update","G","Highcharts","Animation","animObject","timers","Fx","Legend","Pointer","MSPointer","Tick","Time","Tooltip","Defaults","getOptions","setOptions","dateFormat","FormatUtilities","numberFormat","Utilities","clearTimeout","discardElement","RendererUtilities","error","extendClass","getStyle","inArray","isClass","isDOMElement","isFunction","offset","pad","removeEvent","seriesType","stableSort","syncTimeout","useSerialIds","wrap","PieDataLabel"],"sourceRoot":"webpack:///","sources":["./node_modules/highcharts/es-modules/Series/CenteredUtilities.js","./node_modules/highcharts/es-modules/Core/Renderer/HTML/HTMLElement.js","./node_modules/highcharts/es-modules/Core/Renderer/HTML/HTMLRenderer.js","./node_modules/highcharts/es-modules/Core/Axis/DateTimeAxis.js","./node_modules/highcharts/es-modules/Core/Axis/LogarithmicAxis.js","./node_modules/highcharts/es-modules/Core/Axis/PlotLineOrBand/PlotLineOrBandAxis.js","./node_modules/highcharts/es-modules/Core/Axis/PlotLineOrBand/PlotLineOrBand.js","./node_modules/highcharts/es-modules/Extensions/ScrollablePlotArea.js","./node_modules/highcharts/es-modules/Core/Axis/Stacking/StackingAxis.js","./node_modules/highcharts/es-modules/Series/Line/LineSeries.js","./node_modules/highcharts/es-modules/Series/Area/AreaSeries.js","./node_modules/highcharts/es-modules/Series/Spline/SplineSeries.js","./node_modules/highcharts/es-modules/Series/AreaSpline/AreaSplineSeries.js","./node_modules/highcharts/es-modules/Core/Series/DataLabel.js","./node_modules/highcharts/es-modules/Series/Column/ColumnDataLabel.js","./node_modules/highcharts/es-modules/Series/Bar/BarSeries.js","./node_modules/highcharts/es-modules/Series/Pie/PiePoint.js","./node_modules/highcharts/es-modules/Series/Pie/PieSeriesDefaults.js","./node_modules/highcharts/es-modules/Series/Pie/PieSeries.js","./node_modules/highcharts/es-modules/Series/Pie/PieDataLabel.js","./node_modules/highcharts/es-modules/Extensions/OverlappingDataLabels.js","./node_modules/highcharts/es-modules/Core/Responsive.js","./node_modules/highcharts/es-modules/masters/highcharts.src.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport H from '../Core/Globals.js';\nvar deg2rad = H.deg2rad;\nimport Series from '../Core/Series/Series.js';\nimport U from '../Core/Utilities.js';\nvar fireEvent = U.fireEvent, isNumber = U.isNumber, pick = U.pick, relativeLength = U.relativeLength;\n/**\n * @private\n */\nvar CenteredUtilities;\n(function (CenteredUtilities) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Get the center of the pie based on the size and center options relative\n     * to the plot area. Borrowed by the polar and gauge series types.\n     *\n     * @private\n     * @function Highcharts.CenteredSeriesMixin.getCenter\n     */\n    function getCenter() {\n        var options = this.options, chart = this.chart, slicingRoom = 2 * (options.slicedOffset || 0), plotWidth = chart.plotWidth - 2 * slicingRoom, plotHeight = chart.plotHeight - 2 * slicingRoom, centerOption = options.center, smallestSize = Math.min(plotWidth, plotHeight), thickness = options.thickness;\n        var handleSlicingRoom, size = options.size, innerSize = options.innerSize || 0, i, value;\n        if (typeof size === 'string') {\n            size = parseFloat(size);\n        }\n        if (typeof innerSize === 'string') {\n            innerSize = parseFloat(innerSize);\n        }\n        var positions = [\n            pick(centerOption[0], '50%'),\n            pick(centerOption[1], '50%'),\n            // Prevent from negative values\n            pick(size && size < 0 ? void 0 : options.size, '100%'),\n            pick(innerSize && innerSize < 0 ? void 0 : options.innerSize || 0, '0%')\n        ];\n        // No need for inner size in angular (gauges) series but still required\n        // for pie series\n        if (chart.angular && !(this instanceof Series)) {\n            positions[3] = 0;\n        }\n        for (i = 0; i < 4; ++i) {\n            value = positions[i];\n            handleSlicingRoom = i < 2 || (i === 2 && /%$/.test(value));\n            // i == 0: centerX, relative to width\n            // i == 1: centerY, relative to height\n            // i == 2: size, relative to smallestSize\n            // i == 3: innerSize, relative to size\n            positions[i] = relativeLength(value, [plotWidth, plotHeight, smallestSize, positions[2]][i]) + (handleSlicingRoom ? slicingRoom : 0);\n        }\n        // innerSize cannot be larger than size (#3632)\n        if (positions[3] > positions[2]) {\n            positions[3] = positions[2];\n        }\n        // thickness overrides innerSize, need to be less than pie size (#6647)\n        if (isNumber(thickness) &&\n            thickness * 2 < positions[2] && thickness > 0) {\n            positions[3] = positions[2] - thickness * 2;\n        }\n        fireEvent(this, 'afterGetCenter', { positions: positions });\n        return positions;\n    }\n    CenteredUtilities.getCenter = getCenter;\n    /**\n     * getStartAndEndRadians - Calculates start and end angles in radians.\n     * Used in series types such as pie and sunburst.\n     *\n     * @private\n     * @function Highcharts.CenteredSeriesMixin.getStartAndEndRadians\n     *\n     * @param {number} [start]\n     *        Start angle in degrees.\n     *\n     * @param {number} [end]\n     *        Start angle in degrees.\n     *\n     * @return {Highcharts.RadianAngles}\n     *         Returns an object containing start and end angles as radians.\n     */\n    function getStartAndEndRadians(start, end) {\n        var startAngle = isNumber(start) ? start : 0, // must be a number\n        endAngle = ((isNumber(end) && // must be a number\n            end > startAngle && // must be larger than the start angle\n            // difference must be less than 360 degrees\n            (end - startAngle) < 360) ?\n            end :\n            startAngle + 360), correction = -90;\n        return {\n            start: deg2rad * (startAngle + correction),\n            end: deg2rad * (endAngle + correction)\n        };\n    }\n    CenteredUtilities.getStartAndEndRadians = getStartAndEndRadians;\n})(CenteredUtilities || (CenteredUtilities = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default CenteredUtilities;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * @private\n * @interface Highcharts.RadianAngles\n */ /**\n* @name Highcharts.RadianAngles#end\n* @type {number}\n*/ /**\n* @name Highcharts.RadianAngles#start\n* @type {number}\n*/\n''; // keeps doclets above in JS file\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport H from '../../Globals.js';\nvar isFirefox = H.isFirefox, isMS = H.isMS, isWebKit = H.isWebKit, win = H.win;\nimport SVGElement from '../SVG/SVGElement.js';\nimport U from '../../Utilities.js';\nvar css = U.css, defined = U.defined, extend = U.extend, pick = U.pick, pInt = U.pInt;\n/* *\n *\n *  Class\n *\n * */\n/* eslint-disable valid-jsdoc */\nvar HTMLElement = /** @class */ (function (_super) {\n    __extends(HTMLElement, _super);\n    function HTMLElement() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    /**\n     * Modifies SVGElement to support HTML elements.\n     * @private\n     */\n    HTMLElement.compose = function (SVGElementClass) {\n        if (HTMLElement.composedClasses.indexOf(SVGElementClass) === -1) {\n            HTMLElement.composedClasses.push(SVGElementClass);\n            var htmlElementProto = HTMLElement.prototype, svgElementProto = SVGElementClass.prototype;\n            svgElementProto.getSpanCorrection = htmlElementProto\n                .getSpanCorrection;\n            svgElementProto.htmlCss = htmlElementProto.htmlCss;\n            svgElementProto.htmlGetBBox = htmlElementProto.htmlGetBBox;\n            svgElementProto.htmlUpdateTransform = htmlElementProto\n                .htmlUpdateTransform;\n            svgElementProto.setSpanRotation = htmlElementProto.setSpanRotation;\n        }\n        return SVGElementClass;\n    };\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Get the correction in X and Y positioning as the element is rotated.\n     * @private\n     */\n    HTMLElement.prototype.getSpanCorrection = function (width, baseline, alignCorrection) {\n        this.xCorr = -width * alignCorrection;\n        this.yCorr = -baseline;\n    };\n    /**\n     * Apply CSS to HTML elements. This is used in text within SVG rendering and\n     * by the VML renderer\n     * @private\n     */\n    HTMLElement.prototype.htmlCss = function (styles) {\n        var wrapper = this, element = wrapper.element, \n        // When setting or unsetting the width style, we need to update\n        // transform (#8809)\n        isSettingWidth = (element.tagName === 'SPAN' &&\n            styles &&\n            'width' in styles), textWidth = pick(isSettingWidth && styles.width, void 0);\n        var doTransform;\n        if (isSettingWidth) {\n            delete styles.width;\n            wrapper.textWidth = textWidth;\n            doTransform = true;\n        }\n        if (styles && styles.textOverflow === 'ellipsis') {\n            styles.whiteSpace = 'nowrap';\n            styles.overflow = 'hidden';\n        }\n        wrapper.styles = extend(wrapper.styles, styles);\n        css(wrapper.element, styles);\n        // Now that all styles are applied, to the transform\n        if (doTransform) {\n            wrapper.htmlUpdateTransform();\n        }\n        return wrapper;\n    };\n    /**\n     * VML and useHTML method for calculating the bounding box based on offsets.\n     */\n    HTMLElement.prototype.htmlGetBBox = function () {\n        var wrapper = this, element = wrapper.element;\n        return {\n            x: element.offsetLeft,\n            y: element.offsetTop,\n            width: element.offsetWidth,\n            height: element.offsetHeight\n        };\n    };\n    /**\n     * VML override private method to update elements based on internal\n     * properties based on SVG transform.\n     * @private\n     */\n    HTMLElement.prototype.htmlUpdateTransform = function () {\n        // aligning non added elements is expensive\n        if (!this.added) {\n            this.alignOnAdd = true;\n            return;\n        }\n        var wrapper = this, renderer = wrapper.renderer, elem = wrapper.element, translateX = wrapper.translateX || 0, translateY = wrapper.translateY || 0, x = wrapper.x || 0, y = wrapper.y || 0, align = wrapper.textAlign || 'left', alignCorrection = {\n            left: 0, center: 0.5, right: 1\n        }[align], styles = wrapper.styles, whiteSpace = styles && styles.whiteSpace;\n        /** @private */\n        function getTextPxLength() {\n            if (wrapper.textPxLength) {\n                return wrapper.textPxLength;\n            }\n            // Reset multiline/ellipsis in order to read width (#4928,\n            // #5417)\n            css(elem, {\n                width: '',\n                whiteSpace: whiteSpace || 'nowrap'\n            });\n            return elem.offsetWidth;\n        }\n        // apply translate\n        css(elem, {\n            marginLeft: translateX,\n            marginTop: translateY\n        });\n        if (!renderer.styledMode && wrapper.shadows) { // used in labels/tooltip\n            wrapper.shadows.forEach(function (shadow) {\n                css(shadow, {\n                    marginLeft: translateX + 1,\n                    marginTop: translateY + 1\n                });\n            });\n        }\n        // apply inversion\n        if (wrapper.inverted) { // wrapper is a group\n            [].forEach.call(elem.childNodes, function (child) {\n                renderer.invertChild(child, elem);\n            });\n        }\n        if (elem.tagName === 'SPAN') {\n            var rotation = wrapper.rotation, textWidth = wrapper.textWidth && pInt(wrapper.textWidth), currentTextTransform = [\n                rotation,\n                align,\n                elem.innerHTML,\n                wrapper.textWidth,\n                wrapper.textAlign\n            ].join(',');\n            var baseline = void 0, hasBoxWidthChanged = false;\n            // Update textWidth. Use the memoized textPxLength if possible, to\n            // avoid the getTextPxLength function using elem.offsetWidth.\n            // Calling offsetWidth affects rendering time as it forces layout\n            // (#7656).\n            if (textWidth !== wrapper.oldTextWidth) { // #983, #1254\n                var textPxLength = getTextPxLength();\n                if (((textWidth > wrapper.oldTextWidth) ||\n                    textPxLength > textWidth) && (\n                // Only set the width if the text is able to word-wrap,\n                // or text-overflow is ellipsis (#9537)\n                /[ \\-]/.test(elem.textContent || elem.innerText) ||\n                    elem.style.textOverflow === 'ellipsis')) {\n                    css(elem, {\n                        width: (textPxLength > textWidth) || rotation ?\n                            textWidth + 'px' :\n                            'auto',\n                        display: 'block',\n                        whiteSpace: whiteSpace || 'normal' // #3331\n                    });\n                    wrapper.oldTextWidth = textWidth;\n                    hasBoxWidthChanged = true; // #8159\n                }\n            }\n            wrapper.hasBoxWidthChanged = hasBoxWidthChanged; // #8159\n            // Do the calculations and DOM access only if properties changed\n            if (currentTextTransform !== wrapper.cTT) {\n                baseline = renderer.fontMetrics(elem.style.fontSize, elem).b;\n                // Renderer specific handling of span rotation, but only if we\n                // have something to update.\n                if (defined(rotation) &&\n                    ((rotation !== (wrapper.oldRotation || 0)) ||\n                        (align !== wrapper.oldAlign))) {\n                    wrapper.setSpanRotation(rotation, alignCorrection, baseline);\n                }\n                wrapper.getSpanCorrection(\n                // Avoid elem.offsetWidth if we can, it affects rendering\n                // time heavily (#7656)\n                ((!defined(rotation) && wrapper.textPxLength) || // #7920\n                    elem.offsetWidth), baseline, alignCorrection, rotation, align);\n            }\n            // apply position with correction\n            css(elem, {\n                left: (x + (wrapper.xCorr || 0)) + 'px',\n                top: (y + (wrapper.yCorr || 0)) + 'px'\n            });\n            // record current text transform\n            wrapper.cTT = currentTextTransform;\n            wrapper.oldRotation = rotation;\n            wrapper.oldAlign = align;\n        }\n    };\n    /**\n     * Set the rotation of an individual HTML span.\n     * @private\n     */\n    HTMLElement.prototype.setSpanRotation = function (rotation, alignCorrection, baseline) {\n        var getTransformKey = function () { return (isMS &&\n            !/Edge/.test(win.navigator.userAgent) ?\n            '-ms-transform' :\n            isWebKit ?\n                '-webkit-transform' :\n                isFirefox ?\n                    'MozTransform' :\n                    win.opera ?\n                        '-o-transform' :\n                        void 0); };\n        var rotationStyle = {}, cssTransformKey = getTransformKey();\n        if (cssTransformKey) {\n            rotationStyle[cssTransformKey] = rotationStyle.transform =\n                'rotate(' + rotation + 'deg)';\n            rotationStyle[cssTransformKey + (isFirefox ? 'Origin' : '-origin')] = rotationStyle.transformOrigin =\n                (alignCorrection * 100) + '% ' + baseline + 'px';\n            css(this.element, rotationStyle);\n        }\n    };\n    /* *\n     *\n     *  Static Properties\n     *\n     * */\n    HTMLElement.composedClasses = [];\n    return HTMLElement;\n}(SVGElement));\n/* *\n *\n *  Default Export\n *\n * */\nexport default HTMLElement;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport AST from './AST.js';\nimport SVGElement from '../SVG/SVGElement.js';\nimport SVGRenderer from '../SVG/SVGRenderer.js';\nimport U from '../../Utilities.js';\nvar attr = U.attr, createElement = U.createElement, extend = U.extend, pick = U.pick;\n/* *\n *\n *  Class\n *\n * */\n/* eslint-disable valid-jsdoc */\n// Extend SvgRenderer for useHTML option.\nvar HTMLRenderer = /** @class */ (function (_super) {\n    __extends(HTMLRenderer, _super);\n    function HTMLRenderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    /** @private */\n    HTMLRenderer.compose = function (SVGRendererClass) {\n        if (HTMLRenderer.composedClasses.indexOf(SVGRendererClass) === -1) {\n            HTMLRenderer.composedClasses.push(SVGRendererClass);\n            var htmlRendererProto = HTMLRenderer.prototype, svgRendererProto = SVGRendererClass.prototype;\n            svgRendererProto.html = htmlRendererProto.html;\n        }\n        return SVGRendererClass;\n    };\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Create HTML text node. This is used by the VML renderer as well as the\n     * SVG renderer through the useHTML option.\n     *\n     * @private\n     * @function Highcharts.SVGRenderer#html\n     *\n     * @param {string} str\n     * The text of (subset) HTML to draw.\n     *\n     * @param {number} x\n     * The x position of the text's lower left corner.\n     *\n     * @param {number} y\n     * The y position of the text's lower left corner.\n     *\n     * @return {Highcharts.HTMLDOMElement}\n     * HTML element.\n     */\n    HTMLRenderer.prototype.html = function (str, x, y) {\n        var wrapper = this.createElement('span'), element = wrapper.element, renderer = wrapper.renderer, isSVG = renderer.isSVG, addSetters = function (gWrapper, style) {\n            // These properties are set as attributes on the SVG group, and\n            // as identical CSS properties on the div. (#3542)\n            ['opacity', 'visibility'].forEach(function (prop) {\n                gWrapper[prop + 'Setter'] = function (value, key, elem) {\n                    var styleObject = gWrapper.div ?\n                        gWrapper.div.style :\n                        style;\n                    SVGElement.prototype[prop + 'Setter']\n                        .call(this, value, key, elem);\n                    if (styleObject) {\n                        styleObject[key] = value;\n                    }\n                };\n            });\n            gWrapper.addedSetters = true;\n        };\n        // Text setter\n        wrapper.textSetter = function (value) {\n            if (value !== this.textStr) {\n                delete this.bBox;\n                delete this.oldTextWidth;\n                AST.setElementHTML(this.element, pick(value, ''));\n                this.textStr = value;\n                wrapper.doTransform = true;\n            }\n        };\n        // Add setters for the element itself (#4938)\n        if (isSVG) { // #4938, only for HTML within SVG\n            addSetters(wrapper, wrapper.element.style);\n        }\n        // Various setters which rely on update transform\n        wrapper.xSetter =\n            wrapper.ySetter =\n                wrapper.alignSetter =\n                    wrapper.rotationSetter =\n                        function (value, key) {\n                            if (key === 'align') {\n                                // Do not overwrite the SVGElement.align method. Same as VML.\n                                wrapper.alignValue = wrapper.textAlign = value;\n                            }\n                            else {\n                                wrapper[key] = value;\n                            }\n                            wrapper.doTransform = true;\n                        };\n        // Runs at the end of .attr()\n        wrapper.afterSetters = function () {\n            // Update transform. Do this outside the loop to prevent redundant\n            // updating for batch setting of attributes.\n            if (this.doTransform) {\n                this.htmlUpdateTransform();\n                this.doTransform = false;\n            }\n        };\n        // Set the default attributes\n        wrapper\n            .attr({\n            text: str,\n            x: Math.round(x),\n            y: Math.round(y)\n        })\n            .css({\n            position: 'absolute'\n        });\n        if (!renderer.styledMode) {\n            wrapper.css({\n                fontFamily: this.style.fontFamily,\n                fontSize: this.style.fontSize\n            });\n        }\n        // Keep the whiteSpace style outside the wrapper.styles collection\n        element.style.whiteSpace = 'nowrap';\n        // Use the HTML specific .css method\n        wrapper.css = wrapper.htmlCss;\n        // This is specific for HTML within SVG\n        if (isSVG) {\n            wrapper.add = function (svgGroupWrapper) {\n                var container = renderer.box.parentNode, parents = [];\n                var htmlGroup, parentGroup;\n                this.parentGroup = svgGroupWrapper;\n                // Create a mock group to hold the HTML elements\n                if (svgGroupWrapper) {\n                    htmlGroup = svgGroupWrapper.div;\n                    if (!htmlGroup) {\n                        // Read the parent chain into an array and read from top\n                        // down\n                        parentGroup = svgGroupWrapper;\n                        while (parentGroup) {\n                            parents.push(parentGroup);\n                            // Move up to the next parent group\n                            parentGroup = parentGroup.parentGroup;\n                        }\n                        // Ensure dynamically updating position when any parent\n                        // is translated\n                        parents.reverse().forEach(function (parentGroup) {\n                            var cls = attr(parentGroup.element, 'class');\n                            /**\n                             * Common translate setter for X and Y on the HTML\n                             * group. Reverted the fix for #6957 du to\n                             * positioning problems and offline export (#7254,\n                             * #7280, #7529)\n                             * @private\n                             * @param {*} value\n                             * @param {string} key\n                                                     */\n                            function translateSetter(value, key) {\n                                parentGroup[key] = value;\n                                if (key === 'translateX') {\n                                    htmlGroupStyle.left = value + 'px';\n                                }\n                                else {\n                                    htmlGroupStyle.top = value + 'px';\n                                }\n                                parentGroup.doTransform = true;\n                            }\n                            // Create a HTML div and append it to the parent div\n                            // to emulate the SVG group structure\n                            var parentGroupStyles = parentGroup.styles || {};\n                            htmlGroup =\n                                parentGroup.div =\n                                    parentGroup.div || createElement('div', cls ? { className: cls } : void 0, {\n                                        position: 'absolute',\n                                        left: (parentGroup.translateX || 0) + 'px',\n                                        top: (parentGroup.translateY || 0) + 'px',\n                                        display: parentGroup.display,\n                                        opacity: parentGroup.opacity,\n                                        cursor: parentGroupStyles.cursor,\n                                        pointerEvents: (\n                                        // #5595\n                                        parentGroupStyles.pointerEvents),\n                                        visibility: parentGroup.visibility\n                                        // the top group is appended to container\n                                    }, htmlGroup || container);\n                            // Shortcut\n                            var htmlGroupStyle = htmlGroup.style;\n                            // Set listeners to update the HTML div's position\n                            // whenever the SVG group position is changed.\n                            extend(parentGroup, {\n                                // (#7287) Pass htmlGroup to use\n                                // the related group\n                                classSetter: (function (htmlGroup) {\n                                    return function (value) {\n                                        this.element.setAttribute('class', value);\n                                        htmlGroup.className = value;\n                                    };\n                                }(htmlGroup)),\n                                on: function () {\n                                    if (parents[0].div) { // #6418\n                                        wrapper.on.apply({\n                                            element: parents[0].div,\n                                            onEvents: parentGroup.onEvents\n                                        }, arguments);\n                                    }\n                                    return parentGroup;\n                                },\n                                translateXSetter: translateSetter,\n                                translateYSetter: translateSetter\n                            });\n                            if (!parentGroup.addedSetters) {\n                                addSetters(parentGroup);\n                            }\n                        });\n                    }\n                }\n                else {\n                    htmlGroup = container;\n                }\n                htmlGroup.appendChild(element);\n                // Shared with VML:\n                wrapper.added = true;\n                if (wrapper.alignOnAdd) {\n                    wrapper.htmlUpdateTransform();\n                }\n                return wrapper;\n            };\n        }\n        return wrapper;\n    };\n    /* *\n     *\n     *  Static Properties\n     *\n     * */\n    HTMLRenderer.composedClasses = [];\n    return HTMLRenderer;\n}(SVGRenderer));\n/* *\n *\n *  Default Export\n *\n * */\nexport default HTMLRenderer;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport U from '../Utilities.js';\nvar addEvent = U.addEvent, getMagnitude = U.getMagnitude, normalizeTickInterval = U.normalizeTickInterval, timeUnits = U.timeUnits;\n/* *\n *\n *  Composition\n *\n * */\n/* eslint-disable valid-jsdoc */\nvar DateTimeAxis;\n(function (DateTimeAxis) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    var composedClasses = [];\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Extends axis class with date and time support.\n     * @private\n     */\n    function compose(AxisClass) {\n        if (composedClasses.indexOf(AxisClass) === -1) {\n            composedClasses.push(AxisClass);\n            AxisClass.keepProps.push('dateTime');\n            var axisProto = AxisClass.prototype;\n            axisProto.getTimeTicks = getTimeTicks;\n            addEvent(AxisClass, 'init', onInit);\n        }\n        return AxisClass;\n    }\n    DateTimeAxis.compose = compose;\n    /**\n     * Set the tick positions to a time unit that makes sense, for example\n     * on the first of each month or on every Monday. Return an array with\n     * the time positions. Used in datetime axes as well as for grouping\n     * data on a datetime axis.\n     *\n     * @private\n     * @function Highcharts.Axis#getTimeTicks\n     * @param {Highcharts.TimeNormalizeObject} normalizedInterval\n     * The interval in axis values (ms) and thecount.\n     * @param {number} min\n     * The minimum in axis values.\n     * @param {number} max\n     * The maximum in axis values.\n     */\n    function getTimeTicks() {\n        return this.chart.time.getTimeTicks.apply(this.chart.time, arguments);\n    }\n    /**\n     * @private\n     */\n    function onInit(e) {\n        var axis = this;\n        var options = e.userOptions;\n        if (options.type !== 'datetime') {\n            axis.dateTime = void 0;\n            return;\n        }\n        if (!axis.dateTime) {\n            axis.dateTime = new Additions(axis);\n        }\n    }\n    /* *\n     *\n     *  Classes\n     *\n     * */\n    var Additions = /** @class */ (function () {\n        /* *\n         *\n         *  Constructors\n         *\n         * */\n        function Additions(axis) {\n            this.axis = axis;\n        }\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get a normalized tick interval for dates. Returns a configuration\n         * object with unit range (interval), count and name. Used to prepare\n         * data for `getTimeTicks`. Previously this logic was part of\n         * getTimeTicks, but as `getTimeTicks` now runs of segments in stock\n         * charts, the normalizing logic was extracted in order to prevent it\n         * for running over again for each segment having the same interval.\n         * #662, #697.\n         * @private\n         */\n        Additions.prototype.normalizeTimeTickInterval = function (tickInterval, unitsOption) {\n            var units = (unitsOption || [[\n                    // unit name\n                    'millisecond',\n                    // allowed multiples\n                    [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]\n                ], [\n                    'second',\n                    [1, 2, 5, 10, 15, 30]\n                ], [\n                    'minute',\n                    [1, 2, 5, 10, 15, 30]\n                ], [\n                    'hour',\n                    [1, 2, 3, 4, 6, 8, 12]\n                ], [\n                    'day',\n                    [1, 2]\n                ], [\n                    'week',\n                    [1, 2]\n                ], [\n                    'month',\n                    [1, 2, 3, 4, 6]\n                ], [\n                    'year',\n                    null\n                ]]);\n            var unit = units[units.length - 1], // default unit is years\n            interval = timeUnits[unit[0]], multiples = unit[1], i;\n            // loop through the units to find the one that best fits the\n            // tickInterval\n            for (i = 0; i < units.length; i++) {\n                unit = units[i];\n                interval = timeUnits[unit[0]];\n                multiples = unit[1];\n                if (units[i + 1]) {\n                    // lessThan is in the middle between the highest multiple\n                    // and the next unit.\n                    var lessThan = (interval *\n                        multiples[multiples.length - 1] +\n                        timeUnits[units[i + 1][0]]) / 2;\n                    // break and keep the current unit\n                    if (tickInterval <= lessThan) {\n                        break;\n                    }\n                }\n            }\n            // prevent 2.5 years intervals, though 25, 250 etc. are allowed\n            if (interval === timeUnits.year && tickInterval < 5 * interval) {\n                multiples = [1, 2, 5];\n            }\n            // get the count\n            var count = normalizeTickInterval(tickInterval / interval, multiples, unit[0] === 'year' ? // #1913, #2360\n                Math.max(getMagnitude(tickInterval / interval), 1) :\n                1);\n            return {\n                unitRange: interval,\n                count: count,\n                unitName: unit[0]\n            };\n        };\n        /**\n         * Get the best date format for a specific X value based on the closest\n         * point range on the axis.\n         *\n         * @private\n         */\n        Additions.prototype.getXDateFormat = function (x, dateTimeLabelFormats) {\n            var axis = this.axis, time = axis.chart.time;\n            return axis.closestPointRange ?\n                time.getDateFormat(axis.closestPointRange, x, axis.options.startOfWeek, dateTimeLabelFormats) ||\n                    // #2546, 2581\n                    time.resolveDTLFormat(dateTimeLabelFormats.year).main :\n                time.resolveDTLFormat(dateTimeLabelFormats.day).main;\n        };\n        return Additions;\n    }());\n    DateTimeAxis.Additions = Additions;\n})(DateTimeAxis || (DateTimeAxis = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default DateTimeAxis;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport U from '../Utilities.js';\nvar addEvent = U.addEvent, getMagnitude = U.getMagnitude, normalizeTickInterval = U.normalizeTickInterval, pick = U.pick;\n/* *\n *\n *  Class\n *\n * */\n/**\n * @private\n */\nvar LogarithmicAxis;\n(function (LogarithmicAxis) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    var composedClasses = [];\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Provides logarithmic support for axes.\n     * @private\n     */\n    function compose(AxisClass) {\n        if (composedClasses.indexOf(AxisClass) === -1) {\n            composedClasses.push(AxisClass);\n            AxisClass.keepProps.push('logarithmic');\n            addEvent(AxisClass, 'init', onInit);\n            addEvent(AxisClass, 'afterInit', onAfterInit);\n        }\n        return AxisClass;\n    }\n    LogarithmicAxis.compose = compose;\n    /**\n     * @private\n     */\n    function onInit(e) {\n        var axis = this;\n        var options = e.userOptions;\n        var logarithmic = axis.logarithmic;\n        if (options.type !== 'logarithmic') {\n            axis.logarithmic = void 0;\n        }\n        else {\n            if (!logarithmic) {\n                logarithmic = axis.logarithmic = new Additions(axis);\n            }\n        }\n    }\n    /**\n     * @private\n     */\n    function onAfterInit() {\n        var axis = this;\n        var log = axis.logarithmic;\n        // extend logarithmic axis\n        if (log) {\n            axis.lin2val = function (num) {\n                return log.lin2log(num);\n            };\n            axis.val2lin = function (num) {\n                return log.log2lin(num);\n            };\n        }\n    }\n    /* *\n     *\n     *  Class\n     *\n     * */\n    /**\n     * Provides logarithmic support for axes.\n     * @private\n     * @class\n     */\n    var Additions = /** @class */ (function () {\n        /* *\n        *\n        *  Constructors\n        *\n        * */\n        function Additions(axis) {\n            this.axis = axis;\n        }\n        /* *\n        *\n        *  Functions\n        *\n        * */\n        /**\n         * Set the tick positions of a logarithmic axis.\n         */\n        Additions.prototype.getLogTickPositions = function (interval, min, max, minor) {\n            var log = this;\n            var axis = log.axis;\n            var axisLength = axis.len;\n            var options = axis.options;\n            // Since we use this method for both major and minor ticks,\n            // use a local variable and return the result\n            var positions = [];\n            // Reset\n            if (!minor) {\n                log.minorAutoInterval = void 0;\n            }\n            // First case: All ticks fall on whole logarithms: 1, 10, 100 etc.\n            if (interval >= 0.5) {\n                interval = Math.round(interval);\n                positions = axis.getLinearTickPositions(interval, min, max);\n                // Second case: We need intermediary ticks. For example\n                // 1, 2, 4, 6, 8, 10, 20, 40 etc.\n            }\n            else if (interval >= 0.08) {\n                var roundedMin = Math.floor(min);\n                var intermediate = void 0, i = void 0, j = void 0, len = void 0, pos = void 0, lastPos = void 0, break2 = void 0;\n                if (interval > 0.3) {\n                    intermediate = [1, 2, 4];\n                    // 0.2 equals five minor ticks per 1, 10, 100 etc\n                }\n                else if (interval > 0.15) {\n                    intermediate = [1, 2, 4, 6, 8];\n                }\n                else { // 0.1 equals ten minor ticks per 1, 10, 100 etc\n                    intermediate = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n                }\n                for (i = roundedMin; i < max + 1 && !break2; i++) {\n                    len = intermediate.length;\n                    for (j = 0; j < len && !break2; j++) {\n                        pos = log.log2lin(log.lin2log(i) * intermediate[j]);\n                        // #1670, lastPos is #3113\n                        if (pos > min &&\n                            (!minor || lastPos <= max) &&\n                            typeof lastPos !== 'undefined') {\n                            positions.push(lastPos);\n                        }\n                        if (lastPos > max) {\n                            break2 = true;\n                        }\n                        lastPos = pos;\n                    }\n                }\n                // Third case: We are so deep in between whole logarithmic values,\n                // that we might as well handle the tick positions like a linear\n                // axis. For example 1.01, 1.02, 1.03, 1.04.\n            }\n            else {\n                var realMin = log.lin2log(min), realMax = log.lin2log(max), tickIntervalOption = minor ?\n                    axis.getMinorTickInterval() :\n                    options.tickInterval, filteredTickIntervalOption = tickIntervalOption === 'auto' ?\n                    null :\n                    tickIntervalOption, tickPixelIntervalOption = options.tickPixelInterval / (minor ? 5 : 1), totalPixelLength = minor ?\n                    axisLength / axis.tickPositions.length :\n                    axisLength;\n                interval = pick(filteredTickIntervalOption, log.minorAutoInterval, (realMax - realMin) *\n                    tickPixelIntervalOption / (totalPixelLength || 1));\n                interval = normalizeTickInterval(interval);\n                positions = axis.getLinearTickPositions(interval, realMin, realMax).map(log.log2lin);\n                if (!minor) {\n                    log.minorAutoInterval = interval / 5;\n                }\n            }\n            // Set the axis-level tickInterval variable\n            if (!minor) {\n                axis.tickInterval = interval;\n            }\n            return positions;\n        };\n        Additions.prototype.lin2log = function (num) {\n            return Math.pow(10, num);\n        };\n        Additions.prototype.log2lin = function (num) {\n            return Math.log(num) / Math.LN10;\n        };\n        return Additions;\n    }());\n    LogarithmicAxis.Additions = Additions;\n})(LogarithmicAxis || (LogarithmicAxis = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default LogarithmicAxis;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport U from '../../Utilities.js';\nvar erase = U.erase, extend = U.extend, isNumber = U.isNumber;\n/* *\n *\n *  Composition\n *\n * */\nvar PlotLineOrBandAxis;\n(function (PlotLineOrBandAxis) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    var composedClasses = [];\n    /* *\n     *\n     *  Variables\n     *\n     * */\n    var PlotLineOrBandClass;\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * @private\n     */\n    function compose(PlotLineOrBandType, AxisClass) {\n        if (!PlotLineOrBandClass) {\n            PlotLineOrBandClass = PlotLineOrBandType;\n        }\n        if (composedClasses.indexOf(AxisClass) === -1) {\n            composedClasses.push(AxisClass);\n            extend(AxisClass.prototype, Additions.prototype);\n        }\n        return AxisClass;\n    }\n    PlotLineOrBandAxis.compose = compose;\n    /* *\n     *\n     *  Classes\n     *\n     * */\n    /**\n     * Object with members for extending the Axis prototype.\n     * @private\n     */\n    var Additions = /** @class */ (function () {\n        function Additions() {\n        }\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * Internal function to create the SVG path definition for a plot band.\n         *\n         * @function Highcharts.Axis#getPlotBandPath\n         *\n         * @param {number} from\n         * The axis value to start from.\n         *\n         * @param {number} to\n         * The axis value to end on.\n         *\n         * @param {Highcharts.AxisPlotBandsOptions|Highcharts.AxisPlotLinesOptions} options\n         * The plotBand or plotLine configuration object.\n         *\n         * @return {Highcharts.SVGPathArray}\n         * The SVG path definition in array form.\n         */\n        Additions.prototype.getPlotBandPath = function (from, to, options) {\n            if (options === void 0) { options = this.options; }\n            var toPath = this.getPlotLinePath({\n                value: to,\n                force: true,\n                acrossPanes: options.acrossPanes\n            }), result = [], horiz = this.horiz, outside = !isNumber(this.min) ||\n                !isNumber(this.max) ||\n                (from < this.min && to < this.min) ||\n                (from > this.max && to > this.max);\n            var path = this.getPlotLinePath({\n                value: from,\n                force: true,\n                acrossPanes: options.acrossPanes\n            }), i, \n            // #4964 check if chart is inverted or plotband is on yAxis\n            plus = 1, isFlat;\n            if (path && toPath) {\n                // Flat paths don't need labels (#3836)\n                if (outside) {\n                    isFlat = path.toString() === toPath.toString();\n                    plus = 0;\n                }\n                // Go over each subpath - for panes in Highcharts Stock\n                for (i = 0; i < path.length; i += 2) {\n                    var pathStart = path[i], pathEnd = path[i + 1], toPathStart = toPath[i], toPathEnd = toPath[i + 1];\n                    // Type checking all affected path segments. Consider\n                    // something smarter.\n                    if ((pathStart[0] === 'M' || pathStart[0] === 'L') &&\n                        (pathEnd[0] === 'M' || pathEnd[0] === 'L') &&\n                        (toPathStart[0] === 'M' || toPathStart[0] === 'L') &&\n                        (toPathEnd[0] === 'M' || toPathEnd[0] === 'L')) {\n                        // Add 1 pixel when coordinates are the same\n                        if (horiz && toPathStart[1] === pathStart[1]) {\n                            toPathStart[1] += plus;\n                            toPathEnd[1] += plus;\n                        }\n                        else if (!horiz && toPathStart[2] === pathStart[2]) {\n                            toPathStart[2] += plus;\n                            toPathEnd[2] += plus;\n                        }\n                        result.push(['M', pathStart[1], pathStart[2]], ['L', pathEnd[1], pathEnd[2]], ['L', toPathEnd[1], toPathEnd[2]], ['L', toPathStart[1], toPathStart[2]], ['Z']);\n                    }\n                    result.isFlat = isFlat;\n                }\n            }\n            else { // outside the axis area\n                path = null;\n            }\n            return result;\n        };\n        /**\n         * Add a plot band after render time.\n         *\n         * @sample highcharts/members/axis-addplotband/\n         *         Toggle the plot band from a button\n         *\n         * @function Highcharts.Axis#addPlotBand\n         *\n         * @param {Highcharts.AxisPlotBandsOptions} options\n         * A configuration object for the plot band, as defined in\n         * [xAxis.plotBands](https://api.highcharts.com/highcharts/xAxis.plotBands).\n         *\n         * @return {Highcharts.PlotLineOrBand|undefined}\n         * The added plot band.\n         */\n        Additions.prototype.addPlotBand = function (options) {\n            return this.addPlotBandOrLine(options, 'plotBands');\n        };\n        /**\n         * Add a plot line after render time.\n         *\n         * @sample highcharts/members/axis-addplotline/\n         *         Toggle the plot line from a button\n         *\n         * @function Highcharts.Axis#addPlotLine\n         *\n         * @param {Highcharts.AxisPlotLinesOptions} options\n         * A configuration object for the plot line, as defined in\n         * [xAxis.plotLines](https://api.highcharts.com/highcharts/xAxis.plotLines).\n         *\n         * @return {Highcharts.PlotLineOrBand|undefined}\n         * The added plot line.\n         */\n        Additions.prototype.addPlotLine = function (options) {\n            return this.addPlotBandOrLine(options, 'plotLines');\n        };\n        /**\n         * Add a plot band or plot line after render time. Called from\n         * addPlotBand and addPlotLine internally.\n         *\n         * @private\n         * @function Highcharts.Axis#addPlotBandOrLine\n         * @param {Highcharts.AxisPlotBandsOptions|Highcharts.AxisPlotLinesOptions} options\n         * The plotBand or plotLine configuration object.\n         */\n        Additions.prototype.addPlotBandOrLine = function (options, coll) {\n            var _this = this;\n            var userOptions = this.userOptions;\n            var obj = new PlotLineOrBandClass(this, options);\n            if (this.visible) {\n                obj = obj.render();\n            }\n            if (obj) { // #2189\n                if (!this._addedPlotLB) {\n                    this._addedPlotLB = true;\n                    (userOptions.plotLines || [])\n                        .concat(userOptions.plotBands || [])\n                        .forEach(function (plotLineOptions) {\n                        _this.addPlotBandOrLine(plotLineOptions);\n                    });\n                }\n                // Add it to the user options for exporting and Axis.update\n                if (coll) {\n                    // Workaround Microsoft/TypeScript issue #32693\n                    var updatedOptions = (userOptions[coll] || []);\n                    updatedOptions.push(options);\n                    userOptions[coll] = updatedOptions;\n                }\n                this.plotLinesAndBands.push(obj);\n            }\n            return obj;\n        };\n        /**\n         * Remove a plot band or plot line from the chart by id. Called\n         * internally from `removePlotBand` and `removePlotLine`.\n         * @private\n         * @function Highcharts.Axis#removePlotBandOrLine\n         */\n        Additions.prototype.removePlotBandOrLine = function (id) {\n            var plotLinesAndBands = this.plotLinesAndBands, options = this.options, userOptions = this.userOptions;\n            if (plotLinesAndBands) { // #15639\n                var i_1 = plotLinesAndBands.length;\n                while (i_1--) {\n                    if (plotLinesAndBands[i_1].id === id) {\n                        plotLinesAndBands[i_1].destroy();\n                    }\n                }\n                ([\n                    options.plotLines || [],\n                    userOptions.plotLines || [],\n                    options.plotBands || [],\n                    userOptions.plotBands || []\n                ]).forEach(function (arr) {\n                    i_1 = arr.length;\n                    while (i_1--) {\n                        if ((arr[i_1] || {}).id === id) {\n                            erase(arr, arr[i_1]);\n                        }\n                    }\n                });\n            }\n        };\n        /**\n         * Remove a plot band by its id.\n         *\n         * @sample highcharts/members/axis-removeplotband/\n         *         Remove plot band by id\n         * @sample highcharts/members/axis-addplotband/\n         *         Toggle the plot band from a button\n         *\n         * @function Highcharts.Axis#removePlotBand\n         *\n         * @param {string} id\n         *        The plot band's `id` as given in the original configuration\n         *        object or in the `addPlotBand` option.\n         */\n        Additions.prototype.removePlotBand = function (id) {\n            this.removePlotBandOrLine(id);\n        };\n        /**\n         * Remove a plot line by its id.\n         *\n         * @sample highcharts/xaxis/plotlines-id/\n         *         Remove plot line by id\n         * @sample highcharts/members/axis-addplotline/\n         *         Toggle the plot line from a button\n         *\n         * @function Highcharts.Axis#removePlotLine\n         *\n         * @param {string} id\n         *        The plot line's `id` as given in the original configuration\n         *        object or in the `addPlotLine` option.\n         */\n        Additions.prototype.removePlotLine = function (id) {\n            this.removePlotBandOrLine(id);\n        };\n        return Additions;\n    }());\n})(PlotLineOrBandAxis || (PlotLineOrBandAxis = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default PlotLineOrBandAxis;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport PlotLineOrBandAxis from './PlotLineOrBandAxis.js';\nimport U from '../../Utilities.js';\nvar arrayMax = U.arrayMax, arrayMin = U.arrayMin, defined = U.defined, destroyObjectProperties = U.destroyObjectProperties, erase = U.erase, fireEvent = U.fireEvent, merge = U.merge, objectEach = U.objectEach, pick = U.pick;\n/* *\n *\n *  Class\n *\n * */\n/**\n * The object wrapper for plot lines and plot bands\n *\n * @class\n * @name Highcharts.PlotLineOrBand\n *\n * @param {Highcharts.Axis} axis\n * Related axis.\n *\n * @param {Highcharts.AxisPlotLinesOptions|Highcharts.AxisPlotBandsOptions} [options]\n * Options to use.\n */\nvar PlotLineOrBand = /** @class */ (function () {\n    /* *\n     *\n     *  Constructor\n     *\n     * */\n    function PlotLineOrBand(axis, options) {\n        this.axis = axis;\n        if (options) {\n            this.options = options;\n            this.id = options.id;\n        }\n    }\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    PlotLineOrBand.compose = function (AxisClass) {\n        return PlotLineOrBandAxis.compose(PlotLineOrBand, AxisClass);\n    };\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable no-invalid-this, valid-jsdoc */\n    /**\n     * Render the plot line or plot band. If it is already existing,\n     * move it.\n     * @private\n     * @function Highcharts.PlotLineOrBand#render\n     */\n    PlotLineOrBand.prototype.render = function () {\n        fireEvent(this, 'render');\n        var plotLine = this, axis = plotLine.axis, horiz = axis.horiz, log = axis.logarithmic, options = plotLine.options, color = options.color, zIndex = pick(options.zIndex, 0), events = options.events, groupAttribs = {}, renderer = axis.chart.renderer;\n        var optionsLabel = options.label, label = plotLine.label, to = options.to, from = options.from, value = options.value, svgElem = plotLine.svgElem, path = [], group;\n        var isBand = defined(from) && defined(to), isLine = defined(value), isNew = !svgElem, attribs = {\n            'class': 'highcharts-plot-' + (isBand ? 'band ' : 'line ') +\n                (options.className || '')\n        };\n        var groupName = isBand ? 'bands' : 'lines';\n        // logarithmic conversion\n        if (log) {\n            from = log.log2lin(from);\n            to = log.log2lin(to);\n            value = log.log2lin(value);\n        }\n        // Set the presentational attributes\n        if (!axis.chart.styledMode) {\n            if (isLine) {\n                attribs.stroke = color || \"#999999\" /* Palette.neutralColor40 */;\n                attribs['stroke-width'] = pick(options.width, 1);\n                if (options.dashStyle) {\n                    attribs.dashstyle =\n                        options.dashStyle;\n                }\n            }\n            else if (isBand) { // plot band\n                attribs.fill = color || \"#e6ebf5\" /* Palette.highlightColor10 */;\n                if (options.borderWidth) {\n                    attribs.stroke = options.borderColor;\n                    attribs['stroke-width'] = options.borderWidth;\n                }\n            }\n        }\n        // Grouping and zIndex\n        groupAttribs.zIndex = zIndex;\n        groupName += '-' + zIndex;\n        group = axis.plotLinesAndBandsGroups[groupName];\n        if (!group) {\n            axis.plotLinesAndBandsGroups[groupName] = group =\n                renderer.g('plot-' + groupName)\n                    .attr(groupAttribs).add();\n        }\n        // Create the path\n        if (isNew) {\n            /**\n             * SVG element of the plot line or band.\n             *\n             * @name Highcharts.PlotLineOrBand#svgElem\n             * @type {Highcharts.SVGElement}\n             */\n            plotLine.svgElem = svgElem = renderer\n                .path()\n                .attr(attribs)\n                .add(group);\n        }\n        // Set the path or return\n        if (isLine) {\n            path = axis.getPlotLinePath({\n                value: value,\n                lineWidth: svgElem.strokeWidth(),\n                acrossPanes: options.acrossPanes\n            });\n        }\n        else if (isBand) { // plot band\n            path = axis.getPlotBandPath(from, to, options);\n        }\n        else {\n            return;\n        }\n        // common for lines and bands\n        // Add events only if they were not added before.\n        if (!plotLine.eventsAdded && events) {\n            objectEach(events, function (event, eventType) {\n                svgElem.on(eventType, function (e) {\n                    events[eventType].apply(plotLine, [e]);\n                });\n            });\n            plotLine.eventsAdded = true;\n        }\n        if ((isNew || !svgElem.d) && path && path.length) {\n            svgElem.attr({ d: path });\n        }\n        else if (svgElem) {\n            if (path) {\n                svgElem.show();\n                svgElem.animate({ d: path });\n            }\n            else if (svgElem.d) {\n                svgElem.hide();\n                if (label) {\n                    plotLine.label = label = label.destroy();\n                }\n            }\n        }\n        // the plot band/line label\n        if (optionsLabel &&\n            (defined(optionsLabel.text) || defined(optionsLabel.formatter)) &&\n            path &&\n            path.length &&\n            axis.width > 0 &&\n            axis.height > 0 &&\n            !path.isFlat) {\n            // apply defaults\n            optionsLabel = merge({\n                align: horiz && isBand && 'center',\n                x: horiz ? !isBand && 4 : 10,\n                verticalAlign: !horiz && isBand && 'middle',\n                y: horiz ? isBand ? 16 : 10 : isBand ? 6 : -4,\n                rotation: horiz && !isBand && 90\n            }, optionsLabel);\n            this.renderLabel(optionsLabel, path, isBand, zIndex);\n        }\n        else if (label) { // move out of sight\n            label.hide();\n        }\n        // chainable\n        return plotLine;\n    };\n    /**\n     * Render and align label for plot line or band.\n     * @private\n     * @function Highcharts.PlotLineOrBand#renderLabel\n     */\n    PlotLineOrBand.prototype.renderLabel = function (optionsLabel, path, isBand, zIndex) {\n        var plotLine = this, axis = plotLine.axis, renderer = axis.chart.renderer;\n        var label = plotLine.label;\n        // add the SVG element\n        if (!label) {\n            /**\n             * SVG element of the label.\n             *\n             * @name Highcharts.PlotLineOrBand#label\n             * @type {Highcharts.SVGElement}\n             */\n            plotLine.label = label = renderer\n                .text(this.getLabelText(optionsLabel), 0, 0, optionsLabel.useHTML)\n                .attr({\n                align: optionsLabel.textAlign || optionsLabel.align,\n                rotation: optionsLabel.rotation,\n                'class': 'highcharts-plot-' + (isBand ? 'band' : 'line') +\n                    '-label ' + (optionsLabel.className || ''),\n                zIndex: zIndex\n            })\n                .add();\n            if (!axis.chart.styledMode) {\n                label.css(merge({\n                    textOverflow: 'ellipsis'\n                }, optionsLabel.style));\n            }\n        }\n        // get the bounding box and align the label\n        // #3000 changed to better handle choice between plotband or plotline\n        var xBounds = path.xBounds ||\n            [path[0][1], path[1][1], (isBand ? path[2][1] : path[0][1])];\n        var yBounds = path.yBounds ||\n            [path[0][2], path[1][2], (isBand ? path[2][2] : path[0][2])];\n        var x = arrayMin(xBounds);\n        var y = arrayMin(yBounds);\n        label.align(optionsLabel, false, {\n            x: x,\n            y: y,\n            width: arrayMax(xBounds) - x,\n            height: arrayMax(yBounds) - y\n        });\n        if (!label.alignValue || label.alignValue === 'left') {\n            var width = optionsLabel.clip ?\n                axis.width : axis.chart.chartWidth;\n            label.css({\n                width: (label.rotation === 90 ?\n                    axis.height - (label.alignAttr.y - axis.top) :\n                    width - (label.alignAttr.x - axis.left)) + 'px'\n            });\n        }\n        label.show(true);\n    };\n    /**\n     * Get label's text content.\n     * @private\n     * @function Highcharts.PlotLineOrBand#getLabelText\n     */\n    PlotLineOrBand.prototype.getLabelText = function (optionsLabel) {\n        return defined(optionsLabel.formatter) ?\n            optionsLabel.formatter\n                .call(this) :\n            optionsLabel.text;\n    };\n    /**\n     * Remove the plot line or band.\n     *\n     * @function Highcharts.PlotLineOrBand#destroy\n     */\n    PlotLineOrBand.prototype.destroy = function () {\n        // remove it from the lookup\n        erase(this.axis.plotLinesAndBands, this);\n        delete this.axis;\n        destroyObjectProperties(this);\n    };\n    return PlotLineOrBand;\n}());\n/* *\n *\n *  Default Export\n *\n * */\nexport default PlotLineOrBand;\n/* *\n *\n *  API Options\n *\n * */\n/**\n * Options for plot bands on axes.\n *\n * @typedef {Highcharts.XAxisPlotBandsOptions|Highcharts.YAxisPlotBandsOptions|Highcharts.ZAxisPlotBandsOptions} Highcharts.AxisPlotBandsOptions\n */\n/**\n * Options for plot band labels on axes.\n *\n * @typedef {Highcharts.XAxisPlotBandsLabelOptions|Highcharts.YAxisPlotBandsLabelOptions|Highcharts.ZAxisPlotBandsLabelOptions} Highcharts.AxisPlotBandsLabelOptions\n */\n/**\n * Options for plot lines on axes.\n *\n * @typedef {Highcharts.XAxisPlotLinesOptions|Highcharts.YAxisPlotLinesOptions|Highcharts.ZAxisPlotLinesOptions} Highcharts.AxisPlotLinesOptions\n */\n/**\n * Options for plot line labels on axes.\n *\n * @typedef {Highcharts.XAxisPlotLinesLabelOptions|Highcharts.YAxisPlotLinesLabelOptions|Highcharts.ZAxisPlotLinesLabelOptions} Highcharts.AxisPlotLinesLabelOptions\n */\n('');\n/* *\n *\n *  API Options\n *\n * */\n/**\n * An array of colored bands stretching across the plot area marking an\n * interval on the axis.\n *\n * In styled mode, the plot bands are styled by the `.highcharts-plot-band`\n * class in addition to the `className` option.\n *\n * @productdesc {highcharts}\n * In a gauge, a plot band on the Y axis (value axis) will stretch along the\n * perimeter of the gauge.\n *\n * @type      {Array<*>}\n * @product   highcharts highstock gantt\n * @apioption xAxis.plotBands\n */\n/**\n * Flag to decide if plotBand should be rendered across all panes.\n *\n * @since     7.1.2\n * @product   highstock\n * @type      {boolean}\n * @default   true\n * @apioption xAxis.plotBands.acrossPanes\n */\n/**\n * Border color for the plot band. Also requires `borderWidth` to be set.\n *\n * @type      {Highcharts.ColorString}\n * @apioption xAxis.plotBands.borderColor\n */\n/**\n * Border width for the plot band. Also requires `borderColor` to be set.\n *\n * @type      {number}\n * @default   0\n * @apioption xAxis.plotBands.borderWidth\n */\n/**\n * A custom class name, in addition to the default `highcharts-plot-band`,\n * to apply to each individual band.\n *\n * @type      {string}\n * @since     5.0.0\n * @apioption xAxis.plotBands.className\n */\n/**\n * The color of the plot band.\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-color/\n *         Color band\n * @sample {highstock} stock/xaxis/plotbands/\n *         Plot band on Y axis\n *\n * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n * @default   #e6ebf5\n * @apioption xAxis.plotBands.color\n */\n/**\n * An object defining mouse events for the plot band. Supported properties\n * are `click`, `mouseover`, `mouseout`, `mousemove`.\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-events/\n *         Mouse events demonstrated\n *\n * @since     1.2\n * @apioption xAxis.plotBands.events\n */\n/**\n * Click event on a plot band.\n *\n * @type      {Highcharts.EventCallbackFunction<Highcharts.PlotLineOrBand>}\n * @apioption xAxis.plotBands.events.click\n */\n/**\n * Mouse move event on a plot band.\n *\n * @type      {Highcharts.EventCallbackFunction<Highcharts.PlotLineOrBand>}\n * @apioption xAxis.plotBands.events.mousemove\n */\n/**\n * Mouse out event on the corner of a plot band.\n *\n * @type      {Highcharts.EventCallbackFunction<Highcharts.PlotLineOrBand>}\n * @apioption xAxis.plotBands.events.mouseout\n */\n/**\n * Mouse over event on a plot band.\n *\n * @type      {Highcharts.EventCallbackFunction<Highcharts.PlotLineOrBand>}\n * @apioption xAxis.plotBands.events.mouseover\n */\n/**\n * The start position of the plot band in axis units.\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-color/\n *         Datetime axis\n * @sample {highcharts} highcharts/xaxis/plotbands-from/\n *         Categorized axis\n * @sample {highstock} stock/xaxis/plotbands/\n *         Plot band on Y axis\n *\n * @type      {number}\n * @apioption xAxis.plotBands.from\n */\n/**\n * An id used for identifying the plot band in Axis.removePlotBand.\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-id/\n *         Remove plot band by id\n * @sample {highstock} highcharts/xaxis/plotbands-id/\n *         Remove plot band by id\n *\n * @type      {string}\n * @apioption xAxis.plotBands.id\n */\n/**\n * The end position of the plot band in axis units.\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-color/\n *         Datetime axis\n * @sample {highcharts} highcharts/xaxis/plotbands-from/\n *         Categorized axis\n * @sample {highstock} stock/xaxis/plotbands/\n *         Plot band on Y axis\n *\n * @type      {number}\n * @apioption xAxis.plotBands.to\n */\n/**\n * The z index of the plot band within the chart, relative to other\n * elements. Using the same z index as another element may give\n * unpredictable results, as the last rendered element will be on top.\n * Values from 0 to 20 make sense.\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-color/\n *         Behind plot lines by default\n * @sample {highcharts} highcharts/xaxis/plotbands-zindex/\n *         Above plot lines\n * @sample {highcharts} highcharts/xaxis/plotbands-zindex-above-series/\n *         Above plot lines and series\n *\n * @type      {number}\n * @since     1.2\n * @apioption xAxis.plotBands.zIndex\n */\n/**\n * Text labels for the plot bands\n *\n * @product   highcharts highstock gantt\n * @apioption xAxis.plotBands.label\n */\n/**\n * Horizontal alignment of the label. Can be one of \"left\", \"center\" or\n * \"right\".\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-label-align/\n *         Aligned to the right\n * @sample {highstock} stock/xaxis/plotbands-label/\n *         Plot band with labels\n *\n * @type      {Highcharts.AlignValue}\n * @default   center\n * @since     2.1\n * @apioption xAxis.plotBands.label.align\n */\n/**\n * Rotation of the text label in degrees .\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-label-rotation/\n *         Vertical text\n *\n * @type      {number}\n * @default   0\n * @since     2.1\n * @apioption xAxis.plotBands.label.rotation\n */\n/**\n * CSS styles for the text label.\n *\n * In styled mode, the labels are styled by the\n * `.highcharts-plot-band-label` class.\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-label-style/\n *         Blue and bold label\n *\n * @type      {Highcharts.CSSObject}\n * @since     2.1\n * @apioption xAxis.plotBands.label.style\n */\n/**\n * The string text itself. A subset of HTML is supported.\n *\n * @type      {string}\n * @since     2.1\n * @apioption xAxis.plotBands.label.text\n */\n/**\n * The text alignment for the label. While `align` determines where the\n * texts anchor point is placed within the plot band, `textAlign` determines\n * how the text is aligned against its anchor point. Possible values are\n * \"left\", \"center\" and \"right\". Defaults to the same as the `align` option.\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-label-rotation/\n *         Vertical text in center position but text-aligned left\n *\n * @type       {Highcharts.AlignValue}\n * @since      2.1\n * @apioption  xAxis.plotBands.label.textAlign\n */\n/**\n * Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n * to render the labels.\n *\n * @type      {boolean}\n * @default   false\n * @since     3.0.3\n * @apioption xAxis.plotBands.label.useHTML\n */\n/**\n * Vertical alignment of the label relative to the plot band. Can be one of\n * \"top\", \"middle\" or \"bottom\".\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-label-verticalalign/\n *         Vertically centered label\n * @sample {highstock} stock/xaxis/plotbands-label/\n *         Plot band with labels\n *\n * @type       {Highcharts.VerticalAlignValue}\n * @default    top\n * @since      2.1\n * @apioption  xAxis.plotBands.label.verticalAlign\n */\n/**\n * Horizontal position relative the alignment. Default varies by\n * orientation.\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-label-align/\n *         Aligned 10px from the right edge\n * @sample {highstock} stock/xaxis/plotbands-label/\n *         Plot band with labels\n *\n * @type      {number}\n * @since     2.1\n * @apioption xAxis.plotBands.label.x\n */\n/**\n * Vertical position of the text baseline relative to the alignment. Default\n * varies by orientation.\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-label-y/\n *         Label on x axis\n * @sample {highstock} stock/xaxis/plotbands-label/\n *         Plot band with labels\n *\n * @type      {number}\n * @since     2.1\n * @apioption xAxis.plotBands.label.y\n */\n/**\n * An array of lines stretching across the plot area, marking a specific\n * value on one of the axes.\n *\n * In styled mode, the plot lines are styled by the\n * `.highcharts-plot-line` class in addition to the `className` option.\n *\n * @type      {Array<*>}\n * @product   highcharts highstock gantt\n * @sample {highcharts} highcharts/xaxis/plotlines-color/\n *         Basic plot line\n * @sample {highcharts} highcharts/series-solidgauge/labels-auto-aligned/\n *         Solid gauge plot line\n * @apioption xAxis.plotLines\n */\n/**\n * Flag to decide if plotLine should be rendered across all panes.\n *\n * @sample {highstock} stock/xaxis/plotlines-acrosspanes/\n *         Plot lines on different panes\n *\n * @since     7.1.2\n * @product   highstock\n * @type      {boolean}\n * @default   true\n * @apioption xAxis.plotLines.acrossPanes\n */\n/**\n * A custom class name, in addition to the default `highcharts-plot-line`,\n * to apply to each individual line.\n *\n * @type      {string}\n * @since     5.0.0\n * @apioption xAxis.plotLines.className\n */\n/**\n * The color of the line.\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-color/\n *         A red line from X axis\n * @sample {highstock} stock/xaxis/plotlines/\n *         Plot line on Y axis\n *\n * @type      {Highcharts.ColorString}\n * @default   #999999\n * @apioption xAxis.plotLines.color\n */\n/**\n * The dashing or dot style for the plot line. For possible values see\n * [this overview](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/).\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-dashstyle/\n *         Dash and dot pattern\n * @sample {highstock} stock/xaxis/plotlines/\n *         Plot line on Y axis\n *\n * @type      {Highcharts.DashStyleValue}\n * @default   Solid\n * @since     1.2\n * @apioption xAxis.plotLines.dashStyle\n */\n/**\n * An object defining mouse events for the plot line. Supported\n * properties are `click`, `mouseover`, `mouseout`, `mousemove`.\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-events/\n *         Mouse events demonstrated\n *\n * @since     1.2\n * @apioption xAxis.plotLines.events\n */\n/**\n * Click event on a plot band.\n *\n * @type      {Highcharts.EventCallbackFunction<Highcharts.PlotLineOrBand>}\n * @apioption xAxis.plotLines.events.click\n */\n/**\n * Mouse move event on a plot band.\n *\n * @type      {Highcharts.EventCallbackFunction<Highcharts.PlotLineOrBand>}\n * @apioption xAxis.plotLines.events.mousemove\n */\n/**\n * Mouse out event on the corner of a plot band.\n *\n * @type      {Highcharts.EventCallbackFunction<Highcharts.PlotLineOrBand>}\n * @apioption xAxis.plotLines.events.mouseout\n */\n/**\n * Mouse over event on a plot band.\n *\n * @type      {Highcharts.EventCallbackFunction<Highcharts.PlotLineOrBand>}\n * @apioption xAxis.plotLines.events.mouseover\n */\n/**\n * An id used for identifying the plot line in Axis.removePlotLine.\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-id/\n *         Remove plot line by id\n *\n * @type      {string}\n * @apioption xAxis.plotLines.id\n */\n/**\n * The position of the line in axis units.\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-color/\n *         Between two categories on X axis\n * @sample {highstock} stock/xaxis/plotlines/\n *         Plot line on Y axis\n *\n * @type      {number}\n * @apioption xAxis.plotLines.value\n */\n/**\n * The width or thickness of the plot line.\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-color/\n *         2px wide line from X axis\n * @sample {highstock} stock/xaxis/plotlines/\n *         Plot line on Y axis\n *\n * @type      {number}\n * @default   2\n * @apioption xAxis.plotLines.width\n */\n/**\n * The z index of the plot line within the chart.\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-zindex-behind/\n *         Behind plot lines by default\n * @sample {highcharts} highcharts/xaxis/plotlines-zindex-above/\n *         Above plot lines\n * @sample {highcharts} highcharts/xaxis/plotlines-zindex-above-all/\n *         Above plot lines and series\n *\n * @type      {number}\n * @since     1.2\n * @apioption xAxis.plotLines.zIndex\n */\n/**\n * Text labels for the plot bands\n *\n * @apioption xAxis.plotLines.label\n */\n/**\n * Horizontal alignment of the label. Can be one of \"left\", \"center\" or\n * \"right\".\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-label-align-right/\n *         Aligned to the right\n * @sample {highstock} stock/xaxis/plotlines/\n *         Plot line on Y axis\n *\n * @type       {Highcharts.AlignValue}\n * @default    left\n * @since      2.1\n * @apioption  xAxis.plotLines.label.align\n */\n/**\n * Whether to hide labels that are outside the plot area.\n *\n * @type      {boolean}\n * @default   false\n * @since 10.3.3\n * @apioption xAxis.plotLines.labels.clip\n */\n/**\n * Callback JavaScript function to format the label. Useful properties like\n * the value of plot line or the range of plot band (`from` & `to`\n * properties) can be found in `this.options` object.\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-plotbands-label-formatter\n *         Label formatters for plot line and plot band.\n * @type      {Highcharts.FormatterCallbackFunction<Highcharts.PlotLineOrBand>}\n * @apioption xAxis.plotLines.label.formatter\n */\n/**\n * Rotation of the text label in degrees. Defaults to 0 for horizontal plot\n * lines and 90 for vertical lines.\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-label-verticalalign-middle/\n *         Slanted text\n *\n * @type      {number}\n * @since     2.1\n * @apioption xAxis.plotLines.label.rotation\n */\n/**\n * CSS styles for the text label.\n *\n * In styled mode, the labels are styled by the\n * `.highcharts-plot-line-label` class.\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-label-style/\n *         Blue and bold label\n *\n * @type      {Highcharts.CSSObject}\n * @since     2.1\n * @apioption xAxis.plotLines.label.style\n */\n/**\n * The text itself. A subset of HTML is supported.\n *\n * @type      {string}\n * @since     2.1\n * @apioption xAxis.plotLines.label.text\n */\n/**\n * The text alignment for the label. While `align` determines where the\n * texts anchor point is placed within the plot band, `textAlign` determines\n * how the text is aligned against its anchor point. Possible values are\n * \"left\", \"center\" and \"right\". Defaults to the same as the `align` option.\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-label-textalign/\n *         Text label in bottom position\n *\n * @type      {Highcharts.AlignValue}\n * @since     2.1\n * @apioption xAxis.plotLines.label.textAlign\n */\n/**\n * Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n * to render the labels.\n *\n * @type      {boolean}\n * @default   false\n * @since     3.0.3\n * @apioption xAxis.plotLines.label.useHTML\n */\n/**\n * Vertical alignment of the label relative to the plot line. Can be\n * one of \"top\", \"middle\" or \"bottom\".\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-label-verticalalign-middle/\n *         Vertically centered label\n *\n * @type       {Highcharts.VerticalAlignValue}\n * @default    {highcharts} top\n * @default    {highstock} top\n * @since      2.1\n * @apioption  xAxis.plotLines.label.verticalAlign\n */\n/**\n * Horizontal position relative the alignment. Default varies by\n * orientation.\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-label-align-right/\n *         Aligned 10px from the right edge\n * @sample {highstock} stock/xaxis/plotlines/\n *         Plot line on Y axis\n *\n * @type      {number}\n * @since     2.1\n * @apioption xAxis.plotLines.label.x\n */\n/**\n * Vertical position of the text baseline relative to the alignment. Default\n * varies by orientation.\n *\n * @sample {highcharts} highcharts/xaxis/plotlines-label-y/\n *         Label below the plot line\n * @sample {highstock} stock/xaxis/plotlines/\n *         Plot line on Y axis\n *\n * @type      {number}\n * @since     2.1\n * @apioption xAxis.plotLines.label.y\n */\n/**\n * @type      {Array<*>}\n * @extends   xAxis.plotBands\n * @apioption yAxis.plotBands\n */\n/**\n * In a gauge chart, this option determines the inner radius of the\n * plot band that stretches along the perimeter. It can be given as\n * a percentage string, like `\"100%\"`, or as a pixel number, like `100`.\n * By default, the inner radius is controlled by the [thickness](\n * #yAxis.plotBands.thickness) option.\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-gauge\n *         Gauge plot band\n *\n * @type      {number|string}\n * @since     2.3\n * @product   highcharts\n * @apioption yAxis.plotBands.innerRadius\n */\n/**\n * In a gauge chart, this option determines the outer radius of the\n * plot band that stretches along the perimeter. It can be given as\n * a percentage string, like `\"100%\"`, or as a pixel number, like `100`.\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-gauge\n *         Gauge plot band\n *\n * @type      {number|string}\n * @default   100%\n * @since     2.3\n * @product   highcharts\n * @apioption yAxis.plotBands.outerRadius\n */\n/**\n * In a gauge chart, this option sets the width of the plot band\n * stretching along the perimeter. It can be given as a percentage\n * string, like `\"10%\"`, or as a pixel number, like `10`. The default\n * value 10 is the same as the default [tickLength](#yAxis.tickLength),\n * thus making the plot band act as a background for the tick markers.\n *\n * @sample {highcharts} highcharts/xaxis/plotbands-gauge\n *         Gauge plot band\n *\n * @type      {number|string}\n * @default   10\n * @since     2.3\n * @product   highcharts\n * @apioption yAxis.plotBands.thickness\n */\n/**\n * @type      {Array<*>}\n * @extends   xAxis.plotLines\n * @apioption yAxis.plotLines\n */\n(''); // keeps doclets above in JS file\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Highcharts feature to make the Y axis stay fixed when scrolling the chart\n *  horizontally on mobile devices. Supports left and right side axes.\n */\n/*\nWIP on vertical scrollable plot area (#9378). To do:\n- Bottom axis positioning\n- Test with Gantt\n- Look for size optimizing the code\n- API and demos\n */\n'use strict';\nimport A from '../Core/Animation/AnimationUtilities.js';\nvar stop = A.stop;\nimport Axis from '../Core/Axis/Axis.js';\nimport Chart from '../Core/Chart/Chart.js';\nimport Series from '../Core/Series/Series.js';\nimport RendererRegistry from '../Core/Renderer/RendererRegistry.js';\nimport U from '../Core/Utilities.js';\nvar addEvent = U.addEvent, createElement = U.createElement, defined = U.defined, merge = U.merge, pick = U.pick;\n/* eslint-disable no-invalid-this, valid-jsdoc */\naddEvent(Chart, 'afterSetChartSize', function (e) {\n    var scrollablePlotArea = this.options.chart.scrollablePlotArea, scrollableMinWidth = scrollablePlotArea && scrollablePlotArea.minWidth, scrollableMinHeight = scrollablePlotArea && scrollablePlotArea.minHeight, scrollablePixelsX, scrollablePixelsY, corrections;\n    if (!this.renderer.forExport) {\n        // The amount of pixels to scroll, the difference between chart\n        // width and scrollable width\n        if (scrollableMinWidth) {\n            this.scrollablePixelsX = scrollablePixelsX = Math.max(0, scrollableMinWidth - this.chartWidth);\n            if (scrollablePixelsX) {\n                this.scrollablePlotBox = (this.renderer.scrollablePlotBox = merge(this.plotBox));\n                this.plotBox.width = this.plotWidth += scrollablePixelsX;\n                if (this.inverted) {\n                    this.clipBox.height += scrollablePixelsX;\n                }\n                else {\n                    this.clipBox.width += scrollablePixelsX;\n                }\n                corrections = {\n                    // Corrections for right side\n                    1: { name: 'right', value: scrollablePixelsX }\n                };\n            }\n            // Currently we can only do either X or Y\n        }\n        else if (scrollableMinHeight) {\n            this.scrollablePixelsY = scrollablePixelsY = Math.max(0, scrollableMinHeight - this.chartHeight);\n            if (defined(scrollablePixelsY)) {\n                this.scrollablePlotBox = (this.renderer.scrollablePlotBox = merge(this.plotBox));\n                this.plotBox.height = this.plotHeight += scrollablePixelsY;\n                if (this.inverted) {\n                    this.clipBox.width += scrollablePixelsY;\n                }\n                else {\n                    this.clipBox.height += scrollablePixelsY;\n                }\n                corrections = {\n                    2: { name: 'bottom', value: scrollablePixelsY }\n                };\n            }\n        }\n        if (corrections && !e.skipAxes) {\n            this.axes.forEach(function (axis) {\n                // For right and bottom axes, only fix the plot line length\n                if (corrections[axis.side]) {\n                    // Get the plot lines right in getPlotLinePath,\n                    // temporarily set it to the adjusted plot width.\n                    axis.getPlotLinePath = function () {\n                        var marginName = corrections[axis.side].name, correctionValue = corrections[axis.side].value, \n                        // axis.right or axis.bottom\n                        margin = this[marginName], path;\n                        // Temporarily adjust\n                        this[marginName] = margin - correctionValue;\n                        path = Axis.prototype.getPlotLinePath.apply(this, arguments);\n                        // Reset\n                        this[marginName] = margin;\n                        return path;\n                    };\n                }\n                else {\n                    // Apply the corrected plotWidth\n                    axis.setAxisSize();\n                    axis.setAxisTranslation();\n                }\n            });\n        }\n    }\n});\naddEvent(Chart, 'render', function () {\n    if (this.scrollablePixelsX || this.scrollablePixelsY) {\n        if (this.setUpScrolling) {\n            this.setUpScrolling();\n        }\n        this.applyFixed();\n    }\n    else if (this.fixedDiv) { // Has been in scrollable mode\n        this.applyFixed();\n    }\n});\n/**\n * @private\n * @function Highcharts.Chart#setUpScrolling\n * @return {void}\n */\nChart.prototype.setUpScrolling = function () {\n    var _this = this;\n    var css = {\n        WebkitOverflowScrolling: 'touch',\n        overflowX: 'hidden',\n        overflowY: 'hidden'\n    };\n    if (this.scrollablePixelsX) {\n        css.overflowX = 'auto';\n    }\n    if (this.scrollablePixelsY) {\n        css.overflowY = 'auto';\n    }\n    // Insert a container with position relative\n    // that scrolling and fixed container renders to (#10555)\n    this.scrollingParent = createElement('div', {\n        className: 'highcharts-scrolling-parent'\n    }, {\n        position: 'relative'\n    }, this.renderTo);\n    // Add the necessary divs to provide scrolling\n    this.scrollingContainer = createElement('div', {\n        'className': 'highcharts-scrolling'\n    }, css, this.scrollingParent);\n    // On scroll, reset the chart position because it applies to the scrolled\n    // container\n    var lastHoverPoint;\n    addEvent(this.scrollingContainer, 'scroll', function () {\n        if (_this.pointer) {\n            delete _this.pointer.chartPosition;\n            if (_this.hoverPoint) {\n                lastHoverPoint = _this.hoverPoint;\n            }\n            _this.pointer.runPointActions(void 0, lastHoverPoint, true);\n        }\n    });\n    this.innerContainer = createElement('div', {\n        'className': 'highcharts-inner-container'\n    }, null, this.scrollingContainer);\n    // Now move the container inside\n    this.innerContainer.appendChild(this.container);\n    // Don't run again\n    this.setUpScrolling = null;\n};\n/**\n * These elements are moved over to the fixed renderer and stay fixed when the\n * user scrolls the chart\n * @private\n */\nChart.prototype.moveFixedElements = function () {\n    var container = this.container, fixedRenderer = this.fixedRenderer, fixedSelectors = [\n        '.highcharts-breadcrumbs-group',\n        '.highcharts-contextbutton',\n        '.highcharts-credits',\n        '.highcharts-legend',\n        '.highcharts-legend-checkbox',\n        '.highcharts-navigator-series',\n        '.highcharts-navigator-xaxis',\n        '.highcharts-navigator-yaxis',\n        '.highcharts-navigator',\n        '.highcharts-reset-zoom',\n        '.highcharts-drillup-button',\n        '.highcharts-scrollbar',\n        '.highcharts-subtitle',\n        '.highcharts-title'\n    ], axisClass;\n    if (this.scrollablePixelsX && !this.inverted) {\n        axisClass = '.highcharts-yaxis';\n    }\n    else if (this.scrollablePixelsX && this.inverted) {\n        axisClass = '.highcharts-xaxis';\n    }\n    else if (this.scrollablePixelsY && !this.inverted) {\n        axisClass = '.highcharts-xaxis';\n    }\n    else if (this.scrollablePixelsY && this.inverted) {\n        axisClass = '.highcharts-yaxis';\n    }\n    if (axisClass) {\n        fixedSelectors.push(\"\".concat(axisClass, \":not(.highcharts-radial-axis)\"), \"\".concat(axisClass, \"-labels:not(.highcharts-radial-axis-labels)\"));\n    }\n    fixedSelectors.forEach(function (className) {\n        [].forEach.call(container.querySelectorAll(className), function (elem) {\n            (elem.namespaceURI === fixedRenderer.SVG_NS ?\n                fixedRenderer.box :\n                fixedRenderer.box.parentNode).appendChild(elem);\n            elem.style.pointerEvents = 'auto';\n        });\n    });\n};\n/**\n * @private\n * @function Highcharts.Chart#applyFixed\n * @return {void}\n */\nChart.prototype.applyFixed = function () {\n    var firstTime = !this.fixedDiv, chartOptions = this.options.chart, scrollableOptions = chartOptions.scrollablePlotArea, Renderer = RendererRegistry.getRendererType();\n    var fixedRenderer, scrollableWidth, scrollableHeight;\n    // First render\n    if (firstTime) {\n        this.fixedDiv = createElement('div', {\n            className: 'highcharts-fixed'\n        }, {\n            position: 'absolute',\n            overflow: 'hidden',\n            pointerEvents: 'none',\n            zIndex: (chartOptions.style && chartOptions.style.zIndex || 0) + 2,\n            top: 0\n        }, null, true);\n        if (this.scrollingContainer) {\n            this.scrollingContainer.parentNode.insertBefore(this.fixedDiv, this.scrollingContainer);\n        }\n        this.renderTo.style.overflow = 'visible';\n        this.fixedRenderer = fixedRenderer = new Renderer(this.fixedDiv, this.chartWidth, this.chartHeight, this.options.chart.style);\n        // Mask\n        this.scrollableMask = fixedRenderer\n            .path()\n            .attr({\n            fill: this.options.chart.backgroundColor || '#fff',\n            'fill-opacity': pick(scrollableOptions.opacity, 0.85),\n            zIndex: -1\n        })\n            .addClass('highcharts-scrollable-mask')\n            .add();\n        addEvent(this, 'afterShowResetZoom', this.moveFixedElements);\n        addEvent(this, 'afterApplyDrilldown', this.moveFixedElements);\n        addEvent(this, 'afterLayOutTitles', this.moveFixedElements);\n    }\n    else {\n        // Set the size of the fixed renderer to the visible width\n        this.fixedRenderer.setSize(this.chartWidth, this.chartHeight);\n    }\n    if (this.scrollableDirty || firstTime) {\n        this.scrollableDirty = false;\n        this.moveFixedElements();\n    }\n    // Increase the size of the scrollable renderer and background\n    scrollableWidth = this.chartWidth + (this.scrollablePixelsX || 0);\n    scrollableHeight = this.chartHeight + (this.scrollablePixelsY || 0);\n    stop(this.container);\n    this.container.style.width = scrollableWidth + 'px';\n    this.container.style.height = scrollableHeight + 'px';\n    this.renderer.boxWrapper.attr({\n        width: scrollableWidth,\n        height: scrollableHeight,\n        viewBox: [0, 0, scrollableWidth, scrollableHeight].join(' ')\n    });\n    this.chartBackground.attr({\n        width: scrollableWidth,\n        height: scrollableHeight\n    });\n    this.scrollingContainer.style.height = this.chartHeight + 'px';\n    // Set scroll position\n    if (firstTime) {\n        if (scrollableOptions.scrollPositionX) {\n            this.scrollingContainer.scrollLeft =\n                this.scrollablePixelsX *\n                    scrollableOptions.scrollPositionX;\n        }\n        if (scrollableOptions.scrollPositionY) {\n            this.scrollingContainer.scrollTop =\n                this.scrollablePixelsY *\n                    scrollableOptions.scrollPositionY;\n        }\n    }\n    // Mask behind the left and right side\n    var axisOffset = this.axisOffset, maskTop = this.plotTop - axisOffset[0] - 1, maskLeft = this.plotLeft - axisOffset[3] - 1, maskBottom = this.plotTop + this.plotHeight + axisOffset[2] + 1, maskRight = this.plotLeft + this.plotWidth + axisOffset[1] + 1, maskPlotRight = this.plotLeft + this.plotWidth -\n        (this.scrollablePixelsX || 0), maskPlotBottom = this.plotTop + this.plotHeight -\n        (this.scrollablePixelsY || 0), d;\n    if (this.scrollablePixelsX) {\n        d = [\n            // Left side\n            ['M', 0, maskTop],\n            ['L', this.plotLeft - 1, maskTop],\n            ['L', this.plotLeft - 1, maskBottom],\n            ['L', 0, maskBottom],\n            ['Z'],\n            // Right side\n            ['M', maskPlotRight, maskTop],\n            ['L', this.chartWidth, maskTop],\n            ['L', this.chartWidth, maskBottom],\n            ['L', maskPlotRight, maskBottom],\n            ['Z']\n        ];\n    }\n    else if (this.scrollablePixelsY) {\n        d = [\n            // Top side\n            ['M', maskLeft, 0],\n            ['L', maskLeft, this.plotTop - 1],\n            ['L', maskRight, this.plotTop - 1],\n            ['L', maskRight, 0],\n            ['Z'],\n            // Bottom side\n            ['M', maskLeft, maskPlotBottom],\n            ['L', maskLeft, this.chartHeight],\n            ['L', maskRight, this.chartHeight],\n            ['L', maskRight, maskPlotBottom],\n            ['Z']\n        ];\n    }\n    else {\n        d = [['M', 0, 0]];\n    }\n    if (this.redrawTrigger !== 'adjustHeight') {\n        this.scrollableMask.attr({ d: d });\n    }\n};\naddEvent(Axis, 'afterInit', function () {\n    this.chart.scrollableDirty = true;\n});\naddEvent(Series, 'show', function () {\n    this.chart.scrollableDirty = true;\n});\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Options for a scrollable plot area. This feature provides a minimum size for\n * the plot area of the chart. If the size gets smaller than this, typically\n * on mobile devices, a native browser scrollbar is presented. This scrollbar\n * provides smooth scrolling for the contents of the plot area, whereas the\n * title, legend and unaffected axes are fixed.\n *\n * Since v7.1.2, a scrollable plot area can be defined for either horizontal or\n * vertical scrolling, depending on whether the `minWidth` or `minHeight`\n * option is set.\n *\n * @sample highcharts/chart/scrollable-plotarea\n *         Scrollable plot area\n * @sample highcharts/chart/scrollable-plotarea-vertical\n *         Vertically scrollable plot area\n * @sample {gantt} gantt/chart/scrollable-plotarea-vertical\n *         Gantt chart with vertically scrollable plot area\n *\n * @since     6.1.0\n * @product   highcharts gantt\n * @apioption chart.scrollablePlotArea\n */\n/**\n * The minimum height for the plot area. If it gets smaller than this, the plot\n * area will become scrollable.\n *\n * @type      {number}\n * @since     7.1.2\n * @apioption chart.scrollablePlotArea.minHeight\n */\n/**\n * The minimum width for the plot area. If it gets smaller than this, the plot\n * area will become scrollable.\n *\n * @type      {number}\n * @since     6.1.0\n * @apioption chart.scrollablePlotArea.minWidth\n */\n/**\n * The initial scrolling position of the scrollable plot area. Ranges from 0 to\n * 1, where 0 aligns the plot area to the left and 1 aligns it to the right.\n * Typically we would use 1 if the chart has right aligned Y axes.\n *\n * @type      {number}\n * @since     6.1.0\n * @apioption chart.scrollablePlotArea.scrollPositionX\n */\n/**\n * The initial scrolling position of the scrollable plot area. Ranges from 0 to\n * 1, where 0 aligns the plot area to the top and 1 aligns it to the bottom.\n *\n * @type      {number}\n * @since     7.1.2\n * @apioption chart.scrollablePlotArea.scrollPositionY\n */\n/**\n * The opacity of mask applied on one of the sides of the plot\n * area.\n *\n * @sample {highcharts} highcharts/chart/scrollable-plotarea-opacity\n *         Disabled opacity for the mask\n *\n * @type        {number}\n * @default     0.85\n * @since       7.1.1\n * @apioption   chart.scrollablePlotArea.opacity\n */\n(''); // keep doclets above in transpiled file\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport A from '../../Animation/AnimationUtilities.js';\nvar getDeferredAnimation = A.getDeferredAnimation;\nimport Axis from '../Axis.js';\nimport SeriesRegistry from '../../Series/SeriesRegistry.js';\nvar seriesProto = SeriesRegistry.series.prototype;\nimport StackItem from './StackItem.js';\nimport U from '../../Utilities.js';\nvar addEvent = U.addEvent, correctFloat = U.correctFloat, defined = U.defined, destroyObjectProperties = U.destroyObjectProperties, fireEvent = U.fireEvent, isArray = U.isArray, isNumber = U.isNumber, objectEach = U.objectEach, pick = U.pick;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Generate stacks for each series and calculate stacks total values\n *\n * @private\n * @function Highcharts.Chart#getStacks\n */\nfunction chartGetStacks() {\n    var chart = this, inverted = chart.inverted;\n    // reset stacks for each yAxis\n    chart.yAxis.forEach(function (axis) {\n        if (axis.stacking && axis.stacking.stacks && axis.hasVisibleSeries) {\n            axis.stacking.oldStacks = axis.stacking.stacks;\n        }\n    });\n    chart.series.forEach(function (series) {\n        var xAxisOptions = series.xAxis && series.xAxis.options || {};\n        if (series.options.stacking &&\n            (series.visible === true ||\n                chart.options.chart.ignoreHiddenSeries === false)) {\n            series.stackKey = [\n                series.type,\n                pick(series.options.stack, ''),\n                inverted ? xAxisOptions.top : xAxisOptions.left,\n                inverted ? xAxisOptions.height : xAxisOptions.width\n            ].join(',');\n        }\n    });\n}\n/**\n * @private\n */\nfunction onAxisDestroy() {\n    var stacking = this.stacking;\n    if (!stacking) {\n        return;\n    }\n    var stacks = stacking.stacks;\n    // Destroy each stack total\n    objectEach(stacks, function (stack, stackKey) {\n        destroyObjectProperties(stack);\n        stacks[stackKey] = null;\n    });\n    if (stacking &&\n        stacking.stackTotalGroup) {\n        stacking.stackTotalGroup.destroy();\n    }\n}\n/**\n * @private\n */\nfunction onAxisInit() {\n    if (this.coll === 'yAxis' && !this.stacking) {\n        this.stacking = new AxisAdditions(this);\n    }\n}\n/**\n * Get stack indicator, according to it's x-value, to determine points with the\n * same x-value\n *\n * @private\n * @function Highcharts.Series#getStackIndicator\n */\nfunction seriesGetStackIndicator(stackIndicator, x, index, key) {\n    // Update stack indicator, when:\n    // first point in a stack || x changed || stack type (negative vs positive)\n    // changed:\n    if (!defined(stackIndicator) ||\n        stackIndicator.x !== x ||\n        (key && stackIndicator.stackKey !== key)) {\n        stackIndicator = {\n            x: x,\n            index: 0,\n            key: key,\n            stackKey: key\n        };\n    }\n    else {\n        (stackIndicator).index++;\n    }\n    stackIndicator.key =\n        [index, x, stackIndicator.index].join(',');\n    return stackIndicator;\n}\n/**\n * Iterate over all stacks and compute the absolute values to percent\n *\n * @private\n * @function Highcharts.Series#modifyStacks\n */\nfunction seriesModifyStacks() {\n    var series = this, yAxis = series.yAxis, stackKey = series.stackKey, stacks = yAxis.stacking.stacks, processedXData = series.processedXData, stacking = series.options.stacking, stacker = series[stacking + 'Stacker'];\n    var stackIndicator;\n    if (stacker) { // Modifier function exists (Series.percentStacker etc.)\n        [stackKey, '-' + stackKey].forEach(function (key) {\n            var i = processedXData.length, x, stack, pointExtremes;\n            while (i--) {\n                x = processedXData[i];\n                stackIndicator = series.getStackIndicator(stackIndicator, x, series.index, key);\n                stack = stacks[key] && stacks[key][x];\n                pointExtremes =\n                    stack && stack.points[stackIndicator.key];\n                if (pointExtremes) {\n                    stacker.call(series, pointExtremes, stack, i);\n                }\n            }\n        });\n    }\n}\n/**\n * Modifier function for percent stacks. Blows up the stack to 100%.\n *\n * @private\n * @function Highcharts.Series#percentStacker\n */\nfunction seriesPercentStacker(pointExtremes, stack, i) {\n    var totalFactor = stack.total ? 100 / stack.total : 0;\n    // Y bottom value\n    pointExtremes[0] = correctFloat(pointExtremes[0] * totalFactor);\n    // Y value\n    pointExtremes[1] = correctFloat(pointExtremes[1] * totalFactor);\n    this.stackedYData[i] = pointExtremes[1];\n}\n/**\n * Set grouped points in a stack-like object. When `centerInCategory` is true,\n * and `stacking` is not enabled, we need a pseudo (horizontal) stack in order\n * to handle grouping of points within the same category.\n *\n * @private\n * @function Highcharts.Series#setStackedPoints\n * @return {void}\n */\nfunction seriesSetGroupedPoints() {\n    var stacking = this.yAxis.stacking;\n    if (this.options.centerInCategory &&\n        (this.is('column') || this.is('columnrange')) &&\n        // With stacking enabled, we already have stacks that we can compute\n        // from\n        !this.options.stacking &&\n        // With only one series, we don't need to consider centerInCategory\n        this.chart.series.length > 1) {\n        seriesProto.setStackedPoints.call(this, 'group');\n        // After updating, if we now have proper stacks, we must delete the group\n        // pseudo stacks (#14986)\n    }\n    else if (stacking) {\n        objectEach(stacking.stacks, function (type, key) {\n            if (key.slice(-5) === 'group') {\n                objectEach(type, function (stack) { return stack.destroy(); });\n                delete stacking.stacks[key];\n            }\n        });\n    }\n}\n/**\n * Adds series' points value to corresponding stack\n *\n * @private\n * @function Highcharts.Series#setStackedPoints\n */\nfunction seriesSetStackedPoints(stackingParam) {\n    var chart = this.chart, stacking = stackingParam || this.options.stacking;\n    if (!stacking || (this.visible !== true &&\n        chart.options.chart.ignoreHiddenSeries !== false)) {\n        return;\n    }\n    var series = this, xData = series.processedXData, yData = series.processedYData, stackedYData = [], yDataLength = yData.length, seriesOptions = series.options, threshold = seriesOptions.threshold, stackThreshold = pick(seriesOptions.startFromThreshold && threshold, 0), stackOption = seriesOptions.stack, stackKey = stackingParam ? \"\".concat(series.type, \",\").concat(stacking) : series.stackKey, negKey = '-' + stackKey, negStacks = series.negStacks, yAxis = stacking === 'group' ?\n        chart.yAxis[0] :\n        series.yAxis, stacks = yAxis.stacking.stacks, oldStacks = yAxis.stacking.oldStacks;\n    var stackIndicator, isNegative, stack, other, key, pointKey, i, x, y;\n    yAxis.stacking.stacksTouched += 1;\n    // loop over the non-null y values and read them into a local array\n    for (i = 0; i < yDataLength; i++) {\n        x = xData[i];\n        y = yData[i];\n        stackIndicator = series.getStackIndicator(stackIndicator, x, series.index);\n        pointKey = stackIndicator.key;\n        // Read stacked values into a stack based on the x value,\n        // the sign of y and the stack key. Stacking is also handled for null\n        // values (#739)\n        isNegative = negStacks && y < (stackThreshold ? 0 : threshold);\n        key = isNegative ? negKey : stackKey;\n        // Create empty object for this stack if it doesn't exist yet\n        if (!stacks[key]) {\n            stacks[key] = {};\n        }\n        // Initialize StackItem for this x\n        if (!stacks[key][x]) {\n            if (oldStacks[key] &&\n                oldStacks[key][x]) {\n                stacks[key][x] = oldStacks[key][x];\n                stacks[key][x].total = null;\n            }\n            else {\n                stacks[key][x] = new StackItem(yAxis, yAxis.options.stackLabels, !!isNegative, x, stackOption);\n            }\n        }\n        // If the StackItem doesn't exist, create it first\n        stack = stacks[key][x];\n        if (y !== null) {\n            stack.points[pointKey] = stack.points[series.index] =\n                [pick(stack.cumulative, stackThreshold)];\n            // Record the base of the stack\n            if (!defined(stack.cumulative)) {\n                stack.base = pointKey;\n            }\n            stack.touched = yAxis.stacking.stacksTouched;\n            // In area charts, if there are multiple points on the same X value,\n            // let the area fill the full span of those points\n            if (stackIndicator.index > 0 && series.singleStacks === false) {\n                stack.points[pointKey][0] =\n                    stack.points[series.index + ',' + x + ',0'][0];\n            }\n            // When updating to null, reset the point stack (#7493)\n        }\n        else {\n            stack.points[pointKey] = stack.points[series.index] =\n                null;\n        }\n        // Add value to the stack total\n        if (stacking === 'percent') {\n            // Percent stacked column, totals are the same for the positive and\n            // negative stacks\n            other = isNegative ? stackKey : negKey;\n            if (negStacks && stacks[other] && stacks[other][x]) {\n                other = stacks[other][x];\n                stack.total = other.total =\n                    Math.max(other.total, stack.total) +\n                        Math.abs(y) ||\n                        0;\n                // Percent stacked areas\n            }\n            else {\n                stack.total =\n                    correctFloat(stack.total + (Math.abs(y) || 0));\n            }\n        }\n        else if (stacking === 'group') {\n            if (isArray(y)) {\n                y = y[0];\n            }\n            // In this stack, the total is the number of valid points\n            if (y !== null) {\n                stack.total = (stack.total || 0) + 1;\n            }\n        }\n        else {\n            stack.total = correctFloat(stack.total + (y || 0));\n        }\n        if (stacking === 'group') {\n            // This point's index within the stack, pushed to stack.points[1]\n            stack.cumulative = (stack.total || 1) - 1;\n        }\n        else {\n            stack.cumulative =\n                pick(stack.cumulative, stackThreshold) + (y || 0);\n        }\n        if (y !== null) {\n            stack.points[pointKey].push(stack.cumulative);\n            stackedYData[i] = stack.cumulative;\n            stack.hasValidPoints = true;\n        }\n    }\n    if (stacking === 'percent') {\n        yAxis.stacking.usePercentage = true;\n    }\n    if (stacking !== 'group') {\n        this.stackedYData = stackedYData; // To be used in getExtremes\n    }\n    // Reset old stacks\n    yAxis.stacking.oldStacks = {};\n}\n/* *\n *\n *  Classes\n *\n * */\n/**\n * Adds stacking support to axes.\n * @private\n * @class\n */\nvar AxisAdditions = /** @class */ (function () {\n    /* *\n     *\n     *  Constructors\n     *\n     * */\n    function AxisAdditions(axis) {\n        this.oldStacks = {};\n        this.stacks = {};\n        this.stacksTouched = 0;\n        this.axis = axis;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Build the stacks from top down\n     * @private\n     */\n    AxisAdditions.prototype.buildStacks = function () {\n        var stacking = this;\n        var axis = stacking.axis;\n        var axisSeries = axis.series;\n        var reversedStacks = axis.options.reversedStacks;\n        var len = axisSeries.length;\n        var actualSeries, i;\n        stacking.usePercentage = false;\n        i = len;\n        while (i--) {\n            actualSeries = axisSeries[reversedStacks ? i : len - i - 1];\n            actualSeries.setStackedPoints();\n            actualSeries.setGroupedPoints();\n        }\n        // Loop up again to compute percent and stream stack\n        for (i = 0; i < len; i++) {\n            axisSeries[i].modifyStacks();\n        }\n        fireEvent(axis, 'afterBuildStacks');\n    };\n    /**\n     * @private\n     */\n    AxisAdditions.prototype.cleanStacks = function () {\n        var stacking = this;\n        var stacks;\n        if (stacking.oldStacks) {\n            stacks = stacking.stacks = stacking.oldStacks;\n        }\n        // reset stacks\n        objectEach(stacks, function (type) {\n            objectEach(type, function (stack) {\n                stack.cumulative = stack.total;\n            });\n        });\n    };\n    /**\n     * Set all the stacks to initial states and destroy unused ones.\n     * @private\n     */\n    AxisAdditions.prototype.resetStacks = function () {\n        var _this = this;\n        objectEach(this.stacks, function (type) {\n            objectEach(type, function (stack, x) {\n                // Clean up memory after point deletion (#1044, #4320)\n                if (isNumber(stack.touched) &&\n                    stack.touched < _this.stacksTouched) {\n                    stack.destroy();\n                    delete type[x];\n                    // Reset stacks\n                }\n                else {\n                    stack.total = null;\n                    stack.cumulative = null;\n                }\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    AxisAdditions.prototype.renderStackTotals = function () {\n        var stacking = this, axis = stacking.axis, chart = axis.chart, renderer = chart.renderer, stacks = stacking.stacks, stackLabelsAnim = axis.options.stackLabels &&\n            axis.options.stackLabels.animation, animationConfig = getDeferredAnimation(chart, stackLabelsAnim || false), stackTotalGroup = stacking.stackTotalGroup = (stacking.stackTotalGroup ||\n            renderer\n                .g('stack-labels')\n                .attr({\n                zIndex: 6,\n                opacity: 0\n            })\n                .add());\n        // plotLeft/Top will change when y axis gets wider so we need to\n        // translate the stackTotalGroup at every render call. See bug #506\n        // and #516\n        stackTotalGroup.translate(chart.plotLeft, chart.plotTop);\n        // Render each stack total\n        objectEach(stacks, function (type) {\n            objectEach(type, function (stack) {\n                stack.render(stackTotalGroup);\n            });\n        });\n        stackTotalGroup.animate({\n            opacity: 1\n        }, animationConfig);\n    };\n    return AxisAdditions;\n}());\n/* *\n *\n *  Composition\n *\n * */\nvar StackingAxis;\n(function (StackingAxis) {\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    var composedClasses = [];\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Extends axis with stacking support.\n     * @private\n     */\n    function compose(AxisClass, ChartClass, SeriesClass) {\n        if (composedClasses.indexOf(AxisClass) === -1) {\n            composedClasses.push(AxisClass);\n            addEvent(AxisClass, 'init', onAxisInit);\n            addEvent(AxisClass, 'destroy', onAxisDestroy);\n        }\n        if (composedClasses.indexOf(ChartClass) === -1) {\n            composedClasses.push(ChartClass);\n            var chartProto = ChartClass.prototype;\n            chartProto.getStacks = chartGetStacks;\n        }\n        if (composedClasses.indexOf(SeriesClass) === -1) {\n            composedClasses.push(SeriesClass);\n            var seriesProto_1 = SeriesClass.prototype;\n            seriesProto_1.getStackIndicator = seriesGetStackIndicator;\n            seriesProto_1.modifyStacks = seriesModifyStacks;\n            seriesProto_1.percentStacker = seriesPercentStacker;\n            seriesProto_1.setGroupedPoints = seriesSetGroupedPoints;\n            seriesProto_1.setStackedPoints = seriesSetStackedPoints;\n        }\n    }\n    StackingAxis.compose = compose;\n})(StackingAxis || (StackingAxis = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default StackingAxis;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Series from '../../Core/Series/Series.js';\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nimport U from '../../Core/Utilities.js';\nvar defined = U.defined, merge = U.merge;\n/* *\n *\n *  Class\n *\n * */\n/**\n * The line series is the base type and is therefor the series base prototype.\n *\n * @private\n */\nvar LineSeries = /** @class */ (function (_super) {\n    __extends(LineSeries, _super);\n    function LineSeries() {\n        /* *\n         *\n         *  Static Functions\n         *\n         * */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        _this.data = void 0;\n        _this.options = void 0;\n        _this.points = void 0;\n        return _this;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Draw the graph. Called internally when rendering line-like series\n     * types. The first time it generates the `series.graph` item and\n     * optionally other series-wide items like `series.area` for area\n     * charts. On subsequent calls these items are updated with new\n     * positions and attributes.\n     *\n     * @function Highcharts.Series#drawGraph\n     */\n    LineSeries.prototype.drawGraph = function () {\n        var series = this, options = this.options, graphPath = (this.gappedPath || this.getGraphPath).call(this), styledMode = this.chart.styledMode;\n        var props = [[\n                'graph',\n                'highcharts-graph'\n            ]];\n        // Presentational properties\n        if (!styledMode) {\n            props[0].push((options.lineColor ||\n                this.color ||\n                \"#cccccc\" /* Palette.neutralColor20 */ // when colorByPoint = true\n            ), options.dashStyle);\n        }\n        props = series.getZonesGraphs(props);\n        // Draw the graph\n        props.forEach(function (prop, i) {\n            var graphKey = prop[0];\n            var attribs, graph = series[graphKey];\n            var verb = graph ? 'animate' : 'attr';\n            if (graph) {\n                graph.endX = series.preventGraphAnimation ?\n                    null :\n                    graphPath.xMap;\n                graph.animate({ d: graphPath });\n            }\n            else if (graphPath.length) { // #1487\n                /**\n                 * SVG element of area-based charts. Can be used for styling\n                 * purposes. If zones are configured, this element will be\n                 * hidden and replaced by multiple zone areas, accessible\n                 * via `series['zone-area-x']` (where x is a number,\n                 * starting with 0).\n                 *\n                 * @name Highcharts.Series#area\n                 * @type {Highcharts.SVGElement|undefined}\n                 */\n                /**\n                 * SVG element of line-based charts. Can be used for styling\n                 * purposes. If zones are configured, this element will be\n                 * hidden and replaced by multiple zone lines, accessible\n                 * via `series['zone-graph-x']` (where x is a number,\n                 * starting with 0).\n                 *\n                 * @name Highcharts.Series#graph\n                 * @type {Highcharts.SVGElement|undefined}\n                 */\n                series[graphKey] = graph = series.chart.renderer\n                    .path(graphPath)\n                    .addClass(prop[1])\n                    .attr({ zIndex: 1 }) // #1069\n                    .add(series.group);\n            }\n            if (graph && !styledMode) {\n                attribs = {\n                    'stroke': prop[2],\n                    'stroke-width': options.lineWidth || 0,\n                    // Polygon series use filled graph\n                    'fill': (series.fillGraph && series.color) || 'none'\n                };\n                // Apply dash style\n                if (prop[3]) {\n                    attribs.dashstyle = prop[3];\n                    // The reason for the `else if` is that linecaps don't mix well\n                    // with dashstyle. The gaps get partially filled by the\n                    // linecap.\n                }\n                else if (options.linecap !== 'square') {\n                    attribs['stroke-linecap'] =\n                        attribs['stroke-linejoin'] = 'round';\n                }\n                graph[verb](attribs)\n                    // Add shadow to normal series (0) or to first\n                    // zone (1) #3932\n                    .shadow((i < 2) && options.shadow);\n            }\n            // Helpers for animation\n            if (graph) {\n                graph.startX = graphPath.xMap;\n                graph.isArea = graphPath.isArea; // For arearange animation\n            }\n        });\n    };\n    // eslint-disable-next-line valid-jsdoc\n    /**\n     * Get the graph path.\n     *\n     * @private\n     */\n    LineSeries.prototype.getGraphPath = function (points, nullsAsZeroes, connectCliffs) {\n        var series = this, options = series.options, graphPath = [], xMap = [];\n        var gap, step = options.step;\n        points = points || series.points;\n        // Bottom of a stack is reversed\n        var reversed = points.reversed;\n        if (reversed) {\n            points.reverse();\n        }\n        // Reverse the steps (#5004)\n        step = {\n            right: 1,\n            center: 2\n        }[step] || (step && 3);\n        if (step && reversed) {\n            step = 4 - step;\n        }\n        // Remove invalid points, especially in spline (#5015)\n        points = this.getValidPoints(points, false, !(options.connectNulls && !nullsAsZeroes && !connectCliffs));\n        // Build the line\n        points.forEach(function (point, i) {\n            var plotX = point.plotX, plotY = point.plotY, lastPoint = points[i - 1];\n            // the path to this point from the previous\n            var pathToPoint;\n            if ((point.leftCliff || (lastPoint && lastPoint.rightCliff)) &&\n                !connectCliffs) {\n                gap = true; // ... and continue\n            }\n            // Line series, nullsAsZeroes is not handled\n            if (point.isNull && !defined(nullsAsZeroes) && i > 0) {\n                gap = !options.connectNulls;\n                // Area series, nullsAsZeroes is set\n            }\n            else if (point.isNull && !nullsAsZeroes) {\n                gap = true;\n            }\n            else {\n                if (i === 0 || gap) {\n                    pathToPoint = [[\n                            'M',\n                            point.plotX,\n                            point.plotY\n                        ]];\n                    // Generate the spline as defined in the SplineSeries object\n                }\n                else if (series.getPointSpline) {\n                    pathToPoint = [series.getPointSpline(points, point, i)];\n                }\n                else if (step) {\n                    if (step === 1) { // right\n                        pathToPoint = [[\n                                'L',\n                                lastPoint.plotX,\n                                plotY\n                            ]];\n                    }\n                    else if (step === 2) { // center\n                        pathToPoint = [[\n                                'L',\n                                (lastPoint.plotX + plotX) / 2,\n                                lastPoint.plotY\n                            ], [\n                                'L',\n                                (lastPoint.plotX + plotX) / 2,\n                                plotY\n                            ]];\n                    }\n                    else {\n                        pathToPoint = [[\n                                'L',\n                                plotX,\n                                lastPoint.plotY\n                            ]];\n                    }\n                    pathToPoint.push([\n                        'L',\n                        plotX,\n                        plotY\n                    ]);\n                }\n                else {\n                    // normal line to next point\n                    pathToPoint = [[\n                            'L',\n                            plotX,\n                            plotY\n                        ]];\n                }\n                // Prepare for animation. When step is enabled, there are\n                // two path nodes for each x value.\n                xMap.push(point.x);\n                if (step) {\n                    xMap.push(point.x);\n                    if (step === 2) { // step = center (#8073)\n                        xMap.push(point.x);\n                    }\n                }\n                graphPath.push.apply(graphPath, pathToPoint);\n                gap = false;\n            }\n        });\n        graphPath.xMap = xMap;\n        series.graphPath = graphPath;\n        return graphPath;\n    };\n    // eslint-disable-next-line valid-jsdoc\n    /**\n     * Get zones properties for building graphs. Extendable by series with\n     * multiple lines within one series.\n     *\n     * @private\n     */\n    LineSeries.prototype.getZonesGraphs = function (props) {\n        // Add the zone properties if any\n        this.zones.forEach(function (zone, i) {\n            var propset = [\n                'zone-graph-' + i,\n                'highcharts-graph highcharts-zone-graph-' + i + ' ' +\n                    (zone.className || '')\n            ];\n            if (!this.chart.styledMode) {\n                propset.push((zone.color || this.color), (zone.dashStyle || this.options.dashStyle));\n            }\n            props.push(propset);\n        }, this);\n        return props;\n    };\n    LineSeries.defaultOptions = merge(Series.defaultOptions, \n    /**\n     * General options for all series types.\n     *\n     * @optionparent plotOptions.series\n     */\n    {\n    // nothing here yet\n    });\n    return LineSeries;\n}(Series));\nSeriesRegistry.registerSeriesType('line', LineSeries);\n/* *\n *\n *  Default Export\n *\n * */\nexport default LineSeries;\n/* *\n *\n *  API Options\n *\n * */\n/**\n * A line series displays information as a series of data points connected by\n * straight line segments.\n *\n * @sample {highcharts} highcharts/demo/line-basic/\n *         Line chart\n * @sample {highstock} stock/demo/basic-line/\n *         Line chart\n *\n * @extends   plotOptions.series\n * @product   highcharts highstock\n * @apioption plotOptions.line\n */\n/**\n * The SVG value used for the `stroke-linecap` and `stroke-linejoin`\n * of a line graph. Round means that lines are rounded in the ends and\n * bends.\n *\n * @type       {Highcharts.SeriesLinecapValue}\n * @default    round\n * @since      3.0.7\n * @apioption  plotOptions.line.linecap\n */\n/**\n * A `line` series. If the [type](#series.line.type) option is not\n * specified, it is inherited from [chart.type](#chart.type).\n *\n * @extends   series,plotOptions.line\n * @excluding dataParser,dataURL\n * @product   highcharts highstock\n * @apioption series.line\n */\n/**\n * An array of data points for the series. For the `line` series type,\n * points can be given in the following ways:\n *\n * 1. An array of numerical values. In this case, the numerical values will be\n *    interpreted as `y` options. The `x` values will be automatically\n *    calculated, either starting at 0 and incremented by 1, or from\n *    `pointStart` and `pointInterval` given in the series options. If the axis\n *    has categories, these will be used. Example:\n *    ```js\n *    data: [0, 5, 3, 5]\n *    ```\n *\n * 2. An array of arrays with 2 values. In this case, the values correspond to\n *    `x,y`. If the first value is a string, it is applied as the name of the\n *    point, and the `x` value is inferred.\n *    ```js\n *    data: [\n *        [0, 1],\n *        [1, 2],\n *        [2, 8]\n *    ]\n *    ```\n *\n * 3. An array of objects with named values. The following snippet shows only a\n *    few settings, see the complete options set below. If the total number of\n *    data points exceeds the series'\n *    [turboThreshold](#series.line.turboThreshold),\n *    this option is not available.\n *    ```js\n *    data: [{\n *        x: 1,\n *        y: 9,\n *        name: \"Point2\",\n *        color: \"#00FF00\"\n *    }, {\n *        x: 1,\n *        y: 6,\n *        name: \"Point1\",\n *        color: \"#FF00FF\"\n *    }]\n *    ```\n *\n * **Note:** In TypeScript you have to extend `PointOptionsObject` with an\n * additional declaration to allow custom data types:\n * ```ts\n * declare module `highcharts` {\n *   interface PointOptionsObject {\n *     custom: Record<string, (boolean|number|string)>;\n *   }\n * }\n * ```\n *\n * @sample {highcharts} highcharts/chart/reflow-true/\n *         Numerical values\n * @sample {highcharts} highcharts/series/data-array-of-arrays/\n *         Arrays of numeric x and y\n * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n *         Arrays of datetime x and y\n * @sample {highcharts} highcharts/series/data-array-of-name-value/\n *         Arrays of point.name and y\n * @sample {highcharts} highcharts/series/data-array-of-objects/\n *         Config objects\n *\n * @declare   Highcharts.PointOptionsObject\n * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n * @apioption series.line.data\n */\n/**\n * An additional, individual class name for the data point's graphic\n * representation. Changes to a point's color will also be reflected in a\n * chart's legend and tooltip.\n *\n * @sample {highcharts} highcharts/css/point-series-classname\n *\n * @type      {string}\n * @since     5.0.0\n * @product   highcharts gantt\n * @apioption series.line.data.className\n */\n/**\n * Individual color for the point. By default the color is pulled from\n * the global `colors` array.\n *\n * In styled mode, the `color` option doesn't take effect. Instead, use\n * `colorIndex`.\n *\n * @sample {highcharts} highcharts/point/color/\n *         Mark the highest point\n *\n * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n * @product   highcharts highstock gantt\n * @apioption series.line.data.color\n */\n/**\n * A specific color index to use for the point, so its graphic representations\n * are given the class name `highcharts-color-{n}`. In styled mode this will\n * change the color of the graphic. In non-styled mode, the color is set by the\n * `fill` attribute, so the change in class name won't have a visual effect by\n * default.\n *\n * @sample    {highcharts} highcharts/css/colorindex/\n *            Series and point color index\n *\n * @type      {number}\n * @since     5.0.0\n * @product   highcharts gantt\n * @apioption series.line.data.colorIndex\n */\n/**\n * A reserved subspace to store options and values for customized functionality.\n * Here you can add additional data for your own event callbacks and formatter\n * callbacks.\n *\n * @sample {highcharts} highcharts/point/custom/\n *         Point and series with custom data\n *\n * @type      {Highcharts.Dictionary<*>}\n * @apioption series.line.data.custom\n */\n/**\n * Individual data label for each point. The options are the same as\n * the ones for [plotOptions.series.dataLabels](\n * #plotOptions.series.dataLabels).\n *\n * @sample highcharts/point/datalabels/\n *         Show a label for the last value\n *\n * @declare   Highcharts.DataLabelsOptions\n * @extends   plotOptions.line.dataLabels\n * @product   highcharts highstock gantt\n * @apioption series.line.data.dataLabels\n */\n/**\n * A description of the point to add to the screen reader information\n * about the point.\n *\n * @type      {string}\n * @since     5.0.0\n * @requires  modules/accessibility\n * @apioption series.line.data.description\n */\n/**\n * An id for the point. This can be used after render time to get a\n * pointer to the point object through `chart.get()`.\n *\n * @sample {highcharts} highcharts/point/id/\n *         Remove an id'd point\n *\n * @type      {string}\n * @since     1.2.0\n * @product   highcharts highstock gantt\n * @apioption series.line.data.id\n */\n/**\n * The rank for this point's data label in case of collision. If two\n * data labels are about to overlap, only the one with the highest `labelrank`\n * will be drawn.\n *\n * @type      {number}\n * @apioption series.line.data.labelrank\n */\n/**\n * The name of the point as shown in the legend, tooltip, dataLabels, etc.\n *\n * @see [xAxis.uniqueNames](#xAxis.uniqueNames)\n *\n * @sample {highcharts} highcharts/series/data-array-of-objects/\n *         Point names\n *\n * @type      {string}\n * @apioption series.line.data.name\n */\n/**\n * Whether the data point is selected initially.\n *\n * @type      {boolean}\n * @default   false\n * @product   highcharts highstock gantt\n * @apioption series.line.data.selected\n */\n/**\n * The x value of the point. For datetime axes, the X value is the timestamp\n * in milliseconds since 1970.\n *\n * @type      {number}\n * @product   highcharts highstock\n * @apioption series.line.data.x\n */\n/**\n * The y value of the point.\n *\n * @type      {number|null}\n * @product   highcharts highstock\n * @apioption series.line.data.y\n */\n/**\n * The individual point events.\n *\n * @extends   plotOptions.series.point.events\n * @product   highcharts highstock gantt\n * @apioption series.line.data.events\n */\n/**\n * Options for the point markers of line-like series.\n *\n * @declare   Highcharts.PointMarkerOptionsObject\n * @extends   plotOptions.series.marker\n * @product   highcharts highstock\n * @apioption series.line.data.marker\n */\n''; // include precedent doclets in transpilat\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Color from '../../Core/Color/Color.js';\nvar color = Color.parse;\nimport LegendSymbol from '../../Core/Legend/LegendSymbol.js';\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nvar LineSeries = SeriesRegistry.seriesTypes.line;\nimport U from '../../Core/Utilities.js';\nvar extend = U.extend, merge = U.merge, objectEach = U.objectEach, pick = U.pick;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Area series type.\n *\n * @private\n * @class\n * @name AreaSeries\n *\n * @augments LineSeries\n */\nvar AreaSeries = /** @class */ (function (_super) {\n    __extends(AreaSeries, _super);\n    function AreaSeries() {\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.data = void 0;\n        _this.options = void 0;\n        _this.points = void 0;\n        return _this;\n        /* eslint-enable valid-jsdoc */\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Draw the graph and the underlying area. This method calls the Series\n     * base function and adds the area. The areaPath is calculated in the\n     * getSegmentPath method called from Series.prototype.drawGraph.\n     * @private\n     */\n    AreaSeries.prototype.drawGraph = function () {\n        // Define or reset areaPath\n        this.areaPath = [];\n        // Call the base method\n        _super.prototype.drawGraph.apply(this);\n        // Define local variables\n        var series = this, areaPath = this.areaPath, options = this.options, zones = this.zones, props = [[\n                'area',\n                'highcharts-area',\n                this.color,\n                options.fillColor\n            ]]; // area name, main color, fill color\n        zones.forEach(function (zone, i) {\n            props.push([\n                'zone-area-' + i,\n                'highcharts-area highcharts-zone-area-' + i + ' ' +\n                    zone.className,\n                zone.color || series.color,\n                zone.fillColor || options.fillColor\n            ]);\n        });\n        props.forEach(function (prop) {\n            var areaKey = prop[0], attribs = {};\n            var area = series[areaKey];\n            var verb = area ? 'animate' : 'attr';\n            // Create or update the area\n            if (area) { // update\n                area.endX = series.preventGraphAnimation ?\n                    null :\n                    areaPath.xMap;\n                area.animate({ d: areaPath });\n            }\n            else { // create\n                attribs.zIndex = 0; // #1069\n                area = series[areaKey] = series.chart.renderer\n                    .path(areaPath)\n                    .addClass(prop[1])\n                    .add(series.group);\n                area.isArea = true;\n            }\n            if (!series.chart.styledMode) {\n                attribs.fill = pick(prop[3], color(prop[2])\n                    .setOpacity(pick(options.fillOpacity, 0.75))\n                    .get());\n            }\n            area[verb](attribs);\n            area.startX = areaPath.xMap;\n            area.shiftUnit = options.step ? 2 : 1;\n        });\n    };\n    /**\n     * @private\n     */\n    AreaSeries.prototype.getGraphPath = function (points) {\n        var getGraphPath = LineSeries.prototype.getGraphPath, options = this.options, stacking = options.stacking, yAxis = this.yAxis, bottomPoints = [], graphPoints = [], seriesIndex = this.index, stacks = yAxis.stacking.stacks[this.stackKey], threshold = options.threshold, translatedThreshold = Math.round(// #10909\n        yAxis.getThreshold(options.threshold)), connectNulls = pick(// #10574\n        options.connectNulls, stacking === 'percent'), \n        // To display null points in underlying stacked series, this\n        // series graph must be broken, and the area also fall down to\n        // fill the gap left by the null point. #2069\n        addDummyPoints = function (i, otherI, side) {\n            var point = points[i], stackedValues = stacking &&\n                stacks[point.x].points[seriesIndex], nullVal = point[side + 'Null'] || 0, cliffVal = point[side + 'Cliff'] || 0;\n            var top, bottom, isNull = true;\n            if (cliffVal || nullVal) {\n                top = (nullVal ?\n                    stackedValues[0] :\n                    stackedValues[1]) + cliffVal;\n                bottom = stackedValues[0] + cliffVal;\n                isNull = !!nullVal;\n            }\n            else if (!stacking &&\n                points[otherI] &&\n                points[otherI].isNull) {\n                top = bottom = threshold;\n            }\n            // Add to the top and bottom line of the area\n            if (typeof top !== 'undefined') {\n                graphPoints.push({\n                    plotX: plotX,\n                    plotY: top === null ?\n                        translatedThreshold :\n                        yAxis.getThreshold(top),\n                    isNull: isNull,\n                    isCliff: true\n                });\n                bottomPoints.push({\n                    plotX: plotX,\n                    plotY: bottom === null ?\n                        translatedThreshold :\n                        yAxis.getThreshold(bottom),\n                    doCurve: false // #1041, gaps in areaspline areas\n                });\n            }\n        };\n        var plotX, isNull, yBottom;\n        // Find what points to use\n        points = points || this.points;\n        // Fill in missing points\n        if (stacking) {\n            points = this.getStackPoints(points);\n        }\n        for (var i = 0, iEnd = points.length; i < iEnd; ++i) {\n            // Reset after series.update of stacking property (#12033)\n            if (!stacking) {\n                points[i].leftCliff = points[i].rightCliff =\n                    points[i].leftNull = points[i].rightNull = void 0;\n            }\n            isNull = points[i].isNull;\n            plotX = pick(points[i].rectPlotX, points[i].plotX);\n            yBottom = stacking ?\n                pick(points[i].yBottom, translatedThreshold) :\n                translatedThreshold;\n            if (!isNull || connectNulls) {\n                if (!connectNulls) {\n                    addDummyPoints(i, i - 1, 'left');\n                }\n                // Skip null point when stacking is false and connectNulls\n                // true\n                if (!(isNull && !stacking && connectNulls)) {\n                    graphPoints.push(points[i]);\n                    bottomPoints.push({\n                        x: i,\n                        plotX: plotX,\n                        plotY: yBottom\n                    });\n                }\n                if (!connectNulls) {\n                    addDummyPoints(i, i + 1, 'right');\n                }\n            }\n        }\n        var topPath = getGraphPath.call(this, graphPoints, true, true);\n        bottomPoints.reversed = true;\n        var bottomPath = getGraphPath.call(this, bottomPoints, true, true);\n        var firstBottomPoint = bottomPath[0];\n        if (firstBottomPoint && firstBottomPoint[0] === 'M') {\n            bottomPath[0] = ['L', firstBottomPoint[1], firstBottomPoint[2]];\n        }\n        var areaPath = topPath.concat(bottomPath);\n        if (areaPath.length) {\n            areaPath.push(['Z']);\n        }\n        // TODO: don't set leftCliff and rightCliff when connectNulls?\n        var graphPath = getGraphPath\n            .call(this, graphPoints, false, connectNulls);\n        areaPath.xMap = topPath.xMap;\n        this.areaPath = areaPath;\n        return graphPath;\n    };\n    /**\n     * Return an array of stacked points, where null and missing points are\n     * replaced by dummy points in order for gaps to be drawn correctly in\n     * stacks.\n     * @private\n     */\n    AreaSeries.prototype.getStackPoints = function (points) {\n        var series = this, segment = [], keys = [], xAxis = this.xAxis, yAxis = this.yAxis, stack = yAxis.stacking.stacks[this.stackKey], pointMap = {}, yAxisSeries = yAxis.series, seriesLength = yAxisSeries.length, upOrDown = yAxis.options.reversedStacks ? 1 : -1, seriesIndex = yAxisSeries.indexOf(series);\n        points = points || this.points;\n        if (this.options.stacking) {\n            for (var i = 0; i < points.length; i++) {\n                // Reset after point update (#7326)\n                points[i].leftNull = points[i].rightNull = void 0;\n                // Create a map where we can quickly look up the points by\n                // their X values.\n                pointMap[points[i].x] = points[i];\n            }\n            // Sort the keys (#1651)\n            objectEach(stack, function (stackX, x) {\n                // nulled after switching between\n                // grouping and not (#1651, #2336)\n                if (stackX.total !== null) {\n                    keys.push(x);\n                }\n            });\n            keys.sort(function (a, b) {\n                return a - b;\n            });\n            var visibleSeries_1 = yAxisSeries.map(function (s) { return s.visible; });\n            keys.forEach(function (x, idx) {\n                var y = 0, stackPoint, stackedValues;\n                if (pointMap[x] && !pointMap[x].isNull) {\n                    segment.push(pointMap[x]);\n                    // Find left and right cliff. -1 goes left, 1 goes\n                    // right.\n                    [-1, 1].forEach(function (direction) {\n                        var nullName = direction === 1 ?\n                            'rightNull' :\n                            'leftNull', cliffName = direction === 1 ?\n                            'rightCliff' :\n                            'leftCliff', otherStack = stack[keys[idx + direction]];\n                        var cliff = 0;\n                        // If there is a stack next to this one,\n                        // to the left or to the right...\n                        if (otherStack) {\n                            var i = seriesIndex;\n                            // Can go either up or down,\n                            // depending on reversedStacks\n                            while (i >= 0 && i < seriesLength) {\n                                var si = yAxisSeries[i].index;\n                                stackPoint = otherStack.points[si];\n                                if (!stackPoint) {\n                                    // If the next point in this series is\n                                    // missing, mark the point with\n                                    // point.leftNull or point.rightNull = true.\n                                    if (si === series.index) {\n                                        pointMap[x][nullName] = true;\n                                        // If there are missing points in the next\n                                        // stack in any of the series below this\n                                        // one, we need to substract the missing\n                                        // values and add a hiatus to the left or\n                                        // right.\n                                    }\n                                    else if (visibleSeries_1[i]) {\n                                        stackedValues = stack[x].points[si];\n                                        if (stackedValues) {\n                                            cliff -= (stackedValues[1] -\n                                                stackedValues[0]);\n                                        }\n                                    }\n                                }\n                                // When reversedStacks is true, loop up,\n                                // else loop down\n                                i += upOrDown;\n                            }\n                        }\n                        pointMap[x][cliffName] = cliff;\n                    });\n                    // There is no point for this X value in this series, so we\n                    // insert a dummy point in order for the areas to be drawn\n                    // correctly.\n                }\n                else {\n                    // Loop down the stack to find the series below this\n                    // one that has a value (#1991)\n                    var i = seriesIndex;\n                    while (i >= 0 && i < seriesLength) {\n                        var si = yAxisSeries[i].index;\n                        stackPoint = stack[x].points[si];\n                        if (stackPoint) {\n                            y = stackPoint[1];\n                            break;\n                        }\n                        // When reversedStacks is true, loop up, else loop\n                        // down\n                        i += upOrDown;\n                    }\n                    y = pick(y, 0);\n                    y = yAxis.translate(// #6272\n                    y, 0, 1, 0, 1);\n                    segment.push({\n                        isNull: true,\n                        plotX: xAxis.translate(// #6272\n                        x, 0, 0, 0, 1),\n                        x: x,\n                        plotY: y,\n                        yBottom: y\n                    });\n                }\n            });\n        }\n        return segment;\n    };\n    /**\n     * The area series type.\n     *\n     * @sample {highcharts} highcharts/demo/area-basic/\n     *         Area chart\n     * @sample {highstock} stock/demo/area/\n     *         Area chart\n     *\n     * @extends      plotOptions.line\n     * @excluding    useOhlcData\n     * @product      highcharts highstock\n     * @optionparent plotOptions.area\n     */\n    AreaSeries.defaultOptions = merge(LineSeries.defaultOptions, {\n        /**\n         * @see [fillColor](#plotOptions.area.fillColor)\n         * @see [fillOpacity](#plotOptions.area.fillOpacity)\n         *\n         * @apioption plotOptions.area.color\n         */\n        /**\n         * Fill color or gradient for the area. When `null`, the series' `color`\n         * is used with the series' `fillOpacity`.\n         *\n         * In styled mode, the fill color can be set with the `.highcharts-area`\n         * class name.\n         *\n         * @see [color](#plotOptions.area.color)\n         * @see [fillOpacity](#plotOptions.area.fillOpacity)\n         *\n         * @sample {highcharts} highcharts/plotoptions/area-fillcolor-default/\n         *         Null by default\n         * @sample {highcharts} highcharts/plotoptions/area-fillcolor-gradient/\n         *         Gradient\n         *\n         * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highcharts highstock\n         * @apioption plotOptions.area.fillColor\n         */\n        /**\n         * Fill opacity for the area. When you set an explicit `fillColor`,\n         * the `fillOpacity` is not applied. Instead, you should define the\n         * opacity in the `fillColor` with an rgba color definition. The\n         * `fillOpacity` setting, also the default setting, overrides the alpha\n         * component of the `color` setting.\n         *\n         * In styled mode, the fill opacity can be set with the\n         * `.highcharts-area` class name.\n         *\n         * @see [color](#plotOptions.area.color)\n         * @see [fillColor](#plotOptions.area.fillColor)\n         *\n         * @sample {highcharts} highcharts/plotoptions/area-fillopacity/\n         *         Automatic fill color and fill opacity of 0.1\n         *\n         * @type      {number}\n         * @default   {highcharts} 0.75\n         * @default   {highstock} 0.75\n         * @product   highcharts highstock\n         * @apioption plotOptions.area.fillOpacity\n         */\n        /**\n         * A separate color for the graph line. By default the line takes the\n         * `color` of the series, but the lineColor setting allows setting a\n         * separate color for the line without altering the `fillColor`.\n         *\n         * In styled mode, the line stroke can be set with the\n         * `.highcharts-graph` class name.\n         *\n         * @sample {highcharts} highcharts/plotoptions/area-linecolor/\n         *         Dark gray line\n         *\n         * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highcharts highstock\n         * @apioption plotOptions.area.lineColor\n         */\n        /**\n         * A separate color for the negative part of the area.\n         *\n         * In styled mode, a negative color is set with the\n         * `.highcharts-negative` class name.\n         *\n         * @see [negativeColor](#plotOptions.area.negativeColor)\n         *\n         * @sample {highcharts} highcharts/css/series-negative-color/\n         *         Negative color in styled mode\n         *\n         * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @since     3.0\n         * @product   highcharts\n         * @apioption plotOptions.area.negativeFillColor\n         */\n        /**\n         * Whether the whole area or just the line should respond to mouseover\n         * tooltips and other mouse or touch events.\n         *\n         * @sample {highcharts|highstock} highcharts/plotoptions/area-trackbyarea/\n         *         Display the tooltip when the area is hovered\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     1.1.6\n         * @product   highcharts highstock\n         * @apioption plotOptions.area.trackByArea\n         */\n        /**\n         * The Y axis value to serve as the base for the area, for\n         * distinguishing between values above and below a threshold. The area\n         * between the graph and the threshold is filled.\n         *\n         * * If a number is given, the Y axis will scale to the threshold.\n         * * If `null`, the scaling behaves like a line series with fill between\n         *   the graph and the Y axis minimum.\n         * * If `Infinity` or `-Infinity`, the area between the graph and the\n         *   corresponding Y axis extreme is filled (since v6.1.0).\n         *\n         * @sample {highcharts} highcharts/plotoptions/area-threshold/\n         *         A threshold of 100\n         * @sample {highcharts} highcharts/plotoptions/area-threshold-infinity/\n         *         A threshold of Infinity\n         *\n         * @type    {number|null}\n         * @since   2.0\n         * @product highcharts highstock\n         */\n        threshold: 0\n    });\n    return AreaSeries;\n}(LineSeries));\nextend(AreaSeries.prototype, {\n    singleStacks: false,\n    drawLegendSymbol: LegendSymbol.drawRectangle\n});\nSeriesRegistry.registerSeriesType('area', AreaSeries);\n/* *\n *\n *  Default Export\n *\n * */\nexport default AreaSeries;\n/* *\n *\n *  API Options\n *\n * */\n/**\n * A `area` series. If the [type](#series.area.type) option is not\n * specified, it is inherited from [chart.type](#chart.type).\n *\n * @extends   series,plotOptions.area\n * @excluding dataParser, dataURL, useOhlcData\n * @product   highcharts highstock\n * @apioption series.area\n */\n/**\n * @see [fillColor](#series.area.fillColor)\n * @see [fillOpacity](#series.area.fillOpacity)\n *\n * @apioption series.area.color\n */\n/**\n * An array of data points for the series. For the `area` series type,\n * points can be given in the following ways:\n *\n * 1. An array of numerical values. In this case, the numerical values will be\n *    interpreted as `y` options. The `x` values will be automatically\n *    calculated, either starting at 0 and incremented by 1, or from\n *    `pointStart` * and `pointInterval` given in the series options. If the\n *    axis has categories, these will be used. Example:\n *    ```js\n *    data: [0, 5, 3, 5]\n *    ```\n *\n * 2. An array of arrays with 2 values. In this case, the values correspond to\n *    `x,y`. If the first value is a string, it is applied as the name of the\n *    point, and the `x` value is inferred.\n *    ```js\n *    data: [\n *        [0, 9],\n *        [1, 7],\n *        [2, 6]\n *    ]\n *    ```\n *\n * 3. An array of objects with named values. The following snippet shows only a\n *    few settings, see the complete options set below. If the total number of\n *    data points exceeds the series'\n *    [turboThreshold](#series.area.turboThreshold), this option is not\n *    available.\n *    ```js\n *    data: [{\n *        x: 1,\n *        y: 9,\n *        name: \"Point2\",\n *        color: \"#00FF00\"\n *    }, {\n *        x: 1,\n *        y: 6,\n *        name: \"Point1\",\n *        color: \"#FF00FF\"\n *    }]\n *    ```\n *\n * @sample {highcharts} highcharts/chart/reflow-true/\n *         Numerical values\n * @sample {highcharts} highcharts/series/data-array-of-arrays/\n *         Arrays of numeric x and y\n * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n *         Arrays of datetime x and y\n * @sample {highcharts} highcharts/series/data-array-of-name-value/\n *         Arrays of point.name and y\n * @sample {highcharts} highcharts/series/data-array-of-objects/\n *         Config objects\n *\n * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n * @extends   series.line.data\n * @product   highcharts highstock\n * @apioption series.area.data\n */\n/**\n * @see [color](#series.area.color)\n * @see [fillOpacity](#series.area.fillOpacity)\n *\n * @apioption series.area.fillColor\n */\n/**\n * @see [color](#series.area.color)\n * @see [fillColor](#series.area.fillColor)\n *\n * @default   {highcharts} 0.75\n * @default   {highstock} 0.75\n * @apioption series.area.fillOpacity\n */\n''; // adds doclets above to transpilat\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nvar LineSeries = SeriesRegistry.seriesTypes.line;\nimport U from '../../Core/Utilities.js';\nvar merge = U.merge, pick = U.pick;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Spline series type.\n *\n * @private\n */\nvar SplineSeries = /** @class */ (function (_super) {\n    __extends(SplineSeries, _super);\n    function SplineSeries() {\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        _this.data = void 0;\n        _this.options = void 0;\n        _this.points = void 0;\n        return _this;\n        /* eslint-enable valid-jsdoc */\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Get the spline segment from a given point's previous neighbour to the\n     * given point.\n     *\n     * @private\n     * @function Highcharts.seriesTypes.spline#getPointSpline\n     */\n    SplineSeries.prototype.getPointSpline = function (points, point, i) {\n        var \n        // 1 means control points midway between points, 2 means 1/3\n        // from the point, 3 is 1/4 etc\n        smoothing = 1.5, denom = smoothing + 1, plotX = point.plotX || 0, plotY = point.plotY || 0, lastPoint = points[i - 1], nextPoint = points[i + 1];\n        var leftContX, leftContY, rightContX, rightContY;\n        /**\n         * @private\n         */\n        function doCurve(otherPoint) {\n            return otherPoint &&\n                !otherPoint.isNull &&\n                otherPoint.doCurve !== false &&\n                // #6387, area splines next to null:\n                !point.isCliff;\n        }\n        // Find control points\n        if (doCurve(lastPoint) && doCurve(nextPoint)) {\n            var lastX = lastPoint.plotX || 0, lastY = lastPoint.plotY || 0, nextX = nextPoint.plotX || 0, nextY = nextPoint.plotY || 0;\n            var correction = 0;\n            leftContX = (smoothing * plotX + lastX) / denom;\n            leftContY = (smoothing * plotY + lastY) / denom;\n            rightContX = (smoothing * plotX + nextX) / denom;\n            rightContY = (smoothing * plotY + nextY) / denom;\n            // Have the two control points make a straight line through main\n            // point\n            if (rightContX !== leftContX) { // #5016, division by zero\n                correction = (((rightContY - leftContY) *\n                    (rightContX - plotX)) /\n                    (rightContX - leftContX) + plotY - rightContY);\n            }\n            leftContY += correction;\n            rightContY += correction;\n            // to prevent false extremes, check that control points are\n            // between neighbouring points' y values\n            if (leftContY > lastY && leftContY > plotY) {\n                leftContY = Math.max(lastY, plotY);\n                // mirror of left control point\n                rightContY = 2 * plotY - leftContY;\n            }\n            else if (leftContY < lastY && leftContY < plotY) {\n                leftContY = Math.min(lastY, plotY);\n                rightContY = 2 * plotY - leftContY;\n            }\n            if (rightContY > nextY && rightContY > plotY) {\n                rightContY = Math.max(nextY, plotY);\n                leftContY = 2 * plotY - rightContY;\n            }\n            else if (rightContY < nextY && rightContY < plotY) {\n                rightContY = Math.min(nextY, plotY);\n                leftContY = 2 * plotY - rightContY;\n            }\n            // record for drawing in next point\n            point.rightContX = rightContX;\n            point.rightContY = rightContY;\n        }\n        // Visualize control points for debugging\n        /*\n        if (leftContX) {\n            this.chart.renderer.circle(\n                    leftContX + this.chart.plotLeft,\n                    leftContY + this.chart.plotTop,\n                    2\n                )\n                .attr({\n                    stroke: 'red',\n                    'stroke-width': 2,\n                    fill: 'none',\n                    zIndex: 9\n                })\n                .add();\n            this.chart.renderer.path(['M', leftContX + this.chart.plotLeft,\n                leftContY + this.chart.plotTop,\n                'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])\n                .attr({\n                    stroke: 'red',\n                    'stroke-width': 2,\n                    zIndex: 9\n                })\n                .add();\n        }\n        if (rightContX) {\n            this.chart.renderer.circle(\n                    rightContX + this.chart.plotLeft,\n                    rightContY + this.chart.plotTop,\n                    2\n                )\n                .attr({\n                    stroke: 'green',\n                    'stroke-width': 2,\n                    fill: 'none',\n                    zIndex: 9\n                })\n                .add();\n            this.chart.renderer.path(['M', rightContX + this.chart.plotLeft,\n                rightContY + this.chart.plotTop,\n                'L', plotX + this.chart.plotLeft, plotY + this.chart.plotTop])\n                .attr({\n                    stroke: 'green',\n                    'stroke-width': 2,\n                    zIndex: 9\n                })\n                .add();\n        }\n        // */\n        var ret = [\n            'C',\n            pick(lastPoint.rightContX, lastPoint.plotX, 0),\n            pick(lastPoint.rightContY, lastPoint.plotY, 0),\n            pick(leftContX, plotX, 0),\n            pick(leftContY, plotY, 0),\n            plotX,\n            plotY\n        ];\n        // reset for updating series later\n        lastPoint.rightContX = lastPoint.rightContY = void 0;\n        return ret;\n    };\n    /**\n     * A spline series is a special type of line series, where the segments\n     * between the data points are smoothed.\n     *\n     * @sample {highcharts} highcharts/demo/spline-irregular-time/\n     *         Spline chart\n     * @sample {highstock} stock/demo/spline/\n     *         Spline chart\n     *\n     * @extends      plotOptions.series\n     * @excluding    step, boostThreshold, boostBlending\n     * @product      highcharts highstock\n     * @optionparent plotOptions.spline\n     */\n    SplineSeries.defaultOptions = merge(LineSeries.defaultOptions);\n    return SplineSeries;\n}(LineSeries));\nSeriesRegistry.registerSeriesType('spline', SplineSeries);\n/* *\n *\n *  Default Export\n *\n * */\nexport default SplineSeries;\n/* *\n *\n *  API Options\n *\n * */\n/**\n * A `spline` series. If the [type](#series.spline.type) option is\n * not specified, it is inherited from [chart.type](#chart.type).\n *\n * @extends   series,plotOptions.spline\n * @excluding dataParser, dataURL, step, boostThreshold, boostBlending\n * @product   highcharts highstock\n * @apioption series.spline\n */\n/**\n * An array of data points for the series. For the `spline` series type,\n * points can be given in the following ways:\n *\n * 1. An array of numerical values. In this case, the numerical values will be\n *    interpreted as `y` options. The `x` values will be automatically\n *    calculated, either starting at 0 and incremented by 1, or from\n *    `pointStart` and `pointInterval` given in the series options. If the axis\n *    has categories, these will be used. Example:\n *    ```js\n *    data: [0, 5, 3, 5]\n *    ```\n *\n * 2. An array of arrays with 2 values. In this case, the values correspond to\n *    `x,y`. If the first value is a string, it is applied as the name of the\n *    point, and the `x` value is inferred.\n *    ```js\n *    data: [\n *        [0, 9],\n *        [1, 2],\n *        [2, 8]\n *    ]\n *    ```\n *\n * 3. An array of objects with named values. The following snippet shows only a\n *    few settings, see the complete options set below. If the total number of\n *    data points exceeds the series'\n *    [turboThreshold](#series.spline.turboThreshold),\n *    this option is not available.\n *    ```js\n *    data: [{\n *        x: 1,\n *        y: 9,\n *        name: \"Point2\",\n *        color: \"#00FF00\"\n *    }, {\n *        x: 1,\n *        y: 0,\n *        name: \"Point1\",\n *        color: \"#FF00FF\"\n *    }]\n *    ```\n *\n * @sample {highcharts} highcharts/chart/reflow-true/\n *         Numerical values\n * @sample {highcharts} highcharts/series/data-array-of-arrays/\n *         Arrays of numeric x and y\n * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n *         Arrays of datetime x and y\n * @sample {highcharts} highcharts/series/data-array-of-name-value/\n *         Arrays of point.name and y\n * @sample {highcharts} highcharts/series/data-array-of-objects/\n *         Config objects\n *\n * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n * @extends   series.line.data\n * @product   highcharts highstock\n * @apioption series.spline.data\n */\n''; // adds doclets above intro transpilat\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport SplineSeries from '../Spline/SplineSeries.js';\nimport LegendSymbol from '../../Core/Legend/LegendSymbol.js';\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nvar _a = SeriesRegistry.seriesTypes, AreaSeries = _a.area, areaProto = _a.area.prototype;\nimport U from '../../Core/Utilities.js';\nvar extend = U.extend, merge = U.merge;\n/* *\n *\n *  Class\n *\n * */\n/**\n * AreaSpline series type.\n *\n * @private\n * @class\n * @name Highcharts.seriesTypes.areaspline\n *\n * @augments Highcharts.Series\n */\nvar AreaSplineSeries = /** @class */ (function (_super) {\n    __extends(AreaSplineSeries, _super);\n    function AreaSplineSeries() {\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        _this.data = void 0;\n        _this.points = void 0;\n        _this.options = void 0;\n        return _this;\n    }\n    AreaSplineSeries.defaultOptions = merge(SplineSeries.defaultOptions, AreaSeries.defaultOptions);\n    return AreaSplineSeries;\n}(SplineSeries));\nextend(AreaSplineSeries.prototype, {\n    getGraphPath: areaProto.getGraphPath,\n    getStackPoints: areaProto.getStackPoints,\n    drawGraph: areaProto.drawGraph,\n    drawLegendSymbol: LegendSymbol.drawRectangle\n});\nSeriesRegistry.registerSeriesType('areaspline', AreaSplineSeries);\n/* *\n *\n *  Default Export\n *\n * */\nexport default AreaSplineSeries;\n/* *\n *\n *  API Options\n *\n * */\n/**\n * The area spline series is an area series where the graph between the\n * points is smoothed into a spline.\n *\n * @sample {highcharts} highcharts/demo/areaspline/\n *         Area spline chart\n * @sample {highstock} stock/demo/areaspline/\n *         Area spline chart\n *\n * @extends   plotOptions.area\n * @excluding step, boostThreshold, boostBlending\n * @product   highcharts highstock\n * @apioption plotOptions.areaspline\n */\n/**\n * @see [fillColor](#plotOptions.areaspline.fillColor)\n * @see [fillOpacity](#plotOptions.areaspline.fillOpacity)\n *\n * @apioption plotOptions.areaspline.color\n */\n/**\n * @see [color](#plotOptions.areaspline.color)\n * @see [fillOpacity](#plotOptions.areaspline.fillOpacity)\n *\n * @apioption plotOptions.areaspline.fillColor\n */\n/**\n * @see [color](#plotOptions.areaspline.color)\n * @see [fillColor](#plotOptions.areaspline.fillColor)\n *\n * @default   0.75\n * @apioption plotOptions.areaspline.fillOpacity\n */\n/**\n * A `areaspline` series. If the [type](#series.areaspline.type) option\n * is not specified, it is inherited from [chart.type](#chart.type).\n *\n *\n * @extends   series,plotOptions.areaspline\n * @excluding dataParser, dataURL, step, boostThreshold, boostBlending\n * @product   highcharts highstock\n * @apioption series.areaspline\n */\n/**\n * @see [fillColor](#series.areaspline.fillColor)\n * @see [fillOpacity](#series.areaspline.fillOpacity)\n *\n * @apioption series.areaspline.color\n */\n/**\n * An array of data points for the series. For the `areaspline` series\n * type, points can be given in the following ways:\n *\n * 1. An array of numerical values. In this case, the numerical values will be\n *    interpreted as `y` options. The `x` values will be automatically\n *    calculated, either starting at 0 and incremented by 1, or from\n *    `pointStart` and `pointInterval` given in the series options. If the axis\n *    has categories, these will be used. Example:\n *    ```js\n *    data: [0, 5, 3, 5]\n *    ```\n *\n * 2. An array of arrays with 2 values. In this case, the values correspond to\n *    `x,y`. If the first value is a string, it is applied as the name of the\n *    point, and the `x` value is inferred.\n *    ```js\n *    data: [\n *        [0, 10],\n *        [1, 9],\n *        [2, 3]\n *    ]\n *    ```\n *\n * 3. An array of objects with named values. The following snippet shows only a\n *    few settings, see the complete options set below. If the total number of\n *    data points exceeds the series'\n *    [turboThreshold](#series.areaspline.turboThreshold), this option is not\n *    available.\n *    ```js\n *    data: [{\n *        x: 1,\n *        y: 4,\n *        name: \"Point2\",\n *        color: \"#00FF00\"\n *    }, {\n *        x: 1,\n *        y: 4,\n *        name: \"Point1\",\n *        color: \"#FF00FF\"\n *    }]\n *    ```\n *\n * @sample {highcharts} highcharts/chart/reflow-true/\n *         Numerical values\n * @sample {highcharts} highcharts/series/data-array-of-arrays/\n *         Arrays of numeric x and y\n * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n *         Arrays of datetime x and y\n * @sample {highcharts} highcharts/series/data-array-of-name-value/\n *         Arrays of point.name and y\n * @sample {highcharts} highcharts/series/data-array-of-objects/\n *         Config objects\n *\n * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n * @extends   series.line.data\n * @product   highcharts highstock\n * @apioption series.areaspline.data\n */\n/**\n * @see [color](#series.areaspline.color)\n * @see [fillOpacity](#series.areaspline.fillOpacity)\n *\n * @apioption series.areaspline.fillColor\n */\n/**\n * @see [color](#series.areaspline.color)\n * @see [fillColor](#series.areaspline.fillColor)\n *\n * @default   0.75\n * @apioption series.areaspline.fillOpacity\n */\n''; // adds doclets above into transpilat\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport A from '../Animation/AnimationUtilities.js';\nvar getDeferredAnimation = A.getDeferredAnimation;\nimport F from '../FormatUtilities.js';\nvar format = F.format;\nimport U from '../Utilities.js';\nvar defined = U.defined, extend = U.extend, fireEvent = U.fireEvent, isArray = U.isArray, isString = U.isString, merge = U.merge, objectEach = U.objectEach, pick = U.pick, splat = U.splat;\n/* *\n *\n *  Composition\n *\n * */\n/* eslint-disable valid-jsdoc */\nvar DataLabel;\n(function (DataLabel) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    var composedClasses = [];\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Align each individual data label.\n     * @private\n     */\n    function alignDataLabel(point, dataLabel, options, alignTo, isNew) {\n        var series = this, chart = this.chart, inverted = this.isCartesian && chart.inverted, enabledDataSorting = this.enabledDataSorting, plotX = point.plotX, plotY = point.plotY, rotation = options.rotation, align = options.align, isInsidePlot = defined(plotX) &&\n            defined(plotY) &&\n            chart.isInsidePlot(plotX, Math.round(plotY), {\n                inverted: inverted,\n                paneCoordinates: true,\n                series: series\n            }), setStartPos = function (alignOptions) {\n            if (enabledDataSorting && series.xAxis && !justify) {\n                series.setDataLabelStartPos(point, dataLabel, isNew, isInsidePlot, alignOptions);\n            }\n        };\n        var baseline, rotCorr, // rotation correction\n        // Math.round for rounding errors (#2683), alignTo to allow column\n        // labels (#2700)\n        alignAttr, // the final position;\n        justify = pick(options.overflow, (enabledDataSorting ? 'none' : 'justify')) === 'justify', visible = this.visible &&\n            point.visible !== false &&\n            defined(plotX) &&\n            (point.series.forceDL ||\n                (enabledDataSorting && !justify) ||\n                isInsidePlot ||\n                (\n                // If the data label is inside the align box, it is\n                // enough that parts of the align box is inside the\n                // plot area (#12370). When stacking, it is always\n                // inside regardless of the option (#15148).\n                pick(options.inside, !!this.options.stacking) &&\n                    alignTo &&\n                    chart.isInsidePlot(plotX, inverted ?\n                        alignTo.x + 1 :\n                        alignTo.y + alignTo.height - 1, {\n                        inverted: inverted,\n                        paneCoordinates: true,\n                        series: series\n                    })));\n        var pos = point.pos();\n        if (visible && pos) {\n            if (rotation) {\n                dataLabel.attr({ align: align });\n            }\n            var bBox = dataLabel.getBBox(true), bBoxCorrection = [0, 0];\n            baseline = chart.renderer.fontMetrics(chart.styledMode ? void 0 : options.style.fontSize, dataLabel).b;\n            // The alignment box is a singular point\n            alignTo = extend({\n                x: pos[0],\n                y: Math.round(pos[1]),\n                width: 0,\n                height: 0\n            }, alignTo);\n            // Add the text size for alignment calculation\n            extend(options, {\n                width: bBox.width,\n                height: bBox.height\n            });\n            // Allow a hook for changing alignment in the last moment, then do\n            // the alignment\n            if (rotation) {\n                justify = false; // Not supported for rotated text\n                rotCorr = chart.renderer.rotCorr(baseline, rotation); // #3723\n                alignAttr = {\n                    x: (alignTo.x +\n                        (options.x || 0) +\n                        alignTo.width / 2 +\n                        rotCorr.x),\n                    y: (alignTo.y +\n                        (options.y || 0) +\n                        { top: 0, middle: 0.5, bottom: 1 }[options.verticalAlign] *\n                            alignTo.height)\n                };\n                bBoxCorrection = [\n                    bBox.x - Number(dataLabel.attr('x')),\n                    bBox.y - Number(dataLabel.attr('y'))\n                ];\n                setStartPos(alignAttr); // data sorting\n                dataLabel[isNew ? 'attr' : 'animate'](alignAttr);\n            }\n            else {\n                setStartPos(alignTo); // data sorting\n                dataLabel.align(options, void 0, alignTo);\n                alignAttr = dataLabel.alignAttr;\n            }\n            // Handle justify or crop\n            if (justify && alignTo.height >= 0) { // #8830\n                this.justifyDataLabel(dataLabel, options, alignAttr, bBox, alignTo, isNew);\n                // Now check that the data label is within the plot area\n            }\n            else if (pick(options.crop, true)) {\n                var x = alignAttr.x, y = alignAttr.y;\n                x += bBoxCorrection[0];\n                y += bBoxCorrection[1];\n                // Uncomment this block to visualize the bounding boxes used for\n                // determining visibility\n                /*\n                chart.renderer.rect(\n                    chart.plotLeft + alignAttr.x + bBox.x,\n                    chart.plotTop + alignAttr.y + bBox.y + 9999,\n                    bBox.width,\n                    bBox.height\n                ).attr({\n                    stroke: 'rgba(0, 0, 0, 0.3)',\n                    'stroke-width': 0.5\n                }).add();\n                chart.renderer.circle(\n                    chart.plotLeft + alignAttr.x,\n                    chart.plotTop + alignAttr.y,\n                    2\n                ).attr({\n                    fill: 'red',\n                    zIndex: 20\n                }).add();\n                // */\n                visible =\n                    chart.isInsidePlot(x, y, {\n                        paneCoordinates: true,\n                        series: series\n                    }) &&\n                        chart.isInsidePlot(x + bBox.width, y + bBox.height, {\n                            paneCoordinates: true,\n                            series: series\n                        });\n            }\n            // When we're using a shape, make it possible with a connector or an\n            // arrow pointing to thie point\n            if (options.shape && !rotation) {\n                dataLabel[isNew ? 'attr' : 'animate']({\n                    anchorX: pos[0],\n                    anchorY: pos[1]\n                });\n            }\n        }\n        // To use alignAttr property in hideOverlappingLabels\n        if (isNew && enabledDataSorting) {\n            dataLabel.placed = false;\n        }\n        // Show or hide based on the final aligned position\n        if (!visible && (!enabledDataSorting || justify)) {\n            dataLabel.hide();\n            dataLabel.placed = false; // don't animate back in\n        }\n        else {\n            dataLabel.show();\n        }\n    }\n    /**\n     * Handle the dataLabels.filter option.\n     * @private\n     */\n    function applyFilter(point, options) {\n        var filter = options.filter;\n        if (filter) {\n            var op = filter.operator;\n            var prop = point[filter.property];\n            var val = filter.value;\n            if ((op === '>' && prop > val) ||\n                (op === '<' && prop < val) ||\n                (op === '>=' && prop >= val) ||\n                (op === '<=' && prop <= val) ||\n                (op === '==' && prop == val) || // eslint-disable-line eqeqeq\n                (op === '===' && prop === val)) {\n                return true;\n            }\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @private\n     */\n    function compose(SeriesClass) {\n        if (composedClasses.indexOf(SeriesClass) === -1) {\n            var seriesProto = SeriesClass.prototype;\n            composedClasses.push(SeriesClass);\n            seriesProto.alignDataLabel = alignDataLabel;\n            seriesProto.drawDataLabels = drawDataLabels;\n            seriesProto.justifyDataLabel = justifyDataLabel;\n            seriesProto.setDataLabelStartPos = setDataLabelStartPos;\n        }\n    }\n    DataLabel.compose = compose;\n    /**\n     * Draw the data labels\n     * @private\n     */\n    function drawDataLabels(points) {\n        if (points === void 0) { points = this.points; }\n        var series = this, chart = series.chart, seriesOptions = series.options, hasRendered = series.hasRendered || 0, renderer = chart.renderer, _a = chart.options.chart, backgroundColor = _a.backgroundColor, plotBackgroundColor = _a.plotBackgroundColor, contrastColor = renderer.getContrast((isString(plotBackgroundColor) && plotBackgroundColor) ||\n            (isString(backgroundColor) && backgroundColor) ||\n            \"#000000\" /* Palette.neutralColor100 */);\n        var seriesDlOptions = seriesOptions.dataLabels, pointOptions, dataLabelsGroup;\n        var dataLabelAnim = seriesDlOptions.animation, animationConfig = seriesDlOptions.defer ?\n            getDeferredAnimation(chart, dataLabelAnim, series) :\n            { defer: 0, duration: 0 };\n        // Merge in plotOptions.dataLabels for series\n        seriesDlOptions = mergeArrays(mergeArrays(chart.options.plotOptions &&\n            chart.options.plotOptions.series &&\n            chart.options.plotOptions.series.dataLabels, chart.options.plotOptions &&\n            chart.options.plotOptions[series.type] &&\n            chart.options.plotOptions[series.type].dataLabels), seriesDlOptions);\n        fireEvent(this, 'drawDataLabels');\n        if (isArray(seriesDlOptions) ||\n            seriesDlOptions.enabled ||\n            series._hasPointLabels) {\n            // Create a separate group for the data labels to avoid rotation\n            dataLabelsGroup = series.plotGroup('dataLabelsGroup', 'data-labels', !hasRendered ? 'hidden' : 'inherit', // #5133, #10220\n            seriesDlOptions.zIndex || 6);\n            dataLabelsGroup.attr({ opacity: +hasRendered }); // #3300\n            if (!hasRendered) {\n                var group = series.dataLabelsGroup;\n                if (group) {\n                    if (series.visible) { // #2597, #3023, #3024\n                        dataLabelsGroup.show();\n                    }\n                    group[seriesOptions.animation ? 'animate' : 'attr']({ opacity: 1 }, animationConfig);\n                }\n            }\n            // Make the labels for each point\n            points.forEach(function (point) {\n                // Merge in series options for the point.\n                // @note dataLabelAttribs (like pointAttribs) would eradicate\n                // the need for dlOptions, and simplify the section below.\n                pointOptions = splat(mergeArrays(seriesDlOptions, \n                // dlOptions is used in treemaps\n                (point.dlOptions ||\n                    (point.options && point.options.dataLabels))));\n                // Handle each individual data label for this point\n                pointOptions.forEach(function (labelOptions, i) {\n                    // Options for one datalabel\n                    var labelEnabled = (labelOptions.enabled &&\n                        // #2282, #4641, #7112, #10049\n                        (!point.isNull || point.dataLabelOnNull) &&\n                        applyFilter(point, labelOptions)), connector = point.connectors ?\n                        point.connectors[i] :\n                        point.connector;\n                    var labelConfig, formatString, labelText, style, rotation, attr, dataLabel = point.dataLabels ?\n                        point.dataLabels[i] : point.dataLabel, isNew = !dataLabel;\n                    var labelDistance = pick(labelOptions.distance, point.labelDistance);\n                    if (labelEnabled) {\n                        // Create individual options structure that can be\n                        // extended without affecting others\n                        labelConfig = point.getLabelConfig();\n                        formatString = pick(labelOptions[point.formatPrefix + 'Format'], labelOptions.format);\n                        labelText = defined(formatString) ?\n                            format(formatString, labelConfig, chart) :\n                            (labelOptions[point.formatPrefix + 'Formatter'] ||\n                                labelOptions.formatter).call(labelConfig, labelOptions);\n                        style = labelOptions.style;\n                        rotation = labelOptions.rotation;\n                        if (!chart.styledMode) {\n                            // Determine the color\n                            style.color = pick(labelOptions.color, style.color, series.color, \"#000000\" /* Palette.neutralColor100 */);\n                            // Get automated contrast color\n                            if (style.color === 'contrast') {\n                                point.contrastColor = renderer.getContrast((point.color || series.color));\n                                style.color = (!defined(labelDistance) &&\n                                    labelOptions.inside) ||\n                                    labelDistance < 0 ||\n                                    !!seriesOptions.stacking ?\n                                    point.contrastColor :\n                                    contrastColor;\n                            }\n                            else {\n                                delete point.contrastColor;\n                            }\n                            if (seriesOptions.cursor) {\n                                style.cursor = seriesOptions.cursor;\n                            }\n                        }\n                        attr = {\n                            r: labelOptions.borderRadius || 0,\n                            rotation: rotation,\n                            padding: labelOptions.padding,\n                            zIndex: 1\n                        };\n                        if (!chart.styledMode) {\n                            var backgroundColor_1 = labelOptions.backgroundColor, borderColor = labelOptions.borderColor;\n                            attr.fill = backgroundColor_1 === 'auto' ?\n                                point.color :\n                                backgroundColor_1;\n                            attr.stroke = borderColor === 'auto' ?\n                                point.color :\n                                borderColor;\n                            attr['stroke-width'] = labelOptions.borderWidth;\n                        }\n                        // Remove unused attributes (#947)\n                        objectEach(attr, function (val, name) {\n                            if (typeof val === 'undefined') {\n                                delete attr[name];\n                            }\n                        });\n                    }\n                    // If the point is outside the plot area, destroy it. #678,\n                    // #820\n                    if (dataLabel && (!labelEnabled ||\n                        !defined(labelText) ||\n                        !!dataLabel.div !== !!labelOptions.useHTML ||\n                        (\n                        // Change from no rotation to rotation and\n                        // vice versa. Don't use defined() because\n                        // rotation = 0 means also rotation = undefined\n                        (!dataLabel.rotation ||\n                            !labelOptions.rotation) &&\n                            dataLabel.rotation !== labelOptions.rotation))) {\n                        isNew = true;\n                        point.dataLabel = dataLabel =\n                            point.dataLabel && point.dataLabel.destroy();\n                        if (point.dataLabels) {\n                            // Remove point.dataLabels if this was the last one\n                            if (point.dataLabels.length === 1) {\n                                delete point.dataLabels;\n                            }\n                            else {\n                                delete point.dataLabels[i];\n                            }\n                        }\n                        if (!i) {\n                            delete point.dataLabel;\n                        }\n                        if (connector) {\n                            point.connector = point.connector.destroy();\n                            if (point.connectors) {\n                                // Remove point.connectors if this was the last\n                                // one\n                                if (point.connectors.length === 1) {\n                                    delete point.connectors;\n                                }\n                                else {\n                                    delete point.connectors[i];\n                                }\n                            }\n                        }\n                    }\n                    // Individual labels are disabled if the are explicitly\n                    // disabled in the point options, or if they fall outside\n                    // the plot area.\n                    if (labelEnabled && defined(labelText)) {\n                        if (!dataLabel) {\n                            // Create new label element\n                            point.dataLabels = point.dataLabels || [];\n                            dataLabel = point.dataLabels[i] = rotation ?\n                                // Labels don't rotate, use text element\n                                renderer.text(labelText, 0, 0, labelOptions.useHTML)\n                                    .addClass('highcharts-data-label') :\n                                // We can use label\n                                renderer.label(labelText, 0, 0, labelOptions.shape, null, null, labelOptions.useHTML, null, 'data-label');\n                            // Store for backwards compatibility\n                            if (!i) {\n                                point.dataLabel = dataLabel;\n                            }\n                            dataLabel.addClass(' highcharts-data-label-color-' +\n                                point.colorIndex +\n                                ' ' + (labelOptions.className || '') +\n                                ( // #3398\n                                labelOptions.useHTML ?\n                                    ' highcharts-tracker' :\n                                    ''));\n                        }\n                        else {\n                            // Use old element and just update text\n                            attr.text = labelText;\n                        }\n                        // Store data label options for later access\n                        dataLabel.options = labelOptions;\n                        dataLabel.attr(attr);\n                        if (!chart.styledMode) {\n                            // Styles must be applied before add in order to\n                            // read text bounding box\n                            dataLabel.css(style).shadow(labelOptions.shadow);\n                        }\n                        var textPathOptions = labelOptions[point.formatPrefix + 'TextPath'] ||\n                            labelOptions.textPath;\n                        if (textPathOptions && !labelOptions.useHTML) {\n                            dataLabel.setTextPath((point.getDataLabelPath &&\n                                point.getDataLabelPath(dataLabel)) || point.graphic, textPathOptions);\n                            if (point.dataLabelPath &&\n                                !textPathOptions.enabled) {\n                                // clean the DOM\n                                point.dataLabelPath = (point.dataLabelPath.destroy());\n                            }\n                        }\n                        if (!dataLabel.added) {\n                            dataLabel.add(dataLabelsGroup);\n                        }\n                        // Now the data label is created and placed at 0,0, so\n                        // we need to align it\n                        series.alignDataLabel(point, dataLabel, labelOptions, null, isNew);\n                    }\n                    else if (dataLabel) {\n                        dataLabel.hide();\n                    }\n                });\n            });\n        }\n        fireEvent(this, 'afterDrawDataLabels');\n    }\n    /**\n     * If data labels fall partly outside the plot area, align them back in, in\n     * a way that doesn't hide the point.\n     * @private\n     */\n    function justifyDataLabel(dataLabel, options, alignAttr, bBox, alignTo, isNew) {\n        var chart = this.chart, align = options.align, verticalAlign = options.verticalAlign, padding = dataLabel.box ? 0 : (dataLabel.padding || 0);\n        var _a = options.x, x = _a === void 0 ? 0 : _a, _b = options.y, y = _b === void 0 ? 0 : _b, off, justified;\n        // Off left\n        off = (alignAttr.x || 0) + padding;\n        if (off < 0) {\n            if (align === 'right' && x >= 0) {\n                options.align = 'left';\n                options.inside = true;\n            }\n            else {\n                x -= off;\n            }\n            justified = true;\n        }\n        // Off right\n        off = (alignAttr.x || 0) + bBox.width - padding;\n        if (off > chart.plotWidth) {\n            if (align === 'left' && x <= 0) {\n                options.align = 'right';\n                options.inside = true;\n            }\n            else {\n                x += chart.plotWidth - off;\n            }\n            justified = true;\n        }\n        // Off top\n        off = alignAttr.y + padding;\n        if (off < 0) {\n            if (verticalAlign === 'bottom' && y >= 0) {\n                options.verticalAlign = 'top';\n                options.inside = true;\n            }\n            else {\n                y -= off;\n            }\n            justified = true;\n        }\n        // Off bottom\n        off = (alignAttr.y || 0) + bBox.height - padding;\n        if (off > chart.plotHeight) {\n            if (verticalAlign === 'top' && y <= 0) {\n                options.verticalAlign = 'bottom';\n                options.inside = true;\n            }\n            else {\n                y += chart.plotHeight - off;\n            }\n            justified = true;\n        }\n        if (justified) {\n            options.x = x;\n            options.y = y;\n            dataLabel.placed = !isNew;\n            dataLabel.align(options, void 0, alignTo);\n        }\n        return justified;\n    }\n    /**\n     * Merge two objects that can be arrays. If one of them is an array, the\n     * other is merged into each element. If both are arrays, each element is\n     * merged by index. If neither are arrays, we use normal merge.\n     * @private\n     */\n    function mergeArrays(one, two) {\n        var res = [], i;\n        if (isArray(one) && !isArray(two)) {\n            res = one.map(function (el) {\n                return merge(el, two);\n            });\n        }\n        else if (isArray(two) && !isArray(one)) {\n            res = two.map(function (el) {\n                return merge(one, el);\n            });\n        }\n        else if (!isArray(one) && !isArray(two)) {\n            res = merge(one, two);\n        }\n        else {\n            i = Math.max(one.length, two.length);\n            while (i--) {\n                res[i] = merge(one[i], two[i]);\n            }\n        }\n        return res;\n    }\n    /**\n     * Set starting position for data label sorting animation.\n     * @private\n     */\n    function setDataLabelStartPos(point, dataLabel, isNew, isInside, alignOptions) {\n        var chart = this.chart, inverted = chart.inverted, xAxis = this.xAxis, reversed = xAxis.reversed, labelCenter = inverted ? dataLabel.height / 2 : dataLabel.width / 2, pointWidth = point.pointWidth, halfWidth = pointWidth ? pointWidth / 2 : 0;\n        dataLabel.startXPos = inverted ?\n            alignOptions.x :\n            (reversed ?\n                -labelCenter - halfWidth :\n                xAxis.width - labelCenter + halfWidth);\n        dataLabel.startYPos = inverted ?\n            (reversed ?\n                this.yAxis.height - labelCenter + halfWidth :\n                -labelCenter - halfWidth) : alignOptions.y;\n        // We need to handle visibility in case of sorting point outside plot\n        // area\n        if (!isInside) {\n            dataLabel\n                .attr({ opacity: 1 })\n                .animate({ opacity: 0 }, void 0, dataLabel.hide);\n        }\n        else if (dataLabel.visibility === 'hidden') {\n            dataLabel.show();\n            dataLabel\n                .attr({ opacity: 0 })\n                .animate({ opacity: 1 });\n        }\n        // Save start position on first render, but do not change position\n        if (!chart.hasRendered) {\n            return;\n        }\n        // Set start position\n        if (isNew) {\n            dataLabel.attr({ x: dataLabel.startXPos, y: dataLabel.startYPos });\n        }\n        dataLabel.placed = true;\n    }\n})(DataLabel || (DataLabel = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default DataLabel;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * Callback JavaScript function to format the data label as a string. Note that\n * if a `format` is defined, the format takes precedence and the formatter is\n * ignored.\n *\n * @callback Highcharts.DataLabelsFormatterCallbackFunction\n *\n * @param {Highcharts.PointLabelObject} this\n * Data label context to format\n *\n * @param {Highcharts.DataLabelsOptions} options\n * [API options](/highcharts/plotOptions.series.dataLabels) of the data label\n *\n * @return {number|string|null|undefined}\n * Formatted data label text\n */\n/**\n * Values for handling data labels that flow outside the plot area.\n *\n * @typedef {\"allow\"|\"justify\"} Highcharts.DataLabelsOverflowValue\n */\n''; // keeps doclets above in JS file\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport DataLabel from '../../Core/Series/DataLabel.js';\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nvar Series = SeriesRegistry.series;\nimport U from '../../Core/Utilities.js';\nvar merge = U.merge, pick = U.pick;\n/* *\n *\n *  Composition\n *\n * */\nvar ColumnDataLabel;\n(function (ColumnDataLabel) {\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    var composedClasses = [];\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Override the basic data label alignment by adjusting for the position of\n     * the column.\n     * @private\n     */\n    function alignDataLabel(point, dataLabel, options, alignTo, isNew) {\n        var inverted = this.chart.inverted, series = point.series, xLen = (series.xAxis ? series.xAxis.len : this.chart.plotSizeX) || 0, yLen = (series.yAxis ? series.yAxis.len : this.chart.plotSizeY) || 0, \n        // data label box for alignment\n        dlBox = point.dlBox || point.shapeArgs, below = pick(point.below, // range series\n        point.plotY >\n            pick(this.translatedThreshold, yLen)), \n        // draw it inside the box?\n        inside = pick(options.inside, !!this.options.stacking), overshoot;\n        // Align to the column itself, or the top of it\n        if (dlBox) { // Area range uses this method but not alignTo\n            alignTo = merge(dlBox);\n            if (alignTo.y < 0) {\n                alignTo.height += alignTo.y;\n                alignTo.y = 0;\n            }\n            // If parts of the box overshoots outside the plot area, modify the\n            // box to center the label inside\n            overshoot = alignTo.y + alignTo.height - yLen;\n            if (overshoot > 0 && overshoot < alignTo.height) {\n                alignTo.height -= overshoot;\n            }\n            if (inverted) {\n                alignTo = {\n                    x: yLen - alignTo.y - alignTo.height,\n                    y: xLen - alignTo.x - alignTo.width,\n                    width: alignTo.height,\n                    height: alignTo.width\n                };\n            }\n            // Compute the alignment box\n            if (!inside) {\n                if (inverted) {\n                    alignTo.x += below ? 0 : alignTo.width;\n                    alignTo.width = 0;\n                }\n                else {\n                    alignTo.y += below ? alignTo.height : 0;\n                    alignTo.height = 0;\n                }\n            }\n        }\n        // When alignment is undefined (typically columns and bars), display the\n        // individual point below or above the point depending on the threshold\n        options.align = pick(options.align, !inverted || inside ? 'center' : below ? 'right' : 'left');\n        options.verticalAlign = pick(options.verticalAlign, inverted || inside ? 'middle' : below ? 'top' : 'bottom');\n        // Call the parent method\n        Series.prototype.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);\n        // If label was justified and we have contrast, set it:\n        if (options.inside && point.contrastColor) {\n            dataLabel.css({\n                color: point.contrastColor\n            });\n        }\n    }\n    /** @private */\n    function compose(ColumnSeriesClass) {\n        DataLabel.compose(Series);\n        if (composedClasses.indexOf(ColumnSeriesClass) === -1) {\n            composedClasses.push(ColumnSeriesClass);\n            ColumnSeriesClass.prototype.alignDataLabel = alignDataLabel;\n        }\n    }\n    ColumnDataLabel.compose = compose;\n})(ColumnDataLabel || (ColumnDataLabel = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default ColumnDataLabel;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport ColumnSeries from '../Column/ColumnSeries.js';\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nimport U from '../../Core/Utilities.js';\nvar extend = U.extend, merge = U.merge;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Bar series type.\n *\n * @private\n * @class\n * @name Highcharts.seriesTypes.bar\n *\n * @augments Highcharts.Series\n */\nvar BarSeries = /** @class */ (function (_super) {\n    __extends(BarSeries, _super);\n    function BarSeries() {\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        _this.data = void 0;\n        _this.options = void 0;\n        _this.points = void 0;\n        return _this;\n    }\n    /**\n     * A bar series is a special type of column series where the columns are\n     * horizontal.\n     *\n     * @sample highcharts/demo/bar-basic/\n     *         Bar chart\n     *\n     * @extends      plotOptions.column\n     * @product      highcharts\n     * @optionparent plotOptions.bar\n     */\n    BarSeries.defaultOptions = merge(ColumnSeries.defaultOptions, {\n    // nothing here yet\n    });\n    return BarSeries;\n}(ColumnSeries));\nextend(BarSeries.prototype, {\n    inverted: true\n});\nSeriesRegistry.registerSeriesType('bar', BarSeries);\n/* *\n *\n *  Default Export\n *\n * */\nexport default BarSeries;\n/* *\n *\n *  API Options\n *\n * */\n/**\n * A `bar` series. If the [type](#series.bar.type) option is not specified,\n * it is inherited from [chart.type](#chart.type).\n *\n * @extends   series,plotOptions.bar\n * @excluding connectNulls, dashStyle, dataParser, dataURL, gapSize, gapUnit,\n *            linecap, lineWidth, marker, connectEnds, step\n * @product   highcharts\n * @apioption series.bar\n */\n/**\n * An array of data points for the series. For the `bar` series type,\n * points can be given in the following ways:\n *\n * 1. An array of numerical values. In this case, the numerical values will be\n *    interpreted as `y` options. The `x` values will be automatically\n *    calculated, either starting at 0 and incremented by 1, or from\n *    `pointStart` and `pointInterval` given in the series options. If the axis\n *    has categories, these will be used. Example:\n *    ```js\n *    data: [0, 5, 3, 5]\n *    ```\n *\n * 2. An array of arrays with 2 values. In this case, the values correspond to\n *    `x,y`. If the first value is a string, it is applied as the name of the\n *    point, and the `x` value is inferred.\n *    ```js\n *    data: [\n *        [0, 5],\n *        [1, 10],\n *        [2, 3]\n *    ]\n *    ```\n *\n * 3. An array of objects with named values. The following snippet shows only a\n *    few settings, see the complete options set below. If the total number of\n *    data points exceeds the series'\n *    [turboThreshold](#series.bar.turboThreshold), this option is not\n *    available.\n *    ```js\n *    data: [{\n *        x: 1,\n *        y: 1,\n *        name: \"Point2\",\n *        color: \"#00FF00\"\n *    }, {\n *        x: 1,\n *        y: 10,\n *        name: \"Point1\",\n *        color: \"#FF00FF\"\n *    }]\n *    ```\n *\n * @sample {highcharts} highcharts/chart/reflow-true/\n *         Numerical values\n * @sample {highcharts} highcharts/series/data-array-of-arrays/\n *         Arrays of numeric x and y\n * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n *         Arrays of datetime x and y\n * @sample {highcharts} highcharts/series/data-array-of-name-value/\n *         Arrays of point.name and y\n * @sample {highcharts} highcharts/series/data-array-of-objects/\n *         Config objects\n *\n * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n * @extends   series.column.data\n * @product   highcharts\n * @apioption series.bar.data\n */\n/**\n * @excluding halo,lineWidth,lineWidthPlus,marker\n * @product   highcharts highstock\n * @apioption series.bar.states.hover\n */\n/**\n * @excluding halo,lineWidth,lineWidthPlus,marker\n * @product   highcharts highstock\n * @apioption series.bar.states.select\n */\n''; // gets doclets above into transpilat\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport A from '../../Core/Animation/AnimationUtilities.js';\nvar setAnimation = A.setAnimation;\nimport Point from '../../Core/Series/Point.js';\nimport U from '../../Core/Utilities.js';\nvar addEvent = U.addEvent, defined = U.defined, extend = U.extend, isNumber = U.isNumber, pick = U.pick, relativeLength = U.relativeLength;\n/* *\n *\n *  Class\n *\n * */\nvar PiePoint = /** @class */ (function (_super) {\n    __extends(PiePoint, _super);\n    function PiePoint() {\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.labelDistance = void 0;\n        _this.options = void 0;\n        _this.series = void 0;\n        return _this;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Extendable method for getting the path of the connector between the\n     * data label and the pie slice.\n     * @private\n     */\n    PiePoint.prototype.getConnectorPath = function () {\n        var labelPosition = this.labelPosition, options = this.series.options.dataLabels, predefinedShapes = this.connectorShapes;\n        var connectorShape = options.connectorShape;\n        // find out whether to use the predefined shape\n        if (predefinedShapes[connectorShape]) {\n            connectorShape = predefinedShapes[connectorShape];\n        }\n        return connectorShape.call(this, {\n            // pass simplified label position object for user's convenience\n            x: labelPosition.final.x,\n            y: labelPosition.final.y,\n            alignment: labelPosition.alignment\n        }, labelPosition.connectorPosition, options);\n    };\n    /**\n     * @private\n     */\n    PiePoint.prototype.getTranslate = function () {\n        return this.sliced ? this.slicedTranslation : {\n            translateX: 0,\n            translateY: 0\n        };\n    };\n    /**\n     * @private\n     */\n    PiePoint.prototype.haloPath = function (size) {\n        var shapeArgs = this.shapeArgs;\n        return this.sliced || !this.visible ?\n            [] :\n            this.series.chart.renderer.symbols.arc(shapeArgs.x, shapeArgs.y, shapeArgs.r + size, shapeArgs.r + size, {\n                // Substract 1px to ensure the background is not bleeding\n                // through between the halo and the slice (#7495).\n                innerR: shapeArgs.r - 1,\n                start: shapeArgs.start,\n                end: shapeArgs.end\n            });\n    };\n    /**\n     * Initialize the pie slice.\n     * @private\n     */\n    PiePoint.prototype.init = function () {\n        var _this = this;\n        _super.prototype.init.apply(this, arguments);\n        this.name = pick(this.name, 'Slice');\n        // add event listener for select\n        var toggleSlice = function (e) {\n            _this.slice(e.type === 'select');\n        };\n        addEvent(this, 'select', toggleSlice);\n        addEvent(this, 'unselect', toggleSlice);\n        return this;\n    };\n    /**\n     * Negative points are not valid (#1530, #3623, #5322)\n     * @private\n     */\n    PiePoint.prototype.isValid = function () {\n        return isNumber(this.y) && this.y >= 0;\n    };\n    /**\n     * Toggle the visibility of a pie slice or other data point. Note that this\n     * method is available only for some series, like pie, treemap and sunburst.\n     *\n     * @function Highcharts.Point#setVisible\n     *\n     * @param {boolean} [vis]\n     * True to show the pie slice or other data point, false to hide. If\n     * undefined, the visibility is toggled.\n     *\n     * @param {boolean} [redraw] Whether to redraw the chart after the point is\n     * altered. If doing more operations on the chart, it is a good idea to set\n     * redraw to false and call {@link Chart#redraw|chart.redraw()} after.\n     *\n     */\n    PiePoint.prototype.setVisible = function (vis, redraw) {\n        var _this = this;\n        var series = this.series, chart = series.chart, ignoreHiddenPoint = series.options.ignoreHiddenPoint;\n        redraw = pick(redraw, ignoreHiddenPoint);\n        if (vis !== this.visible) {\n            // If called without an argument, toggle visibility\n            this.visible = this.options.visible = vis =\n                typeof vis === 'undefined' ? !this.visible : vis;\n            // update userOptions.data\n            series.options.data[series.data.indexOf(this)] =\n                this.options;\n            // Show and hide associated elements. This is performed\n            // regardless of redraw or not, because chart.redraw only\n            // handles full series.\n            ['graphic', 'dataLabel', 'connector', 'shadowGroup'].forEach(function (key) {\n                if (_this[key]) {\n                    _this[key][vis ? 'show' : 'hide'](vis);\n                }\n            });\n            if (this.legendItem) {\n                chart.legend.colorizeItem(this, vis);\n            }\n            // #4170, hide halo after hiding point\n            if (!vis && this.state === 'hover') {\n                this.setState('');\n            }\n            // Handle ignore hidden slices\n            if (ignoreHiddenPoint) {\n                series.isDirty = true;\n            }\n            if (redraw) {\n                chart.redraw();\n            }\n        }\n    };\n    /**\n     * Set or toggle whether the slice is cut out from the pie.\n     * @private\n     *\n     * @param {boolean} sliced\n     * When undefined, the slice state is toggled.\n     *\n     * @param {boolean} [redraw]\n     * Whether to redraw the chart. True by default.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     * Animation options.\n     */\n    PiePoint.prototype.slice = function (sliced, redraw, animation) {\n        var series = this.series, chart = series.chart;\n        setAnimation(animation, chart);\n        // redraw is true by default\n        redraw = pick(redraw, true);\n        /**\n         * Pie series only. Whether to display a slice offset from the\n         * center.\n         * @name Highcharts.Point#sliced\n         * @type {boolean|undefined}\n         */\n        // if called without an argument, toggle\n        this.sliced = this.options.sliced = sliced =\n            defined(sliced) ? sliced : !this.sliced;\n        // update userOptions.data\n        series.options.data[series.data.indexOf(this)] =\n            this.options;\n        if (this.graphic) {\n            this.graphic.animate(this.getTranslate());\n        }\n        if (this.shadowGroup) {\n            this.shadowGroup.animate(this.getTranslate());\n        }\n    };\n    return PiePoint;\n}(Point));\nextend(PiePoint.prototype, {\n    connectorShapes: {\n        // only one available before v7.0.0\n        fixedOffset: function (labelPosition, connectorPosition, options) {\n            var breakAt = connectorPosition.breakAt, touchingSliceAt = connectorPosition.touchingSliceAt, lineSegment = options.softConnector ? [\n                'C',\n                // 1st control point (of the curve)\n                labelPosition.x +\n                    // 5 gives the connector a little horizontal bend\n                    (labelPosition.alignment === 'left' ? -5 : 5),\n                labelPosition.y,\n                2 * breakAt.x - touchingSliceAt.x,\n                2 * breakAt.y - touchingSliceAt.y,\n                breakAt.x,\n                breakAt.y //\n            ] : [\n                'L',\n                breakAt.x,\n                breakAt.y\n            ];\n            // assemble the path\n            return ([\n                ['M', labelPosition.x, labelPosition.y],\n                lineSegment,\n                ['L', touchingSliceAt.x, touchingSliceAt.y]\n            ]);\n        },\n        straight: function (labelPosition, connectorPosition) {\n            var touchingSliceAt = connectorPosition.touchingSliceAt;\n            // direct line to the slice\n            return [\n                ['M', labelPosition.x, labelPosition.y],\n                ['L', touchingSliceAt.x, touchingSliceAt.y]\n            ];\n        },\n        crookedLine: function (labelPosition, connectorPosition, options) {\n            var touchingSliceAt = connectorPosition.touchingSliceAt, series = this.series, pieCenterX = series.center[0], plotWidth = series.chart.plotWidth, plotLeft = series.chart.plotLeft, alignment = labelPosition.alignment, radius = this.shapeArgs.r, crookDistance = relativeLength(// % to fraction\n            options.crookDistance, 1), crookX = alignment === 'left' ?\n                pieCenterX + radius + (plotWidth + plotLeft -\n                    pieCenterX - radius) * (1 - crookDistance) :\n                plotLeft + (pieCenterX - radius) * crookDistance, segmentWithCrook = [\n                'L',\n                crookX,\n                labelPosition.y\n            ];\n            var useCrook = true;\n            // crookedLine formula doesn't make sense if the path overlaps\n            // the label - use straight line instead in that case\n            if (alignment === 'left' ?\n                (crookX > labelPosition.x || crookX < touchingSliceAt.x) :\n                (crookX < labelPosition.x || crookX > touchingSliceAt.x)) {\n                useCrook = false;\n            }\n            // assemble the path\n            var path = [['M', labelPosition.x, labelPosition.y]];\n            if (useCrook) {\n                path.push(segmentWithCrook);\n            }\n            path.push(['L', touchingSliceAt.x, touchingSliceAt.y]);\n            return path;\n        }\n    }\n});\n/* *\n *\n *  Default Export\n *\n * */\nexport default PiePoint;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n/* *\n *\n *  API Options\n *\n * */\n/**\n * A pie chart is a circular graphic which is divided into slices to\n * illustrate numerical proportion.\n *\n * @sample highcharts/demo/pie-basic/\n *         Pie chart\n *\n * @extends      plotOptions.line\n * @excluding    animationLimit, boostThreshold, connectEnds, connectNulls,\n *               cropThreshold, dashStyle, dataSorting, dragDrop,\n *               findNearestPointBy, getExtremesFromAll, label, lineWidth,\n *               linkedTo, marker, negativeColor, pointInterval,\n *               pointIntervalUnit, pointPlacement, pointStart,\n *               softThreshold, stacking, step, threshold, turboThreshold,\n *               zoneAxis, zones, dataSorting, boostBlending\n * @product      highcharts highmaps\n * @optionparent plotOptions.pie\n *\n * @private\n */\nvar PieSeriesDefaults = {\n    /**\n     * @excluding legendItemClick\n     * @apioption plotOptions.pie.events\n     */\n    /**\n     * Fires when the checkbox next to the point name in the legend is\n     * clicked. One parameter, event, is passed to the function. The state\n     * of the checkbox is found by event.checked. The checked item is found\n     * by event.item. Return false to prevent the default action which is to\n     * toggle the select state of the series.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-events-checkboxclick/\n     *         Alert checkbox status\n     *\n     * @type      {Function}\n     * @since     1.2.0\n     * @product   highcharts highmaps\n     * @context   Highcharts.Point\n     * @apioption plotOptions.pie.events.checkboxClick\n     */\n    /**\n     * Fires when the legend item belonging to the pie point (slice) is\n     * clicked. The `this` keyword refers to the point itself. One\n     * parameter, `event`, is passed to the function, containing common\n     * event information. The default action is to toggle the visibility of\n     * the point. This can be prevented by calling `event.preventDefault()`.\n     *\n     * @sample {highcharts} highcharts/plotoptions/pie-point-events-legenditemclick/\n     *         Confirm toggle visibility\n     *\n     * @type      {Highcharts.PointLegendItemClickCallbackFunction}\n     * @since     1.2.0\n     * @product   highcharts highmaps\n     * @apioption plotOptions.pie.point.events.legendItemClick\n     */\n    /**\n     * The center of the pie chart relative to the plot area. Can be\n     * percentages or pixel values. The default behaviour (as of 3.0) is to\n     * center the pie so that all slices and data labels are within the plot\n     * area. As a consequence, the pie may actually jump around in a chart\n     * with dynamic values, as the data labels move. In that case, the\n     * center should be explicitly set, for example to `[\"50%\", \"50%\"]`.\n     *\n     * @sample {highcharts} highcharts/plotoptions/pie-center/\n     *         Centered at 100, 100\n     *\n     * @type    {Array<(number|string|null),(number|string|null)>}\n     * @default [null, null]\n     * @product highcharts highmaps\n     *\n     * @private\n     */\n    center: [null, null],\n    /**\n     * The color of the pie series. A pie series is represented as an empty\n     * circle if the total sum of its values is 0. Use this property to\n     * define the color of its border.\n     *\n     * In styled mode, the color can be defined by the\n     * [colorIndex](#plotOptions.series.colorIndex) option. Also, the series\n     * color can be set with the `.highcharts-series`,\n     * `.highcharts-color-{n}`, `.highcharts-{type}-series` or\n     * `.highcharts-series-{n}` class, or individual classes given by the\n     * `className` option.\n     *\n     * @sample {highcharts} highcharts/plotoptions/pie-emptyseries/\n     *         Empty pie series\n     *\n     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     * @default   #cccccc\n     * @apioption plotOptions.pie.color\n     */\n    /**\n     * @product highcharts\n     *\n     * @private\n     */\n    clip: false,\n    /**\n     * @ignore-option\n     *\n     * @private\n     */\n    colorByPoint: true,\n    /**\n     * A series specific or series type specific color set to use instead\n     * of the global [colors](#colors).\n     *\n     * @sample {highcharts} highcharts/demo/pie-monochrome/\n     *         Set default colors for all pies\n     *\n     * @type      {Array<Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject>}\n     * @since     3.0\n     * @product   highcharts highmaps\n     * @apioption plotOptions.pie.colors\n     */\n    /**\n     * @declare   Highcharts.SeriesPieDataLabelsOptionsObject\n     * @extends   plotOptions.series.dataLabels\n     * @excluding align, allowOverlap, inside, staggerLines, step\n     * @private\n     */\n    dataLabels: {\n        /**\n         * Alignment method for data labels. Possible values are:\n         *\n         * - `plotEdges`: Each label touches the nearest vertical edge of\n         *   the plot area.\n         *\n         * - `connectors`: Connectors have the same x position and the\n         *   widest label of each half (left & right) touches the nearest\n         *   vertical edge of the plot area.\n         *\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-alignto-connectors/\n         *         alignTo: connectors\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-alignto-plotedges/\n         *         alignTo: plotEdges\n         *\n         * @type      {string}\n         * @since     7.0.0\n         * @product   highcharts highmaps\n         * @apioption plotOptions.pie.dataLabels.alignTo\n         */\n        allowOverlap: true,\n        /**\n         * The color of the line connecting the data label to the pie slice.\n         * The default color is the same as the point's color.\n         *\n         * In styled mode, the connector stroke is given in the\n         * `.highcharts-data-label-connector` class.\n         *\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-connectorcolor/\n         *         Blue connectors\n         * @sample {highcharts} highcharts/css/pie-point/\n         *         Styled connectors\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @since     2.1\n         * @product   highcharts highmaps\n         * @apioption plotOptions.pie.dataLabels.connectorColor\n         */\n        /**\n         * The distance from the data label to the connector. Note that\n         * data labels also have a default `padding`, so in order for the\n         * connector to touch the text, the `padding` must also be 0.\n         *\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-connectorpadding/\n         *         No padding\n         *\n         * @since   2.1\n         * @product highcharts highmaps\n         */\n        connectorPadding: 5,\n        /**\n         * Specifies the method that is used to generate the connector path.\n         * Highcharts provides 3 built-in connector shapes: `'fixedOffset'`\n         * (default), `'straight'` and `'crookedLine'`. Using\n         * `'crookedLine'` has the most sense (in most of the cases) when\n         * `'alignTo'` is set.\n         *\n         * Users can provide their own method by passing a function instead\n         * of a String. 3 arguments are passed to the callback:\n         *\n         * - Object that holds the information about the coordinates of the\n         *   label (`x` & `y` properties) and how the label is located in\n         *   relation to the pie (`alignment` property). `alignment` can by\n         *   one of the following:\n         *   `'left'` (pie on the left side of the data label),\n         *   `'right'` (pie on the right side of the data label) or\n         *   `'center'` (data label overlaps the pie).\n         *\n         * - Object that holds the information about the position of the\n         *   connector. Its `touchingSliceAt`  porperty tells the position\n         *   of the place where the connector touches the slice.\n         *\n         * - Data label options\n         *\n         * The function has to return an SVG path definition in array form\n         * (see the example).\n         *\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-connectorshape-string/\n         *         connectorShape is a String\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-connectorshape-function/\n         *         connectorShape is a function\n         *\n         * @type    {string|Function}\n         * @since   7.0.0\n         * @product highcharts highmaps\n         */\n        connectorShape: 'fixedOffset',\n        /**\n         * The width of the line connecting the data label to the pie slice.\n         *\n         * In styled mode, the connector stroke width is given in the\n         * `.highcharts-data-label-connector` class.\n         *\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-connectorwidth-disabled/\n         *         Disable the connector\n         * @sample {highcharts} highcharts/css/pie-point/\n         *         Styled connectors\n         *\n         * @type      {number}\n         * @default   1\n         * @since     2.1\n         * @product   highcharts highmaps\n         * @apioption plotOptions.pie.dataLabels.connectorWidth\n         */\n        /**\n         * Works only if `connectorShape` is `'crookedLine'`. It defines how\n         * far from the vertical plot edge the coonnector path should be\n         * crooked.\n         *\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-crookdistance/\n         *         crookDistance set to 90%\n         *\n         * @since   7.0.0\n         * @product highcharts highmaps\n         */\n        crookDistance: '70%',\n        /**\n         * The distance of the data label from the pie's edge. Negative\n         * numbers put the data label on top of the pie slices. Can also be\n         * defined as a percentage of pie's radius. Connectors are only\n         * shown for data labels outside the pie.\n         *\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-distance/\n         *         Data labels on top of the pie\n         *\n         * @type    {number|string}\n         * @since   2.1\n         * @product highcharts highmaps\n         */\n        distance: 30,\n        enabled: true,\n        /**\n         * A\n         * [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n         * for the data label. Available variables are the same as for\n         * `formatter`.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-format/\n         *         Add a unit\n         *\n         * @type      {string}\n         * @default   undefined\n         * @since     3.0\n         * @apioption plotOptions.pie.dataLabels.format\n         */\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Callback JavaScript function to format the data label. Note that\n         * if a `format` is defined, the format takes precedence and the\n         * formatter is ignored.\n         *\n         * @type {Highcharts.DataLabelsFormatterCallbackFunction}\n         * @default function () { return this.point.isNull ? void 0 : this.point.name; }\n         */\n        formatter: function () {\n            return this.point.isNull ? void 0 : this.point.name;\n        },\n        /**\n         * Whether to render the connector as a soft arc or a line with\n         * sharp break. Works only if `connectorShape` equals to\n         * `fixedOffset`.\n         *\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-softconnector-true/\n         *         Soft\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-softconnector-false/\n         *         Non soft\n         *\n         * @since   2.1.7\n         * @product highcharts highmaps\n         */\n        softConnector: true,\n        /**\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-overflow\n         *         Long labels truncated with an ellipsis\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-overflow-wrap\n         *         Long labels are wrapped\n         *\n         * @type      {Highcharts.CSSObject}\n         * @apioption plotOptions.pie.dataLabels.style\n         */\n        x: 0\n    },\n    /**\n     * If the total sum of the pie's values is 0, the series is represented\n     * as an empty circle . The `fillColor` option defines the color of that\n     * circle. Use [pie.borderWidth](#plotOptions.pie.borderWidth) to set\n     * the border thickness.\n     *\n     * @sample {highcharts} highcharts/plotoptions/pie-emptyseries/\n     *         Empty pie series\n     *\n     * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     * @private\n     */\n    fillColor: void 0,\n    /**\n     * The end angle of the pie in degrees where 0 is top and 90 is right.\n     * Defaults to `startAngle` plus 360.\n     *\n     * @sample {highcharts} highcharts/demo/pie-semi-circle/\n     *         Semi-circle donut\n     *\n     * @type      {number}\n     * @since     1.3.6\n     * @product   highcharts highmaps\n     * @apioption plotOptions.pie.endAngle\n     */\n    /**\n     * Thickness describing the ring size for a donut type chart,\n     * overriding [innerSize](#plotOptions.pie.innerSize).\n     *\n     * @type      {number}\n     * @default   undefined\n     * @product   highcharts\n     * @since 10.1.0\n     * @apioption plotOptions.pie.thickness\n     * @private\n     */\n    /**\n     * Equivalent to [chart.ignoreHiddenSeries](#chart.ignoreHiddenSeries),\n     * this option tells whether the series shall be redrawn as if the\n     * hidden point were `null`.\n     *\n     * The default value changed from `false` to `true` with Highcharts\n     * 3.0.\n     *\n     * @sample {highcharts} highcharts/plotoptions/pie-ignorehiddenpoint/\n     *         True, the hiddden point is ignored\n     *\n     * @since   2.3.0\n     * @product highcharts highmaps\n     *\n     * @private\n     */\n    ignoreHiddenPoint: true,\n    /**\n     * @ignore-option\n     *\n     * @private\n     */\n    inactiveOtherPoints: true,\n    /**\n     * The size of the inner diameter for the pie. A size greater than 0\n     * renders a donut chart. Can be a percentage or pixel value.\n     * Percentages are relative to the pie size. Pixel values are given as\n     * integers. Setting overridden by thickness.\n     *\n     *\n     * Note: in Highcharts < 4.1.2, the percentage was relative to the plot\n     * area, not the pie size.\n     *\n     * @sample {highcharts} highcharts/plotoptions/pie-innersize-80px/\n     *         80px inner size\n     * @sample {highcharts} highcharts/plotoptions/pie-innersize-50percent/\n     *         50% of the plot area\n     * @sample {highcharts} highcharts/demo/3d-pie-donut/\n     *         3D donut\n     *\n     * @type      {number|string}\n     * @default   0\n     * @since     2.0\n     * @product   highcharts highmaps\n     * @apioption plotOptions.pie.innerSize\n     */\n    /**\n     * @ignore-option\n     *\n     * @private\n     */\n    legendType: 'point',\n    /**\n     * @ignore-option\n     *\n     * @private\n     */\n    marker: null,\n    /**\n     * The minimum size for a pie in response to auto margins. The pie will\n     * try to shrink to make room for data labels in side the plot area,\n     *  but only to this size.\n     *\n     * @type      {number|string}\n     * @default   80\n     * @since     3.0\n     * @product   highcharts highmaps\n     * @apioption plotOptions.pie.minSize\n     */\n    /**\n     * The diameter of the pie relative to the plot area. Can be a\n     * percentage or pixel value. Pixel values are given as integers. The\n     * default behaviour (as of 3.0) is to scale to the plot area and give\n     * room for data labels within the plot area.\n     * [slicedOffset](#plotOptions.pie.slicedOffset) is also included in the\n     * default size calculation. As a consequence, the size of the pie may\n     * vary when points are updated and data labels more around. In that\n     * case it is best to set a fixed value, for example `\"75%\"`.\n     *\n     * @sample {highcharts} highcharts/plotoptions/pie-size/\n     *         Smaller pie\n     *\n     * @type    {number|string|null}\n     * @product highcharts highmaps\n     *\n     * @private\n     */\n    size: null,\n    /**\n     * Whether to display this particular series or series type in the\n     * legend. Since 2.1, pies are not shown in the legend by default.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-showinlegend/\n     *         One series in the legend, one hidden\n     *\n     * @product highcharts highmaps\n     *\n     * @private\n     */\n    showInLegend: false,\n    /**\n     * If a point is sliced, moved out from the center, how many pixels\n     * should it be moved?.\n     *\n     * @sample {highcharts} highcharts/plotoptions/pie-slicedoffset-20/\n     *         20px offset\n     *\n     * @product highcharts highmaps\n     *\n     * @private\n     */\n    slicedOffset: 10,\n    /**\n     * The start angle of the pie slices in degrees where 0 is top and 90\n     * right.\n     *\n     * @sample {highcharts} highcharts/plotoptions/pie-startangle-90/\n     *         Start from right\n     *\n     * @type      {number}\n     * @default   0\n     * @since     2.3.4\n     * @product   highcharts highmaps\n     * @apioption plotOptions.pie.startAngle\n     */\n    /**\n     * Sticky tracking of mouse events. When true, the `mouseOut` event\n     * on a series isn't triggered until the mouse moves over another\n     * series, or out of the plot area. When false, the `mouseOut` event on\n     * a series is triggered when the mouse leaves the area around the\n     * series'  graph or markers. This also implies the tooltip. When\n     * `stickyTracking` is false and `tooltip.shared` is false, the tooltip\n     * will be hidden when moving the mouse between series.\n     *\n     * @product highcharts highmaps\n     *\n     * @private\n     */\n    stickyTracking: false,\n    tooltip: {\n        followPointer: true\n    },\n    /**\n     * The color of the border surrounding each slice. When `null`, the\n     * border takes the same color as the slice fill. This can be used\n     * together with a `borderWidth` to fill drawing gaps created by\n     * antialiazing artefacts in borderless pies.\n     *\n     * In styled mode, the border stroke is given in the `.highcharts-point`\n     * class.\n     *\n     * @sample {highcharts} highcharts/plotoptions/pie-bordercolor-black/\n     *         Black border\n     *\n     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     * @default #ffffff\n     * @product highcharts highmaps\n     *\n     * @private\n     */\n    borderColor: \"#ffffff\" /* Palette.backgroundColor */,\n    /**\n     * The width of the border surrounding each slice.\n     *\n     * When setting the border width to 0, there may be small gaps between\n     * the slices due to SVG antialiasing artefacts. To work around this,\n     * keep the border width at 0.5 or 1, but set the `borderColor` to\n     * `null` instead.\n     *\n     * In styled mode, the border stroke width is given in the\n     * `.highcharts-point` class.\n     *\n     * @sample {highcharts} highcharts/plotoptions/pie-borderwidth/\n     *         3px border\n     *\n     * @product highcharts highmaps\n     *\n     * @private\n     */\n    borderWidth: 1,\n    /**\n     * @ignore-option\n     * @private\n     */\n    lineWidth: void 0,\n    states: {\n        /**\n         * @extends   plotOptions.series.states.hover\n         * @excluding marker, lineWidth, lineWidthPlus\n         * @product   highcharts highmaps\n         */\n        hover: {\n            /**\n             * How much to brighten the point on interaction. Requires the\n             * main color to be defined in hex or rgb(a) format.\n             *\n             * In styled mode, the hover brightness is by default replaced\n             * by a fill-opacity given in the `.highcharts-point-hover`\n             * class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/pie-states-hover-brightness/\n             *         Brightened by 0.5\n             *\n             * @product highcharts highmaps\n             */\n            brightness: 0.1\n        }\n    }\n};\n/**\n * A `pie` series. If the [type](#series.pie.type) option is not specified,\n * it is inherited from [chart.type](#chart.type).\n *\n * @extends   series,plotOptions.pie\n * @excluding cropThreshold, dataParser, dataURL, linkedTo, stack, xAxis, yAxis,\n *            dataSorting, step, boostThreshold, boostBlending\n * @product   highcharts highmaps\n * @apioption series.pie\n */\n/**\n * An array of data points for the series. For the `pie` series type,\n * points can be given in the following ways:\n *\n * 1. An array of numerical values. In this case, the numerical values will be\n *    interpreted as `y` options. Example:\n *    ```js\n *    data: [0, 5, 3, 5]\n *    ```\n *\n * 2. An array of objects with named values. The following snippet shows only a\n *    few settings, see the complete options set below. If the total number of\n *    data points exceeds the series'\n *    [turboThreshold](#series.pie.turboThreshold),\n *    this option is not available.\n *    ```js\n *    data: [{\n *        y: 1,\n *        name: \"Point2\",\n *        color: \"#00FF00\"\n *    }, {\n *        y: 7,\n *        name: \"Point1\",\n *        color: \"#FF00FF\"\n *    }]\n *    ```\n *\n * @sample {highcharts} highcharts/chart/reflow-true/\n *         Numerical values\n * @sample {highcharts} highcharts/series/data-array-of-arrays/\n *         Arrays of numeric x and y\n * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n *         Arrays of datetime x and y\n * @sample {highcharts} highcharts/series/data-array-of-name-value/\n *         Arrays of point.name and y\n * @sample {highcharts} highcharts/series/data-array-of-objects/\n *         Config objects\n *\n * @type      {Array<number|Array<string,(number|null)>|null|*>}\n * @extends   series.line.data\n * @excluding marker, x\n * @product   highcharts highmaps\n * @apioption series.pie.data\n */\n/**\n * @type      {Highcharts.SeriesPieDataLabelsOptionsObject}\n * @product   highcharts highmaps\n * @apioption series.pie.data.dataLabels\n */\n/**\n * The sequential index of the data point in the legend.\n *\n * @type      {number}\n * @product   highcharts highmaps\n * @apioption series.pie.data.legendIndex\n */\n/**\n * Whether to display a slice offset from the center.\n *\n * @sample {highcharts} highcharts/point/sliced/\n *         One sliced point\n *\n * @type      {boolean}\n * @product   highcharts highmaps\n * @apioption series.pie.data.sliced\n */\n/**\n * @extends plotOptions.pie.dataLabels\n * @excluding align, allowOverlap, inside, staggerLines, step\n * @product   highcharts highmaps\n * @apioption series.pie.dataLabels\n */\n/**\n * @excluding legendItemClick\n * @product   highcharts highmaps\n * @apioption series.pie.events\n */\n''; // placeholder for transpiled doclets above\n/* *\n *\n *  Default Export\n *\n * */\nexport default PieSeriesDefaults;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport CU from '../CenteredUtilities.js';\nvar getStartAndEndRadians = CU.getStartAndEndRadians;\nimport ColumnSeries from '../Column/ColumnSeries.js';\nimport H from '../../Core/Globals.js';\nvar noop = H.noop;\nimport LegendSymbol from '../../Core/Legend/LegendSymbol.js';\nimport PiePoint from './PiePoint.js';\nimport PieSeriesDefaults from './PieSeriesDefaults.js';\nimport Series from '../../Core/Series/Series.js';\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nimport Symbols from '../../Core/Renderer/SVG/Symbols.js';\nimport U from '../../Core/Utilities.js';\nvar clamp = U.clamp, extend = U.extend, fireEvent = U.fireEvent, merge = U.merge, pick = U.pick, relativeLength = U.relativeLength;\n/* *\n *\n *  Class\n *\n * */\n/**\n * Pie series type.\n *\n * @private\n * @class\n * @name Highcharts.seriesTypes.pie\n *\n * @augments Highcharts.Series\n */\nvar PieSeries = /** @class */ (function (_super) {\n    __extends(PieSeries, _super);\n    function PieSeries() {\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        _this.center = void 0;\n        _this.data = void 0;\n        _this.maxLabelDistance = void 0;\n        _this.options = void 0;\n        _this.points = void 0;\n        return _this;\n        /* eslint-enable valid-jsdoc */\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Animates the pies in.\n     * @private\n     */\n    PieSeries.prototype.animate = function (init) {\n        var series = this, points = series.points, startAngleRad = series.startAngleRad;\n        if (!init) {\n            points.forEach(function (point) {\n                var graphic = point.graphic, args = point.shapeArgs;\n                if (graphic && args) {\n                    // start values\n                    graphic.attr({\n                        // animate from inner radius (#779)\n                        r: pick(point.startR, (series.center && series.center[3] / 2)),\n                        start: startAngleRad,\n                        end: startAngleRad\n                    });\n                    // animate\n                    graphic.animate({\n                        r: args.r,\n                        start: args.start,\n                        end: args.end\n                    }, series.options.animation);\n                }\n            });\n        }\n    };\n    /**\n     * Called internally to draw auxiliary graph in pie-like series in\n     * situtation when the default graph is not sufficient enough to present\n     * the data well. Auxiliary graph is saved in the same object as\n     * regular graph.\n     * @private\n     */\n    PieSeries.prototype.drawEmpty = function () {\n        var start = this.startAngleRad, end = this.endAngleRad, options = this.options;\n        var centerX, centerY;\n        // Draw auxiliary graph if there're no visible points.\n        if (this.total === 0 && this.center) {\n            centerX = this.center[0];\n            centerY = this.center[1];\n            if (!this.graph) {\n                this.graph = this.chart.renderer\n                    .arc(centerX, centerY, this.center[1] / 2, 0, start, end)\n                    .addClass('highcharts-empty-series')\n                    .add(this.group);\n            }\n            this.graph.attr({\n                d: Symbols.arc(centerX, centerY, this.center[2] / 2, 0, {\n                    start: start,\n                    end: end,\n                    innerR: this.center[3] / 2\n                })\n            });\n            if (!this.chart.styledMode) {\n                this.graph.attr({\n                    'stroke-width': options.borderWidth,\n                    fill: options.fillColor || 'none',\n                    stroke: options.color || \"#cccccc\" /* Palette.neutralColor20 */\n                });\n            }\n        }\n        else if (this.graph) { // Destroy the graph object.\n            this.graph = this.graph.destroy();\n        }\n    };\n    /**\n     * Slices in pie chart are initialized in DOM, but it's shapes and\n     * animations are normally run in `drawPoints()`.\n     * @private\n     */\n    PieSeries.prototype.drawPoints = function () {\n        var renderer = this.chart.renderer;\n        this.points.forEach(function (point) {\n            // When updating a series between 2d and 3d or cartesian and\n            // polar, the shape type changes.\n            if (point.graphic && point.hasNewShapeType()) {\n                point.graphic = point.graphic.destroy();\n            }\n            if (!point.graphic) {\n                point.graphic = renderer[point.shapeType](point.shapeArgs)\n                    .add(point.series.group);\n                point.delayedRendering = true;\n            }\n        });\n    };\n    /**\n     * Extend the generatePoints method by adding total and percentage\n     * properties to each point\n     * @private\n     */\n    PieSeries.prototype.generatePoints = function () {\n        _super.prototype.generatePoints.call(this);\n        this.updateTotals();\n    };\n    /**\n     * Utility for getting the x value from a given y, used for\n     * anticollision logic in data labels. Added point for using specific\n     * points' label distance.\n     * @private\n     */\n    PieSeries.prototype.getX = function (y, left, point) {\n        var center = this.center, \n        // Variable pie has individual radius\n        radius = this.radii ?\n            this.radii[point.index] || 0 :\n            center[2] / 2;\n        var angle = Math.asin(clamp((y - center[1]) / (radius + point.labelDistance), -1, 1));\n        var x = center[0] +\n            (left ? -1 : 1) *\n                (Math.cos(angle) * (radius + point.labelDistance)) +\n            (point.labelDistance > 0 ?\n                (left ? -1 : 1) * this.options.dataLabels.padding :\n                0);\n        return x;\n    };\n    /**\n     * Define hasData function for non-cartesian series. Returns true if the\n     * series has points at all.\n     * @private\n     */\n    PieSeries.prototype.hasData = function () {\n        return !!this.processedXData.length; // != 0\n    };\n    /**\n     * Draw the data points\n     * @private\n     */\n    PieSeries.prototype.redrawPoints = function () {\n        var series = this, chart = series.chart, renderer = chart.renderer, shadow = series.options.shadow;\n        var groupTranslation, graphic, pointAttr, shapeArgs;\n        this.drawEmpty();\n        if (shadow && !series.shadowGroup && !chart.styledMode) {\n            series.shadowGroup = renderer\n                .g('shadow')\n                .attr({ zIndex: -1 })\n                .add(series.group);\n        }\n        // draw the slices\n        series.points.forEach(function (point) {\n            var animateTo = {};\n            graphic = point.graphic;\n            if (!point.isNull && graphic) {\n                var shadowGroup = void 0;\n                shapeArgs = point.shapeArgs;\n                // If the point is sliced, use special translation, else use\n                // plot area translation\n                groupTranslation = point.getTranslate();\n                if (!chart.styledMode) {\n                    // Put the shadow behind all points\n                    shadowGroup = point.shadowGroup;\n                    if (shadow && !shadowGroup) {\n                        shadowGroup = point.shadowGroup = renderer\n                            .g('shadow')\n                            .add(series.shadowGroup);\n                    }\n                    if (shadowGroup) {\n                        shadowGroup.attr(groupTranslation);\n                    }\n                    pointAttr = series.pointAttribs(point, (point.selected && 'select'));\n                }\n                // Draw the slice\n                if (!point.delayedRendering) {\n                    graphic\n                        .setRadialReference(series.center);\n                    if (!chart.styledMode) {\n                        merge(true, animateTo, pointAttr);\n                    }\n                    merge(true, animateTo, shapeArgs, groupTranslation);\n                    graphic.animate(animateTo);\n                }\n                else {\n                    graphic\n                        .setRadialReference(series.center)\n                        .attr(shapeArgs)\n                        .attr(groupTranslation);\n                    if (!chart.styledMode) {\n                        graphic\n                            .attr(pointAttr)\n                            .attr({ 'stroke-linejoin': 'round' })\n                            .shadow(shadow, shadowGroup);\n                    }\n                    point.delayedRendering = false;\n                }\n                graphic.attr({\n                    visibility: point.visible ? 'inherit' : 'hidden'\n                });\n                graphic.addClass(point.getClassName(), true);\n            }\n            else if (graphic) {\n                point.graphic = graphic.destroy();\n            }\n        });\n    };\n    /**\n     * Utility for sorting data labels.\n     * @private\n     */\n    PieSeries.prototype.sortByAngle = function (points, sign) {\n        points.sort(function (a, b) {\n            return ((typeof a.angle !== 'undefined') &&\n                (b.angle - a.angle) * sign);\n        });\n    };\n    /**\n     * Do translation for pie slices\n     * @private\n     */\n    PieSeries.prototype.translate = function (positions) {\n        fireEvent(this, 'translate');\n        this.generatePoints();\n        var series = this, precision = 1000, // issue #172\n        options = series.options, slicedOffset = options.slicedOffset, connectorOffset = slicedOffset + (options.borderWidth || 0), radians = getStartAndEndRadians(options.startAngle, options.endAngle), startAngleRad = series.startAngleRad = radians.start, endAngleRad = series.endAngleRad = radians.end, circ = endAngleRad - startAngleRad, // 2 * Math.PI,\n        points = series.points, labelDistance = options.dataLabels.distance, ignoreHiddenPoint = options.ignoreHiddenPoint, len = points.length;\n        var finalConnectorOffset, start, end, angle, \n        // the x component of the radius vector for a given point\n        radiusX, radiusY, i, point, cumulative = 0;\n        // Get positions - either an integer or a percentage string must be\n        // given. If positions are passed as a parameter, we're in a\n        // recursive loop for adjusting space for data labels.\n        if (!positions) {\n            series.center = positions = series.getCenter();\n        }\n        // Calculate the geometry for each point\n        for (i = 0; i < len; i++) {\n            point = points[i];\n            // set start and end angle\n            start = startAngleRad + (cumulative * circ);\n            if (point.isValid() &&\n                (!ignoreHiddenPoint || point.visible)) {\n                cumulative += point.percentage / 100;\n            }\n            end = startAngleRad + (cumulative * circ);\n            // set the shape\n            var shapeArgs = {\n                x: positions[0],\n                y: positions[1],\n                r: positions[2] / 2,\n                innerR: positions[3] / 2,\n                start: Math.round(start * precision) / precision,\n                end: Math.round(end * precision) / precision\n            };\n            point.shapeType = 'arc';\n            point.shapeArgs = shapeArgs;\n            // Used for distance calculation for specific point.\n            point.labelDistance = pick((point.options.dataLabels &&\n                point.options.dataLabels.distance), labelDistance);\n            // Compute point.labelDistance if it's defined as percentage\n            // of slice radius (#8854)\n            point.labelDistance = relativeLength(point.labelDistance, shapeArgs.r);\n            // Saved for later dataLabels distance calculation.\n            series.maxLabelDistance = Math.max(series.maxLabelDistance || 0, point.labelDistance);\n            // The angle must stay within -90 and 270 (#2645)\n            angle = (end + start) / 2;\n            if (angle > 1.5 * Math.PI) {\n                angle -= 2 * Math.PI;\n            }\n            else if (angle < -Math.PI / 2) {\n                angle += 2 * Math.PI;\n            }\n            // Center for the sliced out slice\n            point.slicedTranslation = {\n                translateX: Math.round(Math.cos(angle) * slicedOffset),\n                translateY: Math.round(Math.sin(angle) * slicedOffset)\n            };\n            // set the anchor point for tooltips\n            radiusX = Math.cos(angle) * positions[2] / 2;\n            radiusY = Math.sin(angle) * positions[2] / 2;\n            point.tooltipPos = [\n                positions[0] + radiusX * 0.7,\n                positions[1] + radiusY * 0.7\n            ];\n            point.half = angle < -Math.PI / 2 || angle > Math.PI / 2 ?\n                1 :\n                0;\n            point.angle = angle;\n            // Set the anchor point for data labels. Use point.labelDistance\n            // instead of labelDistance // #1174\n            // finalConnectorOffset - not override connectorOffset value.\n            finalConnectorOffset = Math.min(connectorOffset, point.labelDistance / 5); // #1678\n            point.labelPosition = {\n                natural: {\n                    // initial position of the data label - it's utilized for\n                    // finding the final position for the label\n                    x: positions[0] + radiusX + Math.cos(angle) *\n                        point.labelDistance,\n                    y: positions[1] + radiusY + Math.sin(angle) *\n                        point.labelDistance\n                },\n                'final': {\n                // used for generating connector path -\n                // initialized later in drawDataLabels function\n                // x: undefined,\n                // y: undefined\n                },\n                // left - pie on the left side of the data label\n                // right - pie on the right side of the data label\n                // center - data label overlaps the pie\n                alignment: point.labelDistance < 0 ?\n                    'center' : point.half ? 'right' : 'left',\n                connectorPosition: {\n                    breakAt: {\n                        x: positions[0] + radiusX + Math.cos(angle) *\n                            finalConnectorOffset,\n                        y: positions[1] + radiusY + Math.sin(angle) *\n                            finalConnectorOffset\n                    },\n                    touchingSliceAt: {\n                        x: positions[0] + radiusX,\n                        y: positions[1] + radiusY\n                    }\n                }\n            };\n        }\n        fireEvent(series, 'afterTranslate');\n    };\n    /**\n     * Recompute total chart sum and update percentages of points.\n     * @private\n     */\n    PieSeries.prototype.updateTotals = function () {\n        var points = this.points, len = points.length, ignoreHiddenPoint = this.options.ignoreHiddenPoint;\n        var i, point, total = 0;\n        // Get the total sum\n        for (i = 0; i < len; i++) {\n            point = points[i];\n            if (point.isValid() &&\n                (!ignoreHiddenPoint || point.visible)) {\n                total += point.y;\n            }\n        }\n        this.total = total;\n        // Set each point's properties\n        for (i = 0; i < len; i++) {\n            point = points[i];\n            point.percentage =\n                (total > 0 && (point.visible || !ignoreHiddenPoint)) ?\n                    point.y / total * 100 :\n                    0;\n            point.total = total;\n        }\n    };\n    PieSeries.defaultOptions = merge(Series.defaultOptions, PieSeriesDefaults);\n    return PieSeries;\n}(Series));\nextend(PieSeries.prototype, {\n    axisTypes: [],\n    directTouch: true,\n    drawGraph: void 0,\n    drawLegendSymbol: LegendSymbol.drawRectangle,\n    drawTracker: ColumnSeries.prototype.drawTracker,\n    getCenter: CU.getCenter,\n    getSymbol: noop,\n    isCartesian: false,\n    noSharedTooltip: true,\n    pointAttribs: ColumnSeries.prototype.pointAttribs,\n    pointClass: PiePoint,\n    requireSorting: false,\n    searchPoint: noop,\n    trackerGroups: ['group', 'dataLabelsGroup']\n});\nSeriesRegistry.registerSeriesType('pie', PieSeries);\n/* *\n *\n *  Default Export\n *\n * */\nexport default PieSeries;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport DataLabel from '../../Core/Series/DataLabel.js';\nimport H from '../../Core/Globals.js';\nvar noop = H.noop;\nimport R from '../../Core/Renderer/RendererUtilities.js';\nvar distribute = R.distribute;\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nvar Series = SeriesRegistry.series;\nimport U from '../../Core/Utilities.js';\nvar arrayMax = U.arrayMax, clamp = U.clamp, defined = U.defined, merge = U.merge, pick = U.pick, relativeLength = U.relativeLength;\n/* *\n *\n *  Composition\n *\n * */\nvar ColumnDataLabel;\n(function (ColumnDataLabel) {\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    var composedClasses = [];\n    var dataLabelPositioners = {\n        // Based on the value computed in Highcharts' distribute algorithm.\n        radialDistributionY: function (point) {\n            return point.top + point.distributeBox.pos;\n        },\n        // get the x - use the natural x position for labels near the\n        // top and bottom, to prevent the top and botton slice\n        // connectors from touching each other on either side\n        // Based on the value computed in Highcharts' distribute algorithm.\n        radialDistributionX: function (series, point, y, naturalY) {\n            return series.getX(y < point.top + 2 || y > point.bottom - 2 ?\n                naturalY :\n                y, point.half, point);\n        },\n        // dataLabels.distance determines the x position of the label\n        justify: function (point, radius, seriesCenter) {\n            return seriesCenter[0] + (point.half ? -1 : 1) *\n                (radius + point.labelDistance);\n        },\n        // Left edges of the left-half labels touch the left edge of the plot\n        // area. Right edges of the right-half labels touch the right edge of\n        // the plot area.\n        alignToPlotEdges: function (dataLabel, half, plotWidth, plotLeft) {\n            var dataLabelWidth = dataLabel.getBBox().width;\n            return half ? dataLabelWidth + plotLeft :\n                plotWidth - dataLabelWidth - plotLeft;\n        },\n        // Connectors of each side end in the same x position. Labels are\n        // aligned to them. Left edge of the widest left-half label touches the\n        // left edge of the plot area. Right edge of the widest right-half label\n        // touches the right edge of the plot area.\n        alignToConnectors: function (points, half, plotWidth, plotLeft) {\n            var maxDataLabelWidth = 0, dataLabelWidth;\n            // find widest data label\n            points.forEach(function (point) {\n                dataLabelWidth = point.dataLabel.getBBox().width;\n                if (dataLabelWidth > maxDataLabelWidth) {\n                    maxDataLabelWidth = dataLabelWidth;\n                }\n            });\n            return half ? maxDataLabelWidth + plotLeft :\n                plotWidth - maxDataLabelWidth - plotLeft;\n        }\n    };\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /** @private */\n    function compose(PieSeriesClass) {\n        DataLabel.compose(Series);\n        if (composedClasses.indexOf(PieSeriesClass) === -1) {\n            composedClasses.push(PieSeriesClass);\n            var pieProto = PieSeriesClass.prototype;\n            pieProto.dataLabelPositioners = dataLabelPositioners;\n            pieProto.alignDataLabel = noop;\n            pieProto.drawDataLabels = drawDataLabels;\n            pieProto.placeDataLabels = placeDataLabels;\n            pieProto.verifyDataLabelOverflow = verifyDataLabelOverflow;\n        }\n    }\n    ColumnDataLabel.compose = compose;\n    /**\n     * Override the base drawDataLabels method by pie specific functionality\n     * @private\n     */\n    function drawDataLabels() {\n        var series = this, data = series.data, chart = series.chart, options = series.options.dataLabels || {}, connectorPadding = options.connectorPadding, plotWidth = chart.plotWidth, plotHeight = chart.plotHeight, plotLeft = chart.plotLeft, maxWidth = Math.round(chart.chartWidth / 3), seriesCenter = series.center, radius = seriesCenter[2] / 2, centerY = seriesCenter[1], halves = [\n            [],\n            [] // left\n        ], overflow = [0, 0, 0, 0], // top, right, bottom, left\n        dataLabelPositioners = series.dataLabelPositioners;\n        var point, connectorWidth, connector, dataLabel, dataLabelWidth, \n        // labelPos,\n        labelPosition, labelHeight, \n        // divide the points into right and left halves for anti collision\n        x, y, visibility, j, pointDataLabelsOptions;\n        // get out if not enabled\n        if (!series.visible ||\n            (!options.enabled &&\n                !series._hasPointLabels)) {\n            return;\n        }\n        // Reset all labels that have been shortened\n        data.forEach(function (point) {\n            if (point.dataLabel && point.visible && point.dataLabel.shortened) {\n                point.dataLabel\n                    .attr({\n                    width: 'auto'\n                }).css({\n                    width: 'auto',\n                    textOverflow: 'clip'\n                });\n                point.dataLabel.shortened = false;\n            }\n        });\n        // run parent method\n        Series.prototype.drawDataLabels.apply(series);\n        data.forEach(function (point) {\n            if (point.dataLabel) {\n                if (point.visible) { // #407, #2510\n                    // Arrange points for detection collision\n                    halves[point.half].push(point);\n                    // Reset positions (#4905)\n                    point.dataLabel._pos = null;\n                    // Avoid long labels squeezing the pie size too far down\n                    if (!defined(options.style.width) &&\n                        !defined(point.options.dataLabels &&\n                            point.options.dataLabels.style &&\n                            point.options.dataLabels.style.width)) {\n                        if (point.dataLabel.getBBox().width > maxWidth) {\n                            point.dataLabel.css({\n                                // Use a fraction of the maxWidth to avoid\n                                // wrapping close to the end of the string.\n                                width: Math.round(maxWidth * 0.7) + 'px'\n                            });\n                            point.dataLabel.shortened = true;\n                        }\n                    }\n                }\n                else {\n                    point.dataLabel = point.dataLabel.destroy();\n                    // Workaround to make pies destroy multiple datalabels\n                    // correctly. This logic needs rewriting to support multiple\n                    // datalabels fully.\n                    if (point.dataLabels && point.dataLabels.length === 1) {\n                        delete point.dataLabels;\n                    }\n                }\n            }\n        });\n        /* Loop over the points in each half, starting from the top and bottom\n         * of the pie to detect overlapping labels.\n         */\n        halves.forEach(function (points, i) {\n            var length = points.length, positions = [];\n            var top, bottom, naturalY, sideOverflow, size, distributionLength;\n            if (!length) {\n                return;\n            }\n            // Sort by angle\n            series.sortByAngle(points, i - 0.5);\n            // Only do anti-collision when we have dataLabels outside the pie\n            // and have connectors. (#856)\n            if (series.maxLabelDistance > 0) {\n                top = Math.max(0, centerY - radius - series.maxLabelDistance);\n                bottom = Math.min(centerY + radius + series.maxLabelDistance, chart.plotHeight);\n                points.forEach(function (point) {\n                    // check if specific points' label is outside the pie\n                    if (point.labelDistance > 0 && point.dataLabel) {\n                        // point.top depends on point.labelDistance value\n                        // Used for calculation of y value in getX method\n                        point.top = Math.max(0, centerY - radius - point.labelDistance);\n                        point.bottom = Math.min(centerY + radius + point.labelDistance, chart.plotHeight);\n                        size = point.dataLabel.getBBox().height || 21;\n                        // point.positionsIndex is needed for getting index of\n                        // parameter related to specific point inside positions\n                        // array - not every point is in positions array.\n                        point.distributeBox = {\n                            target: point.labelPosition.natural.y -\n                                point.top + size / 2,\n                            size: size,\n                            rank: point.y\n                        };\n                        positions.push(point.distributeBox);\n                    }\n                });\n                distributionLength = bottom + size - top;\n                distribute(positions, distributionLength, distributionLength / 5);\n            }\n            // Now the used slots are sorted, fill them up sequentially\n            for (j = 0; j < length; j++) {\n                point = points[j];\n                // labelPos = point.labelPos;\n                labelPosition = point.labelPosition;\n                dataLabel = point.dataLabel;\n                visibility = point.visible === false ? 'hidden' : 'inherit';\n                naturalY = labelPosition.natural.y;\n                y = naturalY;\n                if (positions && defined(point.distributeBox)) {\n                    if (typeof point.distributeBox.pos === 'undefined') {\n                        visibility = 'hidden';\n                    }\n                    else {\n                        labelHeight = point.distributeBox.size;\n                        // Find label's y position\n                        y = dataLabelPositioners\n                            .radialDistributionY(point);\n                    }\n                }\n                // It is needed to delete point.positionIndex for\n                // dynamically added points etc.\n                delete point.positionIndex; // @todo unused\n                // Find label's x position\n                // justify is undocumented in the API - preserve support for it\n                if (options.justify) {\n                    x = dataLabelPositioners.justify(point, radius, seriesCenter);\n                }\n                else {\n                    switch (options.alignTo) {\n                        case 'connectors':\n                            x = dataLabelPositioners.alignToConnectors(points, i, plotWidth, plotLeft);\n                            break;\n                        case 'plotEdges':\n                            x = dataLabelPositioners.alignToPlotEdges(dataLabel, i, plotWidth, plotLeft);\n                            break;\n                        default:\n                            x = dataLabelPositioners.radialDistributionX(series, point, y, naturalY);\n                    }\n                }\n                // Record the placement and visibility\n                dataLabel._attr = {\n                    visibility: visibility,\n                    align: labelPosition.alignment\n                };\n                pointDataLabelsOptions = point.options.dataLabels || {};\n                dataLabel._pos = {\n                    x: (x +\n                        pick(pointDataLabelsOptions.x, options.x) + // (#12985)\n                        ({\n                            left: connectorPadding,\n                            right: -connectorPadding\n                        }[labelPosition.alignment] || 0)),\n                    // 10 is for the baseline (label vs text)\n                    y: (y +\n                        pick(pointDataLabelsOptions.y, options.y) - // (#12985)\n                        10)\n                };\n                // labelPos.x = x;\n                // labelPos.y = y;\n                labelPosition.final.x = x;\n                labelPosition.final.y = y;\n                // Detect overflowing data labels\n                if (pick(options.crop, true)) {\n                    dataLabelWidth = dataLabel.getBBox().width;\n                    sideOverflow = null;\n                    // Overflow left\n                    if (x - dataLabelWidth < connectorPadding &&\n                        i === 1 // left half\n                    ) {\n                        sideOverflow = Math.round(dataLabelWidth - x + connectorPadding);\n                        overflow[3] = Math.max(sideOverflow, overflow[3]);\n                        // Overflow right\n                    }\n                    else if (x + dataLabelWidth > plotWidth - connectorPadding &&\n                        i === 0 // right half\n                    ) {\n                        sideOverflow = Math.round(x + dataLabelWidth - plotWidth + connectorPadding);\n                        overflow[1] = Math.max(sideOverflow, overflow[1]);\n                    }\n                    // Overflow top\n                    if (y - labelHeight / 2 < 0) {\n                        overflow[0] = Math.max(Math.round(-y + labelHeight / 2), overflow[0]);\n                        // Overflow left\n                    }\n                    else if (y + labelHeight / 2 > plotHeight) {\n                        overflow[2] = Math.max(Math.round(y + labelHeight / 2 - plotHeight), overflow[2]);\n                    }\n                    dataLabel.sideOverflow = sideOverflow;\n                }\n            } // for each point\n        }); // for each half\n        // Do not apply the final placement and draw the connectors until we\n        // have verified that labels are not spilling over.\n        if (arrayMax(overflow) === 0 ||\n            this.verifyDataLabelOverflow(overflow)) {\n            // Place the labels in the final position\n            this.placeDataLabels();\n            this.points.forEach(function (point) {\n                // #8864: every connector can have individual options\n                pointDataLabelsOptions =\n                    merge(options, point.options.dataLabels);\n                connectorWidth =\n                    pick(pointDataLabelsOptions.connectorWidth, 1);\n                // Draw the connector\n                if (connectorWidth) {\n                    var isNew = void 0;\n                    connector = point.connector;\n                    dataLabel = point.dataLabel;\n                    if (dataLabel &&\n                        dataLabel._pos &&\n                        point.visible &&\n                        point.labelDistance > 0) {\n                        visibility = dataLabel._attr.visibility;\n                        isNew = !connector;\n                        if (isNew) {\n                            point.connector = connector = chart.renderer\n                                .path()\n                                .addClass('highcharts-data-label-connector ' +\n                                ' highcharts-color-' + point.colorIndex +\n                                (point.className ?\n                                    ' ' + point.className :\n                                    ''))\n                                .add(series.dataLabelsGroup);\n                            if (!chart.styledMode) {\n                                connector.attr({\n                                    'stroke-width': connectorWidth,\n                                    'stroke': (pointDataLabelsOptions.connectorColor ||\n                                        point.color ||\n                                        \"#666666\" /* Palette.neutralColor60 */)\n                                });\n                            }\n                        }\n                        connector[isNew ? 'attr' : 'animate']({\n                            d: point.getConnectorPath()\n                        });\n                        connector.attr('visibility', visibility);\n                    }\n                    else if (connector) {\n                        point.connector = connector.destroy();\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Perform the final placement of the data labels after we have verified\n     * that they fall within the plot area.\n     * @private\n     */\n    function placeDataLabels() {\n        this.points.forEach(function (point) {\n            var dataLabel = point.dataLabel, _pos;\n            if (dataLabel && point.visible) {\n                _pos = dataLabel._pos;\n                if (_pos) {\n                    // Shorten data labels with ellipsis if they still overflow\n                    // after the pie has reached minSize (#223).\n                    if (dataLabel.sideOverflow) {\n                        dataLabel._attr.width =\n                            Math.max(dataLabel.getBBox().width -\n                                dataLabel.sideOverflow, 0);\n                        dataLabel.css({\n                            width: dataLabel._attr.width + 'px',\n                            textOverflow: ((this.options.dataLabels.style || {})\n                                .textOverflow ||\n                                'ellipsis')\n                        });\n                        dataLabel.shortened = true;\n                    }\n                    dataLabel.attr(dataLabel._attr);\n                    dataLabel[dataLabel.moved ? 'animate' : 'attr'](_pos);\n                    dataLabel.moved = true;\n                }\n                else if (dataLabel) {\n                    dataLabel.attr({ y: -9999 });\n                }\n            }\n            // Clear for update\n            delete point.distributeBox;\n        }, this);\n    }\n    /**\n     * Verify whether the data labels are allowed to draw, or we should run more\n     * translation and data label positioning to keep them inside the plot area.\n     * Returns true when data labels are ready to draw.\n     * @private\n     */\n    function verifyDataLabelOverflow(overflow) {\n        var center = this.center, options = this.options, centerOption = options.center, minSize = options.minSize || 80, newSize = minSize, \n        // If a size is set, return true and don't try to shrink the pie\n        // to fit the labels.\n        ret = options.size !== null;\n        if (!ret) {\n            // Handle horizontal size and center\n            if (centerOption[0] !== null) { // Fixed center\n                newSize = Math.max(center[2] -\n                    Math.max(overflow[1], overflow[3]), minSize);\n            }\n            else { // Auto center\n                newSize = Math.max(\n                // horizontal overflow\n                center[2] - overflow[1] - overflow[3], minSize);\n                // horizontal center\n                center[0] += (overflow[3] - overflow[1]) / 2;\n            }\n            // Handle vertical size and center\n            if (centerOption[1] !== null) { // Fixed center\n                newSize = clamp(newSize, minSize, center[2] - Math.max(overflow[0], overflow[2]));\n            }\n            else { // Auto center\n                newSize = clamp(newSize, minSize, \n                // vertical overflow\n                center[2] - overflow[0] - overflow[2]);\n                // vertical center\n                center[1] += (overflow[0] - overflow[2]) / 2;\n            }\n            // If the size must be decreased, we need to run translate and\n            // drawDataLabels again\n            if (newSize < center[2]) {\n                center[2] = newSize;\n                center[3] = Math.min(// #3632\n                options.thickness ?\n                    Math.max(0, newSize - options.thickness * 2) :\n                    Math.max(0, relativeLength(options.innerSize || 0, newSize)), newSize); // #6647\n                this.translate(center);\n                if (this.drawDataLabels) {\n                    this.drawDataLabels();\n                }\n                // Else, return true to indicate that the pie and its labels is\n                // within the plot area\n            }\n            else {\n                ret = true;\n            }\n        }\n        return ret;\n    }\n})(ColumnDataLabel || (ColumnDataLabel = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default ColumnDataLabel;\n","/* *\n *\n *  Highcharts module to hide overlapping data labels.\n *  This module is included in Highcharts.\n *\n *  (c) 2009-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport Chart from '../Core/Chart/Chart.js';\nimport U from '../Core/Utilities.js';\nvar addEvent = U.addEvent, fireEvent = U.fireEvent, isArray = U.isArray, isNumber = U.isNumber, objectEach = U.objectEach, pick = U.pick;\n/**\n * Internal type\n * @private\n */\n/* eslint-disable no-invalid-this */\n// Collect potensial overlapping data labels. Stack labels probably don't need\n// to be considered because they are usually accompanied by data labels that lie\n// inside the columns.\naddEvent(Chart, 'render', function collectAndHide() {\n    var chart = this, labels = [];\n    // Consider external label collectors\n    (this.labelCollectors || []).forEach(function (collector) {\n        labels = labels.concat(collector());\n    });\n    (this.yAxis || []).forEach(function (yAxis) {\n        if (yAxis.stacking &&\n            yAxis.options.stackLabels &&\n            !yAxis.options.stackLabels.allowOverlap) {\n            objectEach(yAxis.stacking.stacks, function (stack) {\n                objectEach(stack, function (stackItem) {\n                    if (stackItem.label) {\n                        labels.push(stackItem.label);\n                    }\n                });\n            });\n        }\n    });\n    (this.series || []).forEach(function (series) {\n        var dlOptions = series.options.dataLabels;\n        if (series.visible &&\n            !(dlOptions.enabled === false && !series._hasPointLabels)) { // #3866\n            var push = function (points) {\n                return points.forEach(function (point) {\n                    if (point.visible) {\n                        var dataLabels = (isArray(point.dataLabels) ?\n                            point.dataLabels :\n                            (point.dataLabel ? [point.dataLabel] : []));\n                        dataLabels.forEach(function (label) {\n                            var options = label.options;\n                            label.labelrank = pick(options.labelrank, point.labelrank, point.shapeArgs && point.shapeArgs.height); // #4118\n                            if (!options.allowOverlap) {\n                                labels.push(label);\n                            }\n                            else { // #13449\n                                label.oldOpacity = label.opacity;\n                                label.newOpacity = 1;\n                                hideOrShow(label, chart);\n                            }\n                        });\n                    }\n                });\n            };\n            push(series.nodes || []);\n            push(series.points);\n        }\n    });\n    this.hideOverlappingLabels(labels);\n});\n/**\n * Hide overlapping labels. Labels are moved and faded in and out on zoom to\n * provide a smooth visual imression.\n *\n * @private\n * @function Highcharts.Chart#hideOverlappingLabels\n * @param {Array<Highcharts.SVGElement>} labels\n * Rendered data labels\n * @requires modules/overlapping-datalabels\n */\nChart.prototype.hideOverlappingLabels = function (labels) {\n    var chart = this, len = labels.length, ren = chart.renderer, label, i, j, label1, label2, box1, box2, isLabelAffected = false, isIntersectRect = function (box1, box2) {\n        return !(box2.x >= box1.x + box1.width ||\n            box2.x + box2.width <= box1.x ||\n            box2.y >= box1.y + box1.height ||\n            box2.y + box2.height <= box1.y);\n    }, \n    // Get the box with its position inside the chart, as opposed to getBBox\n    // that only reports the position relative to the parent.\n    getAbsoluteBox = function (label) {\n        var pos, parent, bBox, \n        // Substract the padding if no background or border (#4333)\n        padding = label.box ? 0 : (label.padding || 0), lineHeightCorrection = 0, xOffset = 0, boxWidth, alignValue;\n        if (label &&\n            (!label.alignAttr || label.placed)) {\n            pos = label.alignAttr || {\n                x: label.attr('x'),\n                y: label.attr('y')\n            };\n            parent = label.parentGroup;\n            // Get width and height if pure text nodes (stack labels)\n            if (!label.width) {\n                bBox = label.getBBox();\n                label.width = bBox.width;\n                label.height = bBox.height;\n                // Labels positions are computed from top left corner, so\n                // we need to substract the text height from text nodes too.\n                lineHeightCorrection = ren\n                    .fontMetrics(null, label.element).h;\n            }\n            boxWidth = label.width - 2 * padding;\n            alignValue = {\n                left: '0',\n                center: '0.5',\n                right: '1'\n            }[label.alignValue];\n            if (alignValue) {\n                xOffset = +alignValue * boxWidth;\n            }\n            else if (isNumber(label.x) &&\n                Math.round(label.x) !== label.translateX) {\n                xOffset = label.x - label.translateX;\n            }\n            return {\n                x: pos.x + (parent.translateX || 0) + padding -\n                    (xOffset || 0),\n                y: pos.y + (parent.translateY || 0) + padding -\n                    lineHeightCorrection,\n                width: label.width - 2 * padding,\n                height: label.height - 2 * padding\n            };\n        }\n    };\n    for (i = 0; i < len; i++) {\n        label = labels[i];\n        if (label) {\n            // Mark with initial opacity\n            label.oldOpacity = label.opacity;\n            label.newOpacity = 1;\n            label.absoluteBox = getAbsoluteBox(label);\n        }\n    }\n    // Prevent a situation in a gradually rising slope, that each label will\n    // hide the previous one because the previous one always has lower rank.\n    labels.sort(function (a, b) {\n        return (b.labelrank || 0) - (a.labelrank || 0);\n    });\n    // Detect overlapping labels\n    for (i = 0; i < len; i++) {\n        label1 = labels[i];\n        box1 = label1 && label1.absoluteBox;\n        for (j = i + 1; j < len; ++j) {\n            label2 = labels[j];\n            box2 = label2 && label2.absoluteBox;\n            if (box1 &&\n                box2 &&\n                label1 !== label2 && // #6465, polar chart with connectEnds\n                label1.newOpacity !== 0 &&\n                label2.newOpacity !== 0 &&\n                // #15863 dataLabels are no longer hidden by translation\n                label1.visibility !== 'hidden' &&\n                label2.visibility !== 'hidden') {\n                if (isIntersectRect(box1, box2)) {\n                    (label1.labelrank < label2.labelrank ? label1 : label2)\n                        .newOpacity = 0;\n                }\n            }\n        }\n    }\n    // Hide or show\n    labels.forEach(function (label) {\n        if (hideOrShow(label, chart)) {\n            isLabelAffected = true;\n        }\n    });\n    if (isLabelAffected) {\n        fireEvent(chart, 'afterHideAllOverlappingLabels');\n    }\n};\n/**\n * Hide or show labels based on opacity.\n *\n * @private\n * @function hideOrShow\n * @param {Highcharts.SVGElement} label\n * The label.\n * @param {Highcharts.Chart} chart\n * The chart that contains the label.\n * @return {boolean}\n * Whether label is affected\n */\nfunction hideOrShow(label, chart) {\n    var complete, newOpacity, isLabelAffected = false;\n    if (label) {\n        newOpacity = label.newOpacity;\n        if (label.oldOpacity !== newOpacity) {\n            // Make sure the label is completely hidden to avoid catching clicks\n            // (#4362)\n            if (label.alignAttr && label.placed) { // data labels\n                label[newOpacity ? 'removeClass' : 'addClass']('highcharts-data-label-hidden');\n                complete = function () {\n                    if (!chart.styledMode) {\n                        label.css({\n                            pointerEvents: newOpacity ? 'auto' : 'none'\n                        });\n                    }\n                };\n                isLabelAffected = true;\n                // Animate or set the opacity\n                label.alignAttr.opacity = newOpacity;\n                label[label.isOld ? 'animate' : 'attr'](label.alignAttr, null, complete);\n                fireEvent(chart, 'afterHideOverlappingLabel');\n            }\n            else { // other labels, tick labels\n                label.attr({\n                    opacity: newOpacity\n                });\n            }\n        }\n        label.isOld = true;\n    }\n    return isLabelAffected;\n}\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport U from './Utilities.js';\nvar extend = U.extend, find = U.find, isArray = U.isArray, isObject = U.isObject, merge = U.merge, objectEach = U.objectEach, pick = U.pick, splat = U.splat, uniqueKey = U.uniqueKey;\n/* *\n *\n *  Composition\n *\n * */\nvar Responsive;\n(function (Responsive) {\n    /* *\n     *\n     *  Declarations\n     *\n     * */\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    var composedClasses = [];\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * @private\n     */\n    function compose(ChartClass) {\n        if (composedClasses.indexOf(ChartClass) === -1) {\n            composedClasses.push(ChartClass);\n            extend(ChartClass.prototype, Additions.prototype);\n        }\n        return ChartClass;\n    }\n    Responsive.compose = compose;\n    /* *\n     *\n     *  Class\n     *\n     * */\n    var Additions = /** @class */ (function () {\n        function Additions() {\n        }\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the current values for a given set of options. Used before we\n         * update the chart with a new responsiveness rule.\n         *\n         * @todo Restore axis options (by id?). The matching of items in\n         * collections bears resemblance to the oneToOne matching in\n         * Chart.update. Probably we can refactor out that matching and reuse it\n         * in both functions.\n         *\n         * @private\n         * @function Highcharts.Chart#currentOptions\n         */\n        Additions.prototype.currentOptions = function (options) {\n            var chart = this, ret = {};\n            /**\n             * Recurse over a set of options and its current values,\n             * and store the current values in the ret object.\n             */\n            function getCurrent(options, curr, ret, depth) {\n                var i;\n                objectEach(options, function (val, key) {\n                    if (!depth &&\n                        chart.collectionsWithUpdate.indexOf(key) > -1 &&\n                        curr[key]) {\n                        val = splat(val);\n                        ret[key] = [];\n                        // Iterate over collections like series, xAxis or yAxis\n                        // and map the items by index.\n                        for (i = 0; i < Math.max(val.length, curr[key].length); i++) {\n                            // Item exists in current data (#6347)\n                            if (curr[key][i]) {\n                                // If the item is missing from the new data, we\n                                // need to save the whole config structure. Like\n                                // when responsively updating from a dual axis\n                                // layout to a single axis and back (#13544).\n                                if (val[i] === void 0) {\n                                    ret[key][i] = curr[key][i];\n                                    // Otherwise, proceed\n                                }\n                                else {\n                                    ret[key][i] = {};\n                                    getCurrent(val[i], curr[key][i], ret[key][i], depth + 1);\n                                }\n                            }\n                        }\n                    }\n                    else if (isObject(val)) {\n                        ret[key] = isArray(val) ? [] : {};\n                        getCurrent(val, curr[key] || {}, ret[key], depth + 1);\n                    }\n                    else if (typeof curr[key] === 'undefined') { // #10286\n                        ret[key] = null;\n                    }\n                    else {\n                        ret[key] = curr[key];\n                    }\n                });\n            }\n            getCurrent(options, this.options, ret, 0);\n            return ret;\n        };\n        /**\n         * Handle a single responsiveness rule.\n         *\n         * @private\n         * @function Highcharts.Chart#matchResponsiveRule\n         * @param {Highcharts.ResponsiveRulesOptions} rule\n         * @param {Array<string>} matches\n         */\n        Additions.prototype.matchResponsiveRule = function (rule, matches) {\n            var condition = rule.condition, fn = condition.callback || function () {\n                return (this.chartWidth <= pick(condition.maxWidth, Number.MAX_VALUE) &&\n                    this.chartHeight <= pick(condition.maxHeight, Number.MAX_VALUE) &&\n                    this.chartWidth >= pick(condition.minWidth, 0) &&\n                    this.chartHeight >= pick(condition.minHeight, 0));\n            };\n            if (fn.call(this)) {\n                matches.push(rule._id);\n            }\n        };\n        /**\n         * Update the chart based on the current chart/document size and options\n         * for responsiveness.\n         *\n         * @private\n         * @function Highcharts.Chart#setResponsive\n         * @param  {boolean} [redraw=true]\n         * @param  {boolean} [reset=false]\n         * Reset by un-applying all rules. Chart.update resets all rules before\n         * applying updated options.\n         */\n        Additions.prototype.setResponsive = function (redraw, reset) {\n            var _this = this;\n            var options = this.options.responsive, currentResponsive = this.currentResponsive;\n            var ruleIds = [], undoOptions;\n            if (!reset && options && options.rules) {\n                options.rules.forEach(function (rule) {\n                    if (typeof rule._id === 'undefined') {\n                        rule._id = uniqueKey();\n                    }\n                    _this.matchResponsiveRule(rule, ruleIds /* , redraw */);\n                }, this);\n            }\n            // Merge matching rules\n            var mergedOptions = merge.apply(void 0, ruleIds\n                .map(function (ruleId) { return find((options || {}).rules || [], function (rule) { return (rule._id === ruleId); }); })\n                .map(function (rule) { return (rule && rule.chartOptions); }));\n            mergedOptions.isResponsiveOptions = true;\n            // Stringified key for the rules that currently apply.\n            ruleIds = (ruleIds.toString() || void 0);\n            var currentRuleIds = (currentResponsive && currentResponsive.ruleIds);\n            // Changes in what rules apply\n            if (ruleIds !== currentRuleIds) {\n                // Undo previous rules. Before we apply a new set of rules, we\n                // need to roll back completely to base options (#6291).\n                if (currentResponsive) {\n                    this.update(currentResponsive.undoOptions, redraw, true);\n                }\n                if (ruleIds) {\n                    // Get undo-options for matching rules\n                    undoOptions = this.currentOptions(mergedOptions);\n                    undoOptions.isResponsiveOptions = true;\n                    this.currentResponsive = {\n                        ruleIds: ruleIds,\n                        mergedOptions: mergedOptions,\n                        undoOptions: undoOptions\n                    };\n                    this.update(mergedOptions, redraw, true);\n                }\n                else {\n                    this.currentResponsive = void 0;\n                }\n            }\n        };\n        return Additions;\n    }());\n})(Responsive || (Responsive = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default Responsive;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * A callback function to gain complete control on when the responsive rule\n * applies.\n *\n * @callback Highcharts.ResponsiveCallbackFunction\n *\n * @param {Highcharts.Chart} this\n * Chart context.\n *\n * @return {boolean}\n * Return `true` if it applies.\n */\n(''); // keeps doclets above in JS file\n/* *\n *\n *  API Options\n *\n * */\n/**\n * Allows setting a set of rules to apply for different screen or chart\n * sizes. Each rule specifies additional chart options.\n *\n * @sample {highstock} stock/demo/responsive/\n *         Stock chart\n * @sample highcharts/responsive/axis/\n *         Axis\n * @sample highcharts/responsive/legend/\n *         Legend\n * @sample highcharts/responsive/classname/\n *         Class name\n *\n * @since     5.0.0\n * @apioption responsive\n */\n/**\n * A set of rules for responsive settings. The rules are executed from\n * the top down.\n *\n * @sample {highcharts} highcharts/responsive/axis/\n *         Axis changes\n * @sample {highstock} highcharts/responsive/axis/\n *         Axis changes\n * @sample {highmaps} highcharts/responsive/axis/\n *         Axis changes\n *\n * @type      {Array<*>}\n * @since     5.0.0\n * @apioption responsive.rules\n */\n/**\n * A full set of chart options to apply as overrides to the general\n * chart options. The chart options are applied when the given rule\n * is active.\n *\n * A special case is configuration objects that take arrays, for example\n * [xAxis](#xAxis), [yAxis](#yAxis) or [series](#series). For these\n * collections, an `id` option is used to map the new option set to\n * an existing object. If an existing object of the same id is not found,\n * the item of the same indexupdated. So for example, setting `chartOptions`\n * with two series items without an `id`, will cause the existing chart's\n * two series to be updated with respective options.\n *\n * @sample {highstock} stock/demo/responsive/\n *         Stock chart\n * @sample highcharts/responsive/axis/\n *         Axis\n * @sample highcharts/responsive/legend/\n *         Legend\n * @sample highcharts/responsive/classname/\n *         Class name\n *\n * @type      {Highcharts.Options}\n * @since     5.0.0\n * @apioption responsive.rules.chartOptions\n */\n/**\n * Under which conditions the rule applies.\n *\n * @since     5.0.0\n * @apioption responsive.rules.condition\n */\n/**\n * A callback function to gain complete control on when the responsive\n * rule applies. Return `true` if it applies. This opens for checking\n * against other metrics than the chart size, for example the document\n * size or other elements.\n *\n * @type      {Highcharts.ResponsiveCallbackFunction}\n * @since     5.0.0\n * @context   Highcharts.Chart\n * @apioption responsive.rules.condition.callback\n */\n/**\n * The responsive rule applies if the chart height is less than this.\n *\n * @type      {number}\n * @since     5.0.0\n * @apioption responsive.rules.condition.maxHeight\n */\n/**\n * The responsive rule applies if the chart width is less than this.\n *\n * @sample highcharts/responsive/axis/\n *         Max width is 500\n *\n * @type      {number}\n * @since     5.0.0\n * @apioption responsive.rules.condition.maxWidth\n */\n/**\n * The responsive rule applies if the chart height is greater than this.\n *\n * @type      {number}\n * @default   0\n * @since     5.0.0\n * @apioption responsive.rules.condition.minHeight\n */\n/**\n * The responsive rule applies if the chart width is greater than this.\n *\n * @type      {number}\n * @default   0\n * @since     5.0.0\n * @apioption responsive.rules.condition.minWidth\n */\n(''); // keeps doclets above in JS file\n","/**\n * @license Highcharts JS v10.3.3 (2023-01-20)\n * @module highcharts/highcharts\n *\n * (c) 2009-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n'use strict';\nimport Highcharts from '../Core/Globals.js';\nimport Utilities from '../Core/Utilities.js';\nimport Defaults from '../Core/Defaults.js';\nimport Fx from '../Core/Animation/Fx.js';\nimport Animation from '../Core/Animation/AnimationUtilities.js';\nimport AST from '../Core/Renderer/HTML/AST.js';\nimport FormatUtilities from '../Core/FormatUtilities.js';\nimport RendererUtilities from '../Core/Renderer/RendererUtilities.js';\nimport SVGElement from '../Core/Renderer/SVG/SVGElement.js';\nimport SVGRenderer from '../Core/Renderer/SVG/SVGRenderer.js';\nimport HTMLElement from '../Core/Renderer/HTML/HTMLElement.js';\nimport HTMLRenderer from '../Core/Renderer/HTML/HTMLRenderer.js';\nimport Axis from '../Core/Axis/Axis.js';\nimport DateTimeAxis from '../Core/Axis/DateTimeAxis.js';\nimport LogarithmicAxis from '../Core/Axis/LogarithmicAxis.js';\nimport PlotLineOrBand from '../Core/Axis/PlotLineOrBand/PlotLineOrBand.js';\nimport Tick from '../Core/Axis/Tick.js';\nimport Tooltip from '../Core/Tooltip.js';\nimport Point from '../Core/Series/Point.js';\nimport Pointer from '../Core/Pointer.js';\nimport MSPointer from '../Core/MSPointer.js';\nimport Legend from '../Core/Legend/Legend.js';\nimport Chart from '../Core/Chart/Chart.js';\nimport '../Extensions/ScrollablePlotArea.js';\nimport StackingAxis from '../Core/Axis/Stacking/StackingAxis.js';\nimport StackItem from '../Core/Axis/Stacking/StackItem.js';\nimport Series from '../Core/Series/Series.js';\nimport SeriesRegistry from '../Core/Series/SeriesRegistry.js';\nimport '../Series/Line/LineSeries.js';\nimport '../Series/Area/AreaSeries.js';\nimport '../Series/Spline/SplineSeries.js';\nimport '../Series/AreaSpline/AreaSplineSeries.js';\nimport ColumnSeries from '../Series/Column/ColumnSeries.js';\nimport ColumnDataLabel from '../Series/Column/ColumnDataLabel.js';\nimport '../Series/Bar/BarSeries.js';\nimport '../Series/Scatter/ScatterSeries.js';\nimport PieSeries from '../Series/Pie/PieSeries.js';\nimport PieDataLabel from '../Series/Pie/PieDataLabel.js';\nimport DataLabel from '../Core/Series/DataLabel.js';\nimport '../Extensions/OverlappingDataLabels.js';\nimport Responsive from '../Core/Responsive.js';\nimport Color from '../Core/Color/Color.js';\nimport Time from '../Core/Time.js';\nvar G = Highcharts;\n// Animation\nG.animate = Animation.animate;\nG.animObject = Animation.animObject;\nG.getDeferredAnimation = Animation.getDeferredAnimation;\nG.setAnimation = Animation.setAnimation;\nG.stop = Animation.stop;\nG.timers = Fx.timers;\n// Classes\nG.AST = AST;\nG.Axis = Axis;\nG.Chart = Chart;\nG.chart = Chart.chart;\nG.Fx = Fx;\nG.Legend = Legend;\nG.PlotLineOrBand = PlotLineOrBand;\nG.Point = Point;\nG.Pointer = (MSPointer.isRequired() ? MSPointer : Pointer);\nG.Series = Series;\nG.StackItem = StackItem;\nG.SVGElement = SVGElement;\nG.SVGRenderer = SVGRenderer;\nG.Tick = Tick;\nG.Time = Time;\nG.Tooltip = Tooltip;\n// Color\nG.Color = Color;\nG.color = Color.parse;\n// Compositions\nHTMLRenderer.compose(SVGRenderer);\nHTMLElement.compose(SVGElement);\n// DefaultOptions\nG.defaultOptions = Defaults.defaultOptions;\nG.getOptions = Defaults.getOptions;\nG.time = Defaults.defaultTime;\nG.setOptions = Defaults.setOptions;\n// Format Utilities\nG.dateFormat = FormatUtilities.dateFormat;\nG.format = FormatUtilities.format;\nG.numberFormat = FormatUtilities.numberFormat;\n// Utilities\nG.addEvent = Utilities.addEvent;\nG.arrayMax = Utilities.arrayMax;\nG.arrayMin = Utilities.arrayMin;\nG.attr = Utilities.attr;\nG.clearTimeout = Utilities.clearTimeout;\nG.correctFloat = Utilities.correctFloat;\nG.createElement = Utilities.createElement;\nG.css = Utilities.css;\nG.defined = Utilities.defined;\nG.destroyObjectProperties = Utilities.destroyObjectProperties;\nG.discardElement = Utilities.discardElement;\nG.distribute = RendererUtilities.distribute;\nG.erase = Utilities.erase;\nG.error = Utilities.error;\nG.extend = Utilities.extend;\nG.extendClass = Utilities.extendClass;\nG.find = Utilities.find;\nG.fireEvent = Utilities.fireEvent;\nG.getMagnitude = Utilities.getMagnitude;\nG.getStyle = Utilities.getStyle;\nG.inArray = Utilities.inArray;\nG.isArray = Utilities.isArray;\nG.isClass = Utilities.isClass;\nG.isDOMElement = Utilities.isDOMElement;\nG.isFunction = Utilities.isFunction;\nG.isNumber = Utilities.isNumber;\nG.isObject = Utilities.isObject;\nG.isString = Utilities.isString;\nG.keys = Utilities.keys;\nG.merge = Utilities.merge;\nG.normalizeTickInterval = Utilities.normalizeTickInterval;\nG.objectEach = Utilities.objectEach;\nG.offset = Utilities.offset;\nG.pad = Utilities.pad;\nG.pick = Utilities.pick;\nG.pInt = Utilities.pInt;\nG.relativeLength = Utilities.relativeLength;\nG.removeEvent = Utilities.removeEvent;\nG.seriesType = SeriesRegistry.seriesType;\nG.splat = Utilities.splat;\nG.stableSort = Utilities.stableSort;\nG.syncTimeout = Utilities.syncTimeout;\nG.timeUnits = Utilities.timeUnits;\nG.uniqueKey = Utilities.uniqueKey;\nG.useSerialIds = Utilities.useSerialIds;\nG.wrap = Utilities.wrap;\n// Compositions\nColumnDataLabel.compose(ColumnSeries);\nDataLabel.compose(Series);\nDateTimeAxis.compose(Axis);\nLogarithmicAxis.compose(Axis);\nPieDataLabel.compose(PieSeries);\nPlotLineOrBand.compose(Axis);\nResponsive.compose(Chart);\nStackingAxis.compose(Axis, Chart, Series);\n// Default Export\nexport default G;\n"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]}