{"version":3,"file":"896.f7b7db41be07e297.js","mappings":"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","names":["LegendSymbol","extend","U","merge","pick","drawLineMarker","legend","legendSymbol","legendItem","this","options","symbolWidth","symbolHeight","generalRadius","renderer","chart","legendItemGroup","group","verticalCenter","baseline","Math","round","fontMetrics","b","attr","markerOptions","marker","lineSizer","styledMode","min","lineWidth","dashStyle","dashstyle","linecap","line","path","addClass","add","strokeWidth","d","enabled","radius","symbol","indexOf","width","height","context","isMarker","drawRectangle","item","square","squareSymbol","rect","symbolRadius","zIndex","allowPointSelect","crisp","showCheckbox","animation","duration","events","enabledThreshold","lineColor","states","normal","hover","radiusPlus","lineWidthPlus","select","fillColor","point","dataLabels","align","borderWidth","defer","formatter","y","numberFormatter","series","padding","style","fontSize","fontWeight","color","textOutline","verticalAlign","x","cropThreshold","opacity","pointRange","softThreshold","halo","size","inactive","stickyTracking","turboThreshold","findNearestPointBy","animObject","A","setAnimation","defaultOptions","D","registerEventOptions","F","hasTouch","H","svg","win","seriesTypes","SeriesRegistry","arrayMax","arrayMin","clamp","cleanRecursively","correctFloat","defined","erase","error","find","fireEvent","getNestedProperty","isArray","isNumber","isString","objectEach","removeEvent","splat","syncTimeout","Series","_i","data","eventOptions","eventsToUnbind","index","linkedSeries","points","processedXData","processedYData","tooltipOptions","userOptions","xAxis","yAxis","zones","prototype","init","chartSeries","setOptions","bindAxes","name","state","visible","selected","lastSeries","click","runTrackerClick","getColor","getSymbol","parallelArrays","forEach","key","isCartesian","hasCartesianSeries","length","orderSeries","insert","dataSorting","setDataSortingOptions","setData","is","type","collection","i","indexOption","splice","unshift","push","axisOptions","seriesOptions","axisTypes","AXIS","axis","isInternal","id","isDirty","optionalAxis","updateParallelArrays","args","arguments","fn","val","toYData","Array","apply","slice","call","hasData","dataMax","dataMin","yData","autoIncrement","date","pointInterval","pointIntervalUnit","relativeXValue","time","xIncrement","pointStart","Date","set","get","getTime","requireSorting","sorted","enabledDataSorting","allowDG","itemOptions","zone","chartOptions","plotOptions","seriesUserOptions","e","typeOptions","userPlotOptions","tooltip","shared","noSharedTooltip","zoneAxis","negativeColor","negativeFillColor","value","threshold","className","getName","getCyclic","prop","defaults","setting","indexName","counterName","len","colorByPoint","colors","getPointsCollection","hasGroupedData","symbols","findPointIndex","optionsObject","fromIndex","matchingPoint","matchedById","pointIndex","oldData","Point","linkedParent","matcher","oldPoint","touched","matchByName","xData","cropped","cropStart","updateData","hasUpdatedByKey","lastIndex","pointsToAdd","equalLength","succeeded","pointOptions","pointClass","optionsToObject","update","hasDerivedData","remove","addPoint","redraw","updatePoints","pt","updatedData","copiedData","oldDataLength","pointArrayMap","valueCount","keys","indexOfX","indexOfY","firstPoint","allowMutatingData","dataLength","sortData","boosted","colorCounter","getFirstValidPoint","applyOptions","destroy","minRange","userMinRange","isDirtyBox","isDirtyData","legendType","processData","generatePoints","sortKey","getPointOptionsObject","sortedData","concat","sort","a","aValue","bValue","seriesData","getProcessedData","forceExtremesFromAll","croppedData","distance","closestPointRange","xExtremes","max","getExtremesFromAll","val2lin","isLog","logarithmic","throwOnUnsorted","updatingNames","getExtremes","categories","names","forceCrop","cropData","start","force","processedData","basePointRange","cropShoulder","j","cropEnd","end","cursor","dataOptions","PointClass","processedDataLength","groupCropStartIndex","dataGrouping","groupAll","arr","dataGroup","groupMap","destroyElements","plotX","getXExtremes","activeYData","shoulder","positiveValuesOnly","xMin","xMax","activeCounter","yDataLength","stackedYData","dataExtremes","applyExtremes","translate","lastPlotX","stackIndicator","stacking","pointPlacement","pointPlacementToXValue","dynamicallyPlaced","Boolean","stackThreshold","startFromThreshold","closestPointRangePx","Number","MAX_VALUE","limitedRange","xValue","pointStack","stackValues","yValue","yBottom","low","stack","stacks","negStacks","stackKey","validatePositiveValue","isNull","getStackIndicator","base","total","stackTotal","percentage","stackY","irregularWidths","setOffset","pointXOffset","barW","dataModify","modifyValue","plotY","translated","isInside","isPointInside","clientX","negative","category","abs","getZone","graphic","isNew","getValidPoints","insideOnly","allowNull","filter","isInsidePlot","inverted","getClipBox","_a","seriesBox","clipBox","plotSizeX","plotSizeY","getSharedClipKey","sharedClipKey","setClip","markerGroup","sharedClips","clipRect","animate","clip","animationClipKey","easing","join","animationClipRect","markerAnimationClipRect","plotHeight","plotWidth","hasClass","finalBox","step_1","step","element","childNodes","fx","afterAnimate","_this","container","querySelector","finishedAnimating","drawPoints","verb","pointMarkerOptions","hasPointMarker","markerAttribs","colorAxis","seriesMarkerOptions","specialGroup","globallyEnabled","isRadial","_hasPointMarkers","startXPos","reversed","hasImage","hasRendered","pointAttr","pointAttribs","css","fill","getClassName","seriesStateOptions","pointStateOptions","attribs","pos","floor","stroke","pointColorOption","pointColor","zoneColor","keepEventsForUpdate","issue134","test","navigator","userAgent","removeEvents","forceRedraw","destroyItem","clips","animationTimeout","SVGElement","survive","hoverSeries","applyZones","translatedFrom","translatedTo","clipAttr","extremes","horiz","pxRange","pxPosMin","pxPosMax","zoneArea","zoneGraph","graph","area","plotSizeMax","ignoreZones","showLine","hide","toPixels","isXAxis","isVML","chartWidth","plotLeft","spacingBox","chartHeight","resetZones","show","plotGroup","visibility","parent","attrs","g","colorIndex","getPlotBox","horAxis","vertAxis","polar","invertible","translateX","left","translateY","top","plotTop","rotation","rotationOriginX","rotationOriginY","scaleX","scaleY","unbind","render","animOptions","chartSeriesGroup","seriesGroup","animDuration","isSVG","drawGraph","drawDataLabels","redrawPoints","drawTracker","enableMouseTracking","wasDirty","kdTree","searchPoint","compareX","searchKDTree","chartY","chartX","buildKDTree","buildingKdTree","dimensions","_kdtree","depth","median","kdAxisArray","right","startRecursive","directTouch","kdNow","kdX","kdY","kdComparer","kdDimensions","_search","search","tree","nPoint1","nPoint2","ret","setDistance","p1","p2","pow","r","dist","sqrt","distX","tdist","sideA","sideB","_b","factor","trackByArea","trackerPath","areaPath","graphPath","pointer","snap","tracker","onMouseOver","TRACKER_FILL","dataLabelsGroup","on","onTrackerMouseOut","shift","withEvent","isInTheMiddle","hasNames","removePoint","firePointEvent","keepEvents","isDirtyLegend","linkSeries","n","oldOptions","initialType","initialSeriesProto","kinds","preserve","newType","keepPoints","joinBy","mapData","hasOptionChanged","casting","Object","setPrototypeOf","ownEvents","hasOwnProperty","hcEvents","missingModuleFor","dataLabel","_hasPointLabels","oldMarker","resolveColor","showInLegend","setName","optionName","option","oldOption","setHoverChartIndex","onMouseOut","mouseOver","setState","hoverPoint","mouseOut","s","inherit","inactiveOtherPoints","stateOptions","stateAnimation","removeClass","labelBySeries","setAllPointsToState","setVisible","vis","ignoreHiddenSeries","showOrHide","colorizeItem","otherSeries","checkbox","checked","shouldShowTooltip","visiblePlotOnly","SeriesDefaults","types","registerType","coll","drawLegendSymbol"],"sourceRoot":"webpack:///","sources":["./node_modules/highcharts/es-modules/Core/Legend/LegendSymbol.js","./node_modules/highcharts/es-modules/Core/Series/SeriesDefaults.js","./node_modules/highcharts/es-modules/Core/Series/Series.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport U from '../Utilities.js';\nvar extend = U.extend, merge = U.merge, pick = U.pick;\n/* *\n *\n *  Namespace\n *\n * */\nvar LegendSymbol;\n(function (LegendSymbol) {\n    /* *\n    *\n    *  Functions\n    *\n    * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Get the series' symbol in the legend.\n     *\n     * This method should be overridable to create custom symbols through\n     * Highcharts.seriesTypes[type].prototype.drawLegendSymbol.\n     *\n     * @private\n     * @function Highcharts.LegendSymbolMixin.drawLineMarker\n     *\n     * @param {Highcharts.Legend} legend\n     * The legend object.\n     */\n    function drawLineMarker(legend) {\n        var legendItem = this.legendItem = this.legendItem || {}, options = this.options, symbolWidth = legend.symbolWidth, symbolHeight = legend.symbolHeight, generalRadius = symbolHeight / 2, renderer = this.chart.renderer, legendItemGroup = legendItem.group, verticalCenter = legend.baseline -\n            Math.round(legend.fontMetrics.b * 0.3);\n        var attr = {}, legendSymbol, markerOptions = options.marker, lineSizer = 0;\n        // Draw the line\n        if (!this.chart.styledMode) {\n            attr = {\n                'stroke-width': Math.min(options.lineWidth || 0, 24)\n            };\n            if (options.dashStyle) {\n                attr.dashstyle = options.dashStyle;\n            }\n            else if (options.linecap !== 'square') {\n                attr['stroke-linecap'] = 'round';\n            }\n        }\n        legendItem.line = renderer\n            .path()\n            .addClass('highcharts-graph')\n            .attr(attr)\n            .add(legendItemGroup);\n        if (attr['stroke-linecap']) {\n            lineSizer = Math.min(legendItem.line.strokeWidth(), symbolWidth) / 2;\n        }\n        legendItem.line\n            .attr({\n            d: [\n                ['M', lineSizer, verticalCenter],\n                ['L', symbolWidth - lineSizer, verticalCenter]\n            ]\n        });\n        // Draw the marker\n        if (markerOptions && markerOptions.enabled !== false && symbolWidth) {\n            // Do not allow the marker to be larger than the symbolHeight\n            var radius = Math.min(pick(markerOptions.radius, generalRadius), generalRadius);\n            // Restrict symbol markers size\n            if (this.symbol.indexOf('url') === 0) {\n                markerOptions = merge(markerOptions, {\n                    width: symbolHeight,\n                    height: symbolHeight\n                });\n                radius = 0;\n            }\n            legendItem.symbol = legendSymbol = renderer\n                .symbol(this.symbol, (symbolWidth / 2) - radius, verticalCenter - radius, 2 * radius, 2 * radius, extend({ context: 'legend' }, markerOptions))\n                .addClass('highcharts-point')\n                .add(legendItemGroup);\n            legendSymbol.isMarker = true;\n        }\n    }\n    LegendSymbol.drawLineMarker = drawLineMarker;\n    /**\n     * Get the series' symbol in the legend.\n     *\n     * This method should be overridable to create custom symbols through\n     * Highcharts.seriesTypes[type].prototype.drawLegendSymbol.\n     *\n     * @private\n     * @function Highcharts.LegendSymbolMixin.drawRectangle\n     *\n     * @param {Highcharts.Legend} legend\n     * The legend object\n     *\n     * @param {Highcharts.Point|Highcharts.Series} item\n     * The series (this) or point\n     */\n    function drawRectangle(legend, item) {\n        var legendItem = item.legendItem || {}, options = legend.options, symbolHeight = legend.symbolHeight, square = options.squareSymbol, symbolWidth = square ? symbolHeight : legend.symbolWidth;\n        legendItem.symbol = this.chart.renderer\n            .rect(square ? (legend.symbolWidth - symbolHeight) / 2 : 0, legend.baseline - symbolHeight + 1, // #3988\n        symbolWidth, symbolHeight, pick(legend.options.symbolRadius, symbolHeight / 2))\n            .addClass('highcharts-point')\n            .attr({\n            zIndex: 3\n        })\n            .add(legendItem.group);\n    }\n    LegendSymbol.drawRectangle = drawRectangle;\n})(LegendSymbol || (LegendSymbol = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default LegendSymbol;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n/* *\n *\n *  API Options\n *\n * */\n/**\n * General options for all series types.\n *\n * @optionparent plotOptions.series\n */\nvar seriesDefaults = {\n    // base series options\n    /**\n     * The SVG value used for the `stroke-linecap` and `stroke-linejoin`\n     * of a line graph. Round means that lines are rounded in the ends and\n     * bends.\n     *\n     * @type       {Highcharts.SeriesLinecapValue}\n     * @default    round\n     * @since      3.0.7\n     * @apioption  plotOptions.line.linecap\n     */\n    /**\n     * Pixel width of the graph line.\n     *\n     * @see In styled mode, the line stroke-width can be set with the\n     *      `.highcharts-graph` class name.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-linewidth-general/\n     *         On all series\n     * @sample {highcharts} highcharts/plotoptions/series-linewidth-specific/\n     *         On one single series\n     *\n     * @product highcharts highstock\n     *\n     * @private\n     */\n    lineWidth: 2,\n    /**\n     * For some series, there is a limit that shuts down animation\n     * by default when the total number of points in the chart is too high.\n     * For example, for a column chart and its derivatives, animation does\n     * not run if there is more than 250 points totally. To disable this\n     * cap, set `animationLimit` to `Infinity`. This option works if animation\n     * is fired on individual points, not on a group of points like e.g. during\n     * the initial animation.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-animationlimit/\n     *         Animation limit on updating individual points\n     *\n     * @type      {number}\n     * @apioption plotOptions.series.animationLimit\n     */\n    /**\n     * Allow this series' points to be selected by clicking on the graphic\n     * (columns, point markers, pie slices, map areas etc).\n     *\n     * The selected points can be handled by point select and unselect\n     * events, or collectively by the [getSelectedPoints\n     * ](/class-reference/Highcharts.Chart#getSelectedPoints) function.\n     *\n     * And alternative way of selecting points is through dragging.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-allowpointselect-line/\n     *         Line\n     * @sample {highcharts} highcharts/plotoptions/series-allowpointselect-column/\n     *         Column\n     * @sample {highcharts} highcharts/plotoptions/series-allowpointselect-pie/\n     *         Pie\n     * @sample {highcharts} highcharts/chart/events-selection-points/\n     *         Select a range of points through a drag selection\n     * @sample {highmaps} maps/plotoptions/series-allowpointselect/\n     *         Map area\n     * @sample {highmaps} maps/plotoptions/mapbubble-allowpointselect/\n     *         Map bubble\n     *\n     * @since 1.2.0\n     *\n     * @private\n     */\n    allowPointSelect: false,\n    /**\n     * When true, each point or column edge is rounded to its nearest pixel\n     * in order to render sharp on screen. In some cases, when there are a\n     * lot of densely packed columns, this leads to visible difference\n     * in column widths or distance between columns. In these cases,\n     * setting `crisp` to `false` may look better, even though each column\n     * is rendered blurry.\n     *\n     * @sample {highcharts} highcharts/plotoptions/column-crisp-false/\n     *         Crisp is false\n     *\n     * @since   5.0.10\n     * @product highcharts highstock gantt\n     *\n     * @private\n     */\n    crisp: true,\n    /**\n     * If true, a checkbox is displayed next to the legend item to allow\n     * selecting the series. The state of the checkbox is determined by\n     * the `selected` option.\n     *\n     * @productdesc {highmaps}\n     * Note that if a `colorAxis` is defined, the color axis is represented\n     * in the legend, not the series.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-showcheckbox-true/\n     *         Show select box\n     *\n     * @since 1.2.0\n     *\n     * @private\n     */\n    showCheckbox: false,\n    /**\n     * Enable or disable the initial animation when a series is displayed.\n     * The animation can also be set as a configuration object. Please\n     * note that this option only applies to the initial animation of the\n     * series itself. For other animations, see [chart.animation](\n     * #chart.animation) and the animation parameter under the API methods.\n     * The following properties are supported:\n     *\n     * - `defer`: The animation delay time in milliseconds.\n     *\n     * - `duration`: The duration of the animation in milliseconds. (Defaults to\n     *   `1000`)\n     *\n     * - `easing`: Can be a string reference to an easing function set on\n     *   the `Math` object or a function. See the _Custom easing function_\n     *   demo below. (Defaults to `easeInOutSine`)\n     *\n     * Due to poor performance, animation is disabled in old IE browsers\n     * for several chart types.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-animation-disabled/\n     *         Animation disabled\n     * @sample {highcharts} highcharts/plotoptions/series-animation-slower/\n     *         Slower animation\n     * @sample {highcharts} highcharts/plotoptions/series-animation-easing/\n     *         Custom easing function\n     * @sample {highstock} stock/plotoptions/animation-slower/\n     *         Slower animation\n     * @sample {highstock} stock/plotoptions/animation-easing/\n     *         Custom easing function\n     * @sample {highmaps} maps/plotoptions/series-animation-true/\n     *         Animation enabled on map series\n     * @sample {highmaps} maps/plotoptions/mapbubble-animation-false/\n     *         Disabled on mapbubble series\n     *\n     * @type    {boolean|Highcharts.AnimationOptionsObject}\n     * @default {highcharts} true\n     * @default {highstock} true\n     * @default {highmaps} false\n     *\n     * @private\n     */\n    animation: {\n        /** @ignore-option */\n        duration: 1000\n    },\n    /**\n     * An additional class name to apply to the series' graphical elements.\n     * This option does not replace default class names of the graphical\n     * element. Changes to the series' color will also be reflected in a\n     * chart's legend and tooltip.\n     *\n     * @sample {highcharts} highcharts/css/point-series-classname\n     *\n     * @type      {string}\n     * @since     5.0.0\n     * @apioption plotOptions.series.className\n     */\n    /**\n     * Disable this option to allow series rendering in the whole plotting\n     * area.\n     *\n     * **Note:** Clipping should be always enabled when\n     * [chart.zoomType](#chart.zoomType) is set\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-clip/\n     *         Disabled clipping\n     *\n     * @default   true\n     * @type      {boolean}\n     * @since     3.0.0\n     * @apioption plotOptions.series.clip\n     */\n    /**\n     * The main color of the series. In line type series it applies to the\n     * line and the point markers unless otherwise specified. In bar type\n     * series it applies to the bars unless a color is specified per point.\n     * The default value is pulled from the `options.colors` array.\n     *\n     * In styled mode, the color can be defined by the\n     * [colorIndex](#plotOptions.series.colorIndex) option. Also, the series\n     * color can be set with the `.highcharts-series`,\n     * `.highcharts-color-{n}`, `.highcharts-{type}-series` or\n     * `.highcharts-series-{n}` class, or individual classes given by the\n     * `className` option.\n     *\n     * @productdesc {highmaps}\n     * In maps, the series color is rarely used, as most choropleth maps use\n     * the color to denote the value of each point. The series color can\n     * however be used in a map with multiple series holding categorized\n     * data.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-color-general/\n     *         General plot option\n     * @sample {highcharts} highcharts/plotoptions/series-color-specific/\n     *         One specific series\n     * @sample {highcharts} highcharts/plotoptions/series-color-area/\n     *         Area color\n     * @sample {highcharts} highcharts/series/infographic/\n     *         Pattern fill\n     * @sample {highmaps} maps/demo/category-map/\n     *         Category map by multiple series\n     *\n     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     * @apioption plotOptions.series.color\n     */\n    /**\n     * Styled mode only. A specific color index to use for the series, so its\n     * graphic representations are given the class name `highcharts-color-{n}`.\n     *\n     * @sample    {highcharts} highcharts/css/colorindex/\n     *            Series and point color index\n     *\n     * @type      {number}\n     * @since     5.0.0\n     * @apioption plotOptions.series.colorIndex\n     */\n    /**\n     * Whether to connect a graph line across null points, or render a gap\n     * between the two points on either side of the null.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-connectnulls-false/\n     *         False by default\n     * @sample {highcharts} highcharts/plotoptions/series-connectnulls-true/\n     *         True\n     *\n     * @type      {boolean}\n     * @default   false\n     * @product   highcharts highstock\n     * @apioption plotOptions.series.connectNulls\n     */\n    /**\n     * You can set the cursor to \"pointer\" if you have click events attached\n     * to the series, to signal to the user that the points and lines can\n     * be clicked.\n     *\n     * In styled mode, the series cursor can be set with the same classes\n     * as listed under [series.color](#plotOptions.series.color).\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-cursor-line/\n     *         On line graph\n     * @sample {highcharts} highcharts/plotoptions/series-cursor-column/\n     *         On columns\n     * @sample {highcharts} highcharts/plotoptions/series-cursor-scatter/\n     *         On scatter markers\n     * @sample {highstock} stock/plotoptions/cursor/\n     *         Pointer on a line graph\n     * @sample {highmaps} maps/plotoptions/series-allowpointselect/\n     *         Map area\n     * @sample {highmaps} maps/plotoptions/mapbubble-allowpointselect/\n     *         Map bubble\n     *\n     * @type      {string|Highcharts.CursorValue}\n     * @apioption plotOptions.series.cursor\n     */\n    /**\n     * A reserved subspace to store options and values for customized\n     * functionality. Here you can add additional data for your own event\n     * callbacks and formatter callbacks.\n     *\n     * @sample {highcharts} highcharts/point/custom/\n     *         Point and series with custom data\n     *\n     * @type      {Highcharts.Dictionary<*>}\n     * @apioption plotOptions.series.custom\n     */\n    /**\n     * Name of the dash style to use for the graph, or for some series types\n     * the outline of each shape.\n     *\n     * In styled mode, the\n     * [stroke dash-array](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/series-dashstyle/)\n     * can be set with the same classes as listed under\n     * [series.color](#plotOptions.series.color).\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-dashstyle-all/\n     *         Possible values demonstrated\n     * @sample {highcharts} highcharts/plotoptions/series-dashstyle/\n     *         Chart suitable for printing in black and white\n     * @sample {highstock} highcharts/plotoptions/series-dashstyle-all/\n     *         Possible values demonstrated\n     * @sample {highmaps} highcharts/plotoptions/series-dashstyle-all/\n     *         Possible values demonstrated\n     * @sample {highmaps} maps/plotoptions/series-dashstyle/\n     *         Dotted borders on a map\n     *\n     * @type      {Highcharts.DashStyleValue}\n     * @default   Solid\n     * @since     2.1\n     * @apioption plotOptions.series.dashStyle\n     */\n    /**\n     * A description of the series to add to the screen reader information\n     * about the series.\n     *\n     * @type      {string}\n     * @since     5.0.0\n     * @requires  modules/accessibility\n     * @apioption plotOptions.series.description\n     */\n    /**\n     * Options for the series data sorting.\n     *\n     * @type      {Highcharts.DataSortingOptionsObject}\n     * @since     8.0.0\n     * @product   highcharts highstock\n     * @apioption plotOptions.series.dataSorting\n     */\n    /**\n     * Enable or disable data sorting for the series. Use [xAxis.reversed](\n     * #xAxis.reversed) to change the sorting order.\n     *\n     * @sample {highcharts} highcharts/datasorting/animation/\n     *         Data sorting in scatter-3d\n     * @sample {highcharts} highcharts/datasorting/labels-animation/\n     *         Axis labels animation\n     * @sample {highcharts} highcharts/datasorting/dependent-sorting/\n     *         Dependent series sorting\n     * @sample {highcharts} highcharts/datasorting/independent-sorting/\n     *         Independent series sorting\n     *\n     * @type      {boolean}\n     * @since     8.0.0\n     * @apioption plotOptions.series.dataSorting.enabled\n     */\n    /**\n     * Whether to allow matching points by name in an update. If this option\n     * is disabled, points will be matched by order.\n     *\n     * @sample {highcharts} highcharts/datasorting/match-by-name/\n     *         Enabled match by name\n     *\n     * @type      {boolean}\n     * @since     8.0.0\n     * @apioption plotOptions.series.dataSorting.matchByName\n     */\n    /**\n     * Determines what data value should be used to sort by.\n     *\n     * @sample {highcharts} highcharts/datasorting/sort-key/\n     *         Sort key as `z` value\n     *\n     * @type      {string}\n     * @since     8.0.0\n     * @default   y\n     * @apioption plotOptions.series.dataSorting.sortKey\n     */\n    /**\n     * Enable or disable the mouse tracking for a specific series. This\n     * includes point tooltips and click events on graphs and points. For\n     * large datasets it improves performance.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-enablemousetracking-false/\n     *         No mouse tracking\n     * @sample {highmaps} maps/plotoptions/series-enablemousetracking-false/\n     *         No mouse tracking\n     *\n     * @type      {boolean}\n     * @default   true\n     * @apioption plotOptions.series.enableMouseTracking\n     */\n    /**\n     * Whether to use the Y extremes of the total chart width or only the\n     * zoomed area when zooming in on parts of the X axis. By default, the\n     * Y axis adjusts to the min and max of the visible data. Cartesian\n     * series only.\n     *\n     * @type      {boolean}\n     * @default   false\n     * @since     4.1.6\n     * @product   highcharts highstock gantt\n     * @apioption plotOptions.series.getExtremesFromAll\n     */\n    /**\n     * An array specifying which option maps to which key in the data point\n     * array. This makes it convenient to work with unstructured data arrays\n     * from different sources.\n     *\n     * @see [series.data](#series.line.data)\n     *\n     * @sample {highcharts|highstock} highcharts/series/data-keys/\n     *         An extended data array with keys\n     * @sample {highcharts|highstock} highcharts/series/data-nested-keys/\n     *         Nested keys used to access object properties\n     *\n     * @type      {Array<string>}\n     * @since     4.1.6\n     * @apioption plotOptions.series.keys\n     */\n    /**\n     * The line cap used for line ends and line joins on the graph.\n     *\n     * @sample highcharts/series-line/linecap/\n     *         Line cap comparison\n     *\n     * @type       {Highcharts.SeriesLinecapValue}\n     * @default    round\n     * @product    highcharts highstock\n     * @apioption  plotOptions.series.linecap\n     */\n    /**\n     * The [id](#series.id) of another series to link to. Additionally,\n     * the value can be \":previous\" to link to the previous series. When\n     * two series are linked, only the first one appears in the legend.\n     * Toggling the visibility of this also toggles the linked series.\n     *\n     * If master series uses data sorting and linked series does not have\n     * its own sorting definition, the linked series will be sorted in the\n     * same order as the master one.\n     *\n     * @sample {highcharts|highstock} highcharts/demo/arearange-line/\n     *         Linked series\n     *\n     * @type      {string}\n     * @since     3.0\n     * @product   highcharts highstock gantt\n     * @apioption plotOptions.series.linkedTo\n     */\n    /**\n     * Options for the corresponding navigator series if `showInNavigator`\n     * is `true` for this series. Available options are the same as any\n     * series, documented at [plotOptions](#plotOptions.series) and\n     * [series](#series).\n     *\n     * These options are merged with options in [navigator.series](\n     * #navigator.series), and will take precedence if the same option is\n     * defined both places.\n     *\n     * @see [navigator.series](#navigator.series)\n     *\n     * @type      {Highcharts.PlotSeriesOptions}\n     * @since     5.0.0\n     * @product   highstock\n     * @apioption plotOptions.series.navigatorOptions\n     */\n    /**\n     * The color for the parts of the graph or points that are below the\n     * [threshold](#plotOptions.series.threshold). Note that `zones` takes\n     * precedence over the negative color. Using `negativeColor` is\n     * equivalent to applying a zone with value of 0.\n     *\n     * @see In styled mode, a negative color is applied by setting this option\n     *      to `true` combined with the `.highcharts-negative` class name.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-negative-color/\n     *         Spline, area and column\n     * @sample {highcharts} highcharts/plotoptions/arearange-negativecolor/\n     *         Arearange\n     * @sample {highcharts} highcharts/css/series-negative-color/\n     *         Styled mode\n     * @sample {highstock} highcharts/plotoptions/series-negative-color/\n     *         Spline, area and column\n     * @sample {highstock} highcharts/plotoptions/arearange-negativecolor/\n     *         Arearange\n     * @sample {highmaps} highcharts/plotoptions/series-negative-color/\n     *         Spline, area and column\n     * @sample {highmaps} highcharts/plotoptions/arearange-negativecolor/\n     *         Arearange\n     *\n     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     * @since     3.0\n     * @apioption plotOptions.series.negativeColor\n     */\n    /**\n     * Same as\n     * [accessibility.series.descriptionFormatter](#accessibility.series.descriptionFormatter),\n     * but for an individual series. Overrides the chart wide configuration.\n     *\n     * @type      {Function}\n     * @since     5.0.12\n     * @apioption plotOptions.series.pointDescriptionFormatter\n     */\n    /**\n     * If no x values are given for the points in a series, `pointInterval`\n     * defines the interval of the x values. For example, if a series\n     * contains one value every decade starting from year 0, set\n     * `pointInterval` to `10`. In true `datetime` axes, the `pointInterval`\n     * is set in milliseconds.\n     *\n     * It can be also be combined with `pointIntervalUnit` to draw irregular\n     * time intervals.\n     *\n     * If combined with `relativeXValue`, an x value can be set on each\n     * point, and the `pointInterval` is added x times to the `pointStart`\n     * setting.\n     *\n     * Please note that this options applies to the _series data_, not the\n     * interval of the axis ticks, which is independent.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-pointstart-datetime/\n     *         Datetime X axis\n     * @sample {highcharts} highcharts/plotoptions/series-relativexvalue/\n     *         Relative x value\n     * @sample {highstock} stock/plotoptions/pointinterval-pointstart/\n     *         Using pointStart and pointInterval\n     * @sample {highstock} stock/plotoptions/relativexvalue/\n     *         Relative x value\n     *\n     * @type      {number}\n     * @default   1\n     * @product   highcharts highstock gantt\n     * @apioption plotOptions.series.pointInterval\n     */\n    /**\n     * On datetime series, this allows for setting the\n     * [pointInterval](#plotOptions.series.pointInterval) to irregular time\n     * units, `day`, `month` and `year`. A day is usually the same as 24\n     * hours, but `pointIntervalUnit` also takes the DST crossover into\n     * consideration when dealing with local time. Combine this option with\n     * `pointInterval` to draw weeks, quarters, 6 months, 10 years etc.\n     *\n     * Please note that this options applies to the _series data_, not the\n     * interval of the axis ticks, which is independent.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-pointintervalunit/\n     *         One point a month\n     * @sample {highstock} highcharts/plotoptions/series-pointintervalunit/\n     *         One point a month\n     *\n     * @type       {string}\n     * @since      4.1.0\n     * @product    highcharts highstock gantt\n     * @validvalue [\"day\", \"month\", \"year\"]\n     * @apioption  plotOptions.series.pointIntervalUnit\n     */\n    /**\n     * Possible values: `\"on\"`, `\"between\"`, `number`.\n     *\n     * In a column chart, when pointPlacement is `\"on\"`, the point will not\n     * create any padding of the X axis. In a polar column chart this means\n     * that the first column points directly north. If the pointPlacement is\n     * `\"between\"`, the columns will be laid out between ticks. This is\n     * useful for example for visualising an amount between two points in\n     * time or in a certain sector of a polar chart.\n     *\n     * Since Highcharts 3.0.2, the point placement can also be numeric,\n     * where 0 is on the axis value, -0.5 is between this value and the\n     * previous, and 0.5 is between this value and the next. Unlike the\n     * textual options, numeric point placement options won't affect axis\n     * padding.\n     *\n     * Note that pointPlacement needs a [pointRange](\n     * #plotOptions.series.pointRange) to work. For column series this is\n     * computed, but for line-type series it needs to be set.\n     *\n     * For the `xrange` series type and gantt charts, if the Y axis is a\n     * category axis, the `pointPlacement` applies to the Y axis rather than\n     * the (typically datetime) X axis.\n     *\n     * Defaults to `undefined` in cartesian charts, `\"between\"` in polar\n     * charts.\n     *\n     * @see [xAxis.tickmarkPlacement](#xAxis.tickmarkPlacement)\n     *\n     * @sample {highcharts|highstock} highcharts/plotoptions/series-pointplacement-between/\n     *         Between in a column chart\n     * @sample {highcharts|highstock} highcharts/plotoptions/series-pointplacement-numeric/\n     *         Numeric placement for custom layout\n     * @sample {highcharts|highstock} maps/plotoptions/heatmap-pointplacement/\n     *         Placement in heatmap\n     *\n     * @type      {string|number}\n     * @since     2.3.0\n     * @product   highcharts highstock gantt\n     * @apioption plotOptions.series.pointPlacement\n     */\n    /**\n     * If no x values are given for the points in a series, pointStart\n     * defines on what value to start. For example, if a series contains one\n     * yearly value starting from 1945, set pointStart to 1945.\n     *\n     * If combined with `relativeXValue`, an x value can be set on each\n     * point. The x value from the point options is multiplied by\n     * `pointInterval` and added to `pointStart` to produce a modified x\n     * value.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-pointstart-linear/\n     *         Linear\n     * @sample {highcharts} highcharts/plotoptions/series-pointstart-datetime/\n     *         Datetime\n     * @sample {highcharts} highcharts/plotoptions/series-relativexvalue/\n     *         Relative x value\n     * @sample {highstock} stock/plotoptions/pointinterval-pointstart/\n     *         Using pointStart and pointInterval\n     * @sample {highstock} stock/plotoptions/relativexvalue/\n     *         Relative x value\n     *\n     * @type      {number}\n     * @default   0\n     * @product   highcharts highstock gantt\n     * @apioption plotOptions.series.pointStart\n     */\n    /**\n     * When true, X values in the data set are relative to the current\n     * `pointStart`, `pointInterval` and `pointIntervalUnit` settings. This\n     * allows compression of the data for datasets with irregular X values.\n     *\n     * The real X values are computed on the formula `f(x) = ax + b`, where\n     * `a` is the `pointInterval` (optionally with a time unit given by\n     * `pointIntervalUnit`), and `b` is the `pointStart`.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-relativexvalue/\n     *         Relative X value\n     * @sample {highstock} stock/plotoptions/relativexvalue/\n     *         Relative X value\n     *\n     * @type      {boolean}\n     * @default   false\n     * @product   highcharts highstock\n     * @apioption plotOptions.series.relativeXValue\n     */\n    /**\n     * Whether to select the series initially. If `showCheckbox` is true,\n     * the checkbox next to the series name in the legend will be checked\n     * for a selected series.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-selected/\n     *         One out of two series selected\n     *\n     * @type      {boolean}\n     * @default   false\n     * @since     1.2.0\n     * @apioption plotOptions.series.selected\n     */\n    /**\n     * Whether to apply a drop shadow to the graph line. Since 2.3 the\n     * shadow can be an object configuration containing `color`, `offsetX`,\n     * `offsetY`, `opacity` and `width`.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-shadow/\n     *         Shadow enabled\n     *\n     * @type      {boolean|Highcharts.ShadowOptionsObject}\n     * @default   false\n     * @apioption plotOptions.series.shadow\n     */\n    /**\n     * Whether to display this particular series or series type in the\n     * legend. Standalone series are shown in legend by default, and linked\n     * series are not. Since v7.2.0 it is possible to show series that use\n     * colorAxis by setting this option to `true`.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-showinlegend/\n     *         One series in the legend, one hidden\n     *\n     * @type      {boolean}\n     * @apioption plotOptions.series.showInLegend\n     */\n    /**\n     * Whether or not to show the series in the navigator. Takes precedence\n     * over [navigator.baseSeries](#navigator.baseSeries) if defined.\n     *\n     * @type      {boolean}\n     * @since     5.0.0\n     * @product   highstock\n     * @apioption plotOptions.series.showInNavigator\n     */\n    /**\n     * If set to `true`, the accessibility module will skip past the points\n     * in this series for keyboard navigation.\n     *\n     * @type      {boolean}\n     * @since     5.0.12\n     * @apioption plotOptions.series.skipKeyboardNavigation\n     */\n    /**\n     * Whether to stack the values of each series on top of each other.\n     * Possible values are `undefined` to disable, `\"normal\"` to stack by\n     * value or `\"percent\"`.\n     *\n     * When stacking is enabled, data must be sorted\n     * in ascending X order.\n     *\n     * Some stacking options are related to specific series types. In the\n     * streamgraph series type, the stacking option is set to `\"stream\"`.\n     * The second one is `\"overlap\"`, which only applies to waterfall\n     * series.\n     *\n     * @see [yAxis.reversedStacks](#yAxis.reversedStacks)\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-stacking-line/\n     *         Line\n     * @sample {highcharts} highcharts/plotoptions/series-stacking-column/\n     *         Column\n     * @sample {highcharts} highcharts/plotoptions/series-stacking-bar/\n     *         Bar\n     * @sample {highcharts} highcharts/plotoptions/series-stacking-area/\n     *         Area\n     * @sample {highcharts} highcharts/plotoptions/series-stacking-percent-line/\n     *         Line\n     * @sample {highcharts} highcharts/plotoptions/series-stacking-percent-column/\n     *         Column\n     * @sample {highcharts} highcharts/plotoptions/series-stacking-percent-bar/\n     *         Bar\n     * @sample {highcharts} highcharts/plotoptions/series-stacking-percent-area/\n     *         Area\n     * @sample {highcharts} highcharts/plotoptions/series-waterfall-with-normal-stacking\n     *         Waterfall with normal stacking\n     * @sample {highcharts} highcharts/plotoptions/series-waterfall-with-overlap-stacking\n     *         Waterfall with overlap stacking\n     * @sample {highstock} stock/plotoptions/stacking/\n     *         Area\n     *\n     * @type       {string}\n     * @product    highcharts highstock\n     * @validvalue [\"normal\", \"overlap\", \"percent\", \"stream\"]\n     * @apioption  plotOptions.series.stacking\n     */\n    /**\n     * Whether to apply steps to the line. Possible values are `left`,\n     * `center` and `right`.\n     *\n     * @sample {highcharts} highcharts/plotoptions/line-step/\n     *         Different step line options\n     * @sample {highcharts} highcharts/plotoptions/area-step/\n     *         Stepped, stacked area\n     * @sample {highstock} stock/plotoptions/line-step/\n     *         Step line\n     *\n     * @type       {string}\n     * @since      1.2.5\n     * @product    highcharts highstock\n     * @validvalue [\"left\", \"center\", \"right\"]\n     * @apioption  plotOptions.series.step\n     */\n    /**\n     * The threshold, also called zero level or base level. For line type\n     * series this is only used in conjunction with\n     * [negativeColor](#plotOptions.series.negativeColor).\n     *\n     * @see [softThreshold](#plotOptions.series.softThreshold).\n     *\n     * @type      {number|null}\n     * @default   0\n     * @since     3.0\n     * @product   highcharts highstock\n     * @apioption plotOptions.series.threshold\n     */\n    /**\n     * Set the initial visibility of the series.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-visible/\n     *         Two series, one hidden and one visible\n     * @sample {highstock} stock/plotoptions/series-visibility/\n     *         Hidden series\n     *\n     * @type      {boolean}\n     * @default   true\n     * @apioption plotOptions.series.visible\n     */\n    /**\n     * Defines the Axis on which the zones are applied.\n     *\n     * @see [zones](#plotOptions.series.zones)\n     *\n     * @sample {highcharts} highcharts/series/color-zones-zoneaxis-x/\n     *         Zones on the X-Axis\n     * @sample {highstock} highcharts/series/color-zones-zoneaxis-x/\n     *         Zones on the X-Axis\n     *\n     * @type      {string}\n     * @default   y\n     * @since     4.1.0\n     * @product   highcharts highstock\n     * @apioption plotOptions.series.zoneAxis\n     */\n    /**\n     * General event handlers for the series items. These event hooks can\n     * also be attached to the series at run time using the\n     * `Highcharts.addEvent` function.\n     *\n     * @declare Highcharts.SeriesEventsOptionsObject\n     *\n     * @private\n     */\n    events: {},\n    /**\n     * Fires after the series has finished its initial animation, or in case\n     * animation is disabled, immediately as the series is displayed.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-events-afteranimate/\n     *         Show label after animate\n     * @sample {highstock} highcharts/plotoptions/series-events-afteranimate/\n     *         Show label after animate\n     *\n     * @type      {Highcharts.SeriesAfterAnimateCallbackFunction}\n     * @since     4.0\n     * @product   highcharts highstock gantt\n     * @context   Highcharts.Series\n     * @apioption plotOptions.series.events.afterAnimate\n     */\n    /**\n     * Fires when the checkbox next to the series' name in the legend is\n     * clicked. One parameter, `event`, is passed to the function. The state\n     * of the checkbox is found by `event.checked`. The checked item is\n     * found by `event.item`. Return `false` to prevent the default action\n     * which is to toggle the select state of the series.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-events-checkboxclick/\n     *         Alert checkbox status\n     *\n     * @type      {Highcharts.SeriesCheckboxClickCallbackFunction}\n     * @since     1.2.0\n     * @context   Highcharts.Series\n     * @apioption plotOptions.series.events.checkboxClick\n     */\n    /**\n     * Fires when the series is clicked. One parameter, `event`, is passed\n     * to the function, containing common event information. Additionally,\n     * `event.point` holds a pointer to the nearest point on the graph.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-events-click/\n     *         Alert click info\n     * @sample {highstock} stock/plotoptions/series-events-click/\n     *         Alert click info\n     * @sample {highmaps} maps/plotoptions/series-events-click/\n     *         Display click info in subtitle\n     *\n     * @type      {Highcharts.SeriesClickCallbackFunction}\n     * @context   Highcharts.Series\n     * @apioption plotOptions.series.events.click\n     */\n    /**\n     * Fires when the series is hidden after chart generation time, either\n     * by clicking the legend item or by calling `.hide()`.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-events-hide/\n     *         Alert when the series is hidden by clicking the legend item\n     *\n     * @type      {Highcharts.SeriesHideCallbackFunction}\n     * @since     1.2.0\n     * @context   Highcharts.Series\n     * @apioption plotOptions.series.events.hide\n     */\n    /**\n     * Fires when the legend item belonging to the series is clicked. One\n     * parameter, `event`, is passed to the function. The default action\n     * is to toggle the visibility of the series. This can be prevented\n     * by returning `false` or calling `event.preventDefault()`.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-events-legenditemclick/\n     *         Confirm hiding and showing\n     *\n     * @type      {Highcharts.SeriesLegendItemClickCallbackFunction}\n     * @context   Highcharts.Series\n     * @apioption plotOptions.series.events.legendItemClick\n     */\n    /**\n     * Fires when the mouse leaves the graph. One parameter, `event`, is\n     * passed to the function, containing common event information. If the\n     * [stickyTracking](#plotOptions.series) option is true, `mouseOut`\n     * doesn't happen before the mouse enters another graph or leaves the\n     * plot area.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-events-mouseover-sticky/\n     *         With sticky tracking by default\n     * @sample {highcharts} highcharts/plotoptions/series-events-mouseover-no-sticky/\n     *         Without sticky tracking\n     *\n     * @type      {Highcharts.SeriesMouseOutCallbackFunction}\n     * @context   Highcharts.Series\n     * @apioption plotOptions.series.events.mouseOut\n     */\n    /**\n     * Fires when the mouse enters the graph. One parameter, `event`, is\n     * passed to the function, containing common event information.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-events-mouseover-sticky/\n     *         With sticky tracking by default\n     * @sample {highcharts} highcharts/plotoptions/series-events-mouseover-no-sticky/\n     *         Without sticky tracking\n     *\n     * @type      {Highcharts.SeriesMouseOverCallbackFunction}\n     * @context   Highcharts.Series\n     * @apioption plotOptions.series.events.mouseOver\n     */\n    /**\n     * Fires when the series is shown after chart generation time, either\n     * by clicking the legend item or by calling `.show()`.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-events-show/\n     *         Alert when the series is shown by clicking the legend item.\n     *\n     * @type      {Highcharts.SeriesShowCallbackFunction}\n     * @since     1.2.0\n     * @context   Highcharts.Series\n     * @apioption plotOptions.series.events.show\n     */\n    /**\n     * Options for the point markers of line and scatter-like series. Properties\n     * like `fillColor`, `lineColor` and `lineWidth` define the visual\n     * appearance of the markers. The `symbol` option defines the shape. Other\n     * series types, like column series, don't have markers, but have visual\n     * options on the series level instead.\n     *\n     * In styled mode, the markers can be styled with the `.highcharts-point`,\n     * `.highcharts-point-hover` and `.highcharts-point-select` class names.\n     *\n     * @declare Highcharts.PointMarkerOptionsObject\n     *\n     * @sample {highmaps} maps/demo/mappoint-mapmarker\n     *         Using the mapmarker symbol for points\n     *\n     * @private\n     */\n    marker: {\n        /**\n         * Enable or disable the point marker. If `undefined`, the markers\n         * are hidden when the data is dense, and shown for more widespread\n         * data points.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-marker-enabled/\n         *         Disabled markers\n         * @sample {highcharts} highcharts/plotoptions/series-marker-enabled-false/\n         *         Disabled in normal state but enabled on hover\n         * @sample {highstock} stock/plotoptions/series-marker/\n         *         Enabled markers\n         *\n         * @type      {boolean}\n         * @default   {highcharts} undefined\n         * @default   {highstock} false\n         * @apioption plotOptions.series.marker.enabled\n         */\n        /**\n         * The threshold for how dense the point markers should be before\n         * they are hidden, given that `enabled` is not defined. The number\n         * indicates the horizontal distance between the two closest points\n         * in the series, as multiples of the `marker.radius`. In other\n         * words, the default value of 2 means points are hidden if\n         * overlapping horizontally.\n         *\n         * @sample highcharts/plotoptions/series-marker-enabledthreshold\n         *         A higher threshold\n         *\n         * @since 6.0.5\n         */\n        enabledThreshold: 2,\n        /**\n         * The fill color of the point marker. When `undefined`, the series'\n         * or point's color is used.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-marker-fillcolor/\n         *         White fill\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @apioption plotOptions.series.marker.fillColor\n         */\n        /**\n         * Image markers only. Set the image width explicitly. When using\n         * this option, a `width` must also be set.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-marker-width-height/\n         *         Fixed width and height\n         * @sample {highstock} highcharts/plotoptions/series-marker-width-height/\n         *         Fixed width and height\n         *\n         * @type      {number}\n         * @since     4.0.4\n         * @apioption plotOptions.series.marker.height\n         */\n        /**\n         * The color of the point marker's outline. When `undefined`, the\n         * series' or point's color is used.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-marker-fillcolor/\n         *         Inherit from series color (undefined)\n         *\n         * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         */\n        lineColor: \"#ffffff\" /* Palette.backgroundColor */,\n        /**\n         * The width of the point marker's outline.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-marker-fillcolor/\n         *         2px blue marker\n         */\n        lineWidth: 0,\n        /**\n         * The radius of the point marker.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-marker-radius/\n         *         Bigger markers\n         *\n         * @default {highstock} 2\n         * @default {highcharts} 4\n         *\n         */\n        radius: 4,\n        /**\n         * A predefined shape or symbol for the marker. When undefined, the\n         * symbol is pulled from options.symbols. Other possible values are\n         * `'circle'`, `'square'`,`'diamond'`, `'triangle'` and\n         * `'triangle-down'`.\n         *\n         * Additionally, the URL to a graphic can be given on this form:\n         * `'url(graphic.png)'`. Note that for the image to be applied to\n         * exported charts, its URL needs to be accessible by the export\n         * server.\n         *\n         * Custom callbacks for symbol path generation can also be added to\n         * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n         * used by its method name, as shown in the demo.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-marker-symbol/\n         *         Predefined, graphic and custom markers\n         * @sample {highstock} highcharts/plotoptions/series-marker-symbol/\n         *         Predefined, graphic and custom markers\n         * @sample {highmaps} maps/demo/mappoint-mapmarker\n         *         Using the mapmarker symbol for points\n         *\n         * @type      {string}\n         * @apioption plotOptions.series.marker.symbol\n         */\n        /**\n         * Image markers only. Set the image width explicitly. When using\n         * this option, a `height` must also be set.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-marker-width-height/\n         *         Fixed width and height\n         * @sample {highstock} highcharts/plotoptions/series-marker-width-height/\n         *         Fixed width and height\n         *\n         * @type      {number}\n         * @since     4.0.4\n         * @apioption plotOptions.series.marker.width\n         */\n        /**\n         * States for a single point marker.\n         *\n         * @declare Highcharts.PointStatesOptionsObject\n         */\n        states: {\n            /**\n             * The normal state of a single point marker. Currently only\n             * used for setting animation when returning to normal state\n             * from hover.\n             *\n             * @declare Highcharts.PointStatesNormalOptionsObject\n             */\n            normal: {\n                /**\n                 * Animation when returning to normal state after hovering.\n                 *\n                 * @type {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                 */\n                animation: true\n            },\n            /**\n             * The hover state for a single point marker.\n             *\n             * @declare Highcharts.PointStatesHoverOptionsObject\n             */\n            hover: {\n                /**\n                 * Animation when hovering over the marker.\n                 *\n                 * @type {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                 */\n                animation: {\n                    /** @internal */\n                    duration: 50\n                },\n                /**\n                 * Enable or disable the point marker.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-states-hover-enabled/\n                 *         Disabled hover state\n                 */\n                enabled: true,\n                /**\n                 * The fill color of the marker in hover state. When\n                 * `undefined`, the series' or point's fillColor for normal\n                 * state is used.\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption plotOptions.series.marker.states.hover.fillColor\n                 */\n                /**\n                 * The color of the point marker's outline. When\n                 * `undefined`, the series' or point's lineColor for normal\n                 * state is used.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-states-hover-linecolor/\n                 *         White fill color, black line color\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption plotOptions.series.marker.states.hover.lineColor\n                 */\n                /**\n                 * The width of the point marker's outline. When\n                 * `undefined`, the series' or point's lineWidth for normal\n                 * state is used.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-states-hover-linewidth/\n                 *         3px line width\n                 *\n                 * @type      {number}\n                 * @apioption plotOptions.series.marker.states.hover.lineWidth\n                 */\n                /**\n                 * The radius of the point marker. In hover state, it\n                 * defaults to the normal state's radius + 2 as per the\n                 * [radiusPlus](#plotOptions.series.marker.states.hover.radiusPlus)\n                 * option.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-states-hover-radius/\n                 *         10px radius\n                 *\n                 * @type      {number}\n                 * @apioption plotOptions.series.marker.states.hover.radius\n                 */\n                /**\n                 * The number of pixels to increase the radius of the\n                 * hovered point.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-states-hover-linewidthplus/\n                 *         5 pixels greater radius on hover\n                 * @sample {highstock} highcharts/plotoptions/series-states-hover-linewidthplus/\n                 *         5 pixels greater radius on hover\n                 *\n                 * @since 4.0.3\n                 */\n                radiusPlus: 2,\n                /**\n                 * The additional line width for a hovered point.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-states-hover-linewidthplus/\n                 *         2 pixels wider on hover\n                 * @sample {highstock} highcharts/plotoptions/series-states-hover-linewidthplus/\n                 *         2 pixels wider on hover\n                 *\n                 * @since 4.0.3\n                 */\n                lineWidthPlus: 1\n            },\n            /**\n             * The appearance of the point marker when selected. In order to\n             * allow a point to be selected, set the\n             * `series.allowPointSelect` option to true.\n             *\n             * @declare Highcharts.PointStatesSelectOptionsObject\n             */\n            select: {\n                /**\n                 * Enable or disable visible feedback for selection.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-states-select-enabled/\n                 *         Disabled select state\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @apioption plotOptions.series.marker.states.select.enabled\n                 */\n                /**\n                 * The radius of the point marker. In hover state, it\n                 * defaults to the normal state's radius + 2.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-states-select-radius/\n                 *         10px radius for selected points\n                 *\n                 * @type      {number}\n                 * @apioption plotOptions.series.marker.states.select.radius\n                 */\n                /**\n                 * The fill color of the point marker.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-states-select-fillcolor/\n                 *         Solid red discs for selected points\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                fillColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                /**\n                 * The color of the point marker's outline. When\n                 * `undefined`, the series' or point's color is used.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-states-select-linecolor/\n                 *         Red line color for selected points\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                lineColor: \"#000000\" /* Palette.neutralColor100 */,\n                /**\n                 * The width of the point marker's outline.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-states-select-linewidth/\n                 *         3px line width for selected points\n                 */\n                lineWidth: 2\n            }\n        }\n    },\n    /**\n     * Properties for each single point.\n     *\n     * @declare Highcharts.PlotSeriesPointOptions\n     *\n     * @private\n     */\n    point: {\n        /**\n         * Fires when a point is clicked. One parameter, `event`, is passed\n         * to the function, containing common event information.\n         *\n         * If the `series.allowPointSelect` option is true, the default\n         * action for the point's click event is to toggle the point's\n         * select state. Returning `false` cancels this action.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-point-events-click/\n         *         Click marker to alert values\n         * @sample {highcharts} highcharts/plotoptions/series-point-events-click-column/\n         *         Click column\n         * @sample {highcharts} highcharts/plotoptions/series-point-events-click-url/\n         *         Go to URL\n         * @sample {highmaps} maps/plotoptions/series-point-events-click/\n         *         Click marker to display values\n         * @sample {highmaps} maps/plotoptions/series-point-events-click-url/\n         *         Go to URL\n         *\n         * @type      {Highcharts.PointClickCallbackFunction}\n         * @context   Highcharts.Point\n         * @apioption plotOptions.series.point.events.click\n         */\n        /**\n         * Fires when the mouse leaves the area close to the point. One\n         * parameter, `event`, is passed to the function, containing common\n         * event information.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-point-events-mouseover/\n         *         Show values in the chart's corner on mouse over\n         *\n         * @type      {Highcharts.PointMouseOutCallbackFunction}\n         * @context   Highcharts.Point\n         * @apioption plotOptions.series.point.events.mouseOut\n         */\n        /**\n         * Fires when the mouse enters the area close to the point. One\n         * parameter, `event`, is passed to the function, containing common\n         * event information.\n         *\n         * Returning `false` cancels the default behavior, which is to show a\n         * tooltip for the point.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-point-events-mouseover/\n         *         Show values in the chart's corner on mouse over\n         *\n         * @type      {Highcharts.PointMouseOverCallbackFunction}\n         * @context   Highcharts.Point\n         * @apioption plotOptions.series.point.events.mouseOver\n         */\n        /**\n         * Fires when the point is removed using the `.remove()` method. One\n         * parameter, `event`, is passed to the function. Returning `false`\n         * cancels the operation.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-point-events-remove/\n         *         Remove point and confirm\n         *\n         * @type      {Highcharts.PointRemoveCallbackFunction}\n         * @since     1.2.0\n         * @context   Highcharts.Point\n         * @apioption plotOptions.series.point.events.remove\n         */\n        /**\n         * Fires when the point is selected either programmatically or\n         * following a click on the point. One parameter, `event`, is passed\n         * to the function. Returning `false` cancels the operation.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-point-events-select/\n         *         Report the last selected point\n         * @sample {highmaps} maps/plotoptions/series-allowpointselect/\n         *         Report select and unselect\n         *\n         * @type      {Highcharts.PointSelectCallbackFunction}\n         * @since     1.2.0\n         * @context   Highcharts.Point\n         * @apioption plotOptions.series.point.events.select\n         */\n        /**\n         * Fires when the point is unselected either programmatically or\n         * following a click on the point. One parameter, `event`, is passed\n         * to the function.\n         *  Returning `false` cancels the operation.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-point-events-unselect/\n         *         Report the last unselected point\n         * @sample {highmaps} maps/plotoptions/series-allowpointselect/\n         *         Report select and unselect\n         *\n         * @type      {Highcharts.PointUnselectCallbackFunction}\n         * @since     1.2.0\n         * @context   Highcharts.Point\n         * @apioption plotOptions.series.point.events.unselect\n         */\n        /**\n         * Fires when the point is updated programmatically through the\n         * `.update()` method. One parameter, `event`, is passed to the\n         * function. The new point options can be accessed through\n         * `event.options`. Returning `false` cancels the operation.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-point-events-update/\n         *         Confirm point updating\n         *\n         * @type      {Highcharts.PointUpdateCallbackFunction}\n         * @since     1.2.0\n         * @context   Highcharts.Point\n         * @apioption plotOptions.series.point.events.update\n         */\n        /**\n         * Events for each single point.\n         *\n         * @declare Highcharts.PointEventsOptionsObject\n         */\n        events: {}\n    },\n    /**\n     * Options for the series data labels, appearing next to each data\n     * point.\n     *\n     * Since v6.2.0, multiple data labels can be applied to each single\n     * point by defining them as an array of configs.\n     *\n     * In styled mode, the data labels can be styled with the\n     * `.highcharts-data-label-box` and `.highcharts-data-label` class names\n     * ([see example](https://www.highcharts.com/samples/highcharts/css/series-datalabels)).\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-datalabels-enabled\n     *         Data labels enabled\n     * @sample {highcharts} highcharts/plotoptions/series-datalabels-multiple\n     *         Multiple data labels on a bar series\n     * @sample {highcharts} highcharts/css/series-datalabels\n     *         Styled mode example\n     * @sample {highmaps} maps/demo/color-axis\n     *         Choropleth map with data labels\n     * @sample {highmaps} maps/demo/mappoint-datalabels-mapmarker\n     *         Using data labels as map markers\n     *\n     * @type    {*|Array<*>}\n     * @product highcharts highstock highmaps gantt\n     *\n     * @private\n     */\n    dataLabels: {\n        /**\n         * Enable or disable the initial animation when a series is displayed\n         * for the `dataLabels`. The animation can also be set as a\n         * configuration object. Please note that this option only applies to\n         * the initial animation.\n         *\n         * For other animations, see [chart.animation](#chart.animation) and the\n         * animation parameter under the API methods. The following properties\n         * are supported:\n         *\n         * - `defer`: The animation delay time in milliseconds.\n         *\n         * @sample {highcharts} highcharts/plotoptions/animation-defer/\n         *          Animation defer settings\n         *\n         * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n         * @since     8.2.0\n         * @apioption plotOptions.series.dataLabels.animation\n         */\n        animation: {},\n        /**\n         * The animation delay time in milliseconds. Set to `0` to render the\n         * data labels immediately. As `undefined` inherits defer time from the\n         * [series.animation.defer](#plotOptions.series.animation.defer).\n         *\n         * @type      {number}\n         * @since     8.2.0\n         * @apioption plotOptions.series.dataLabels.animation.defer\n         */\n        /**\n         * The alignment of the data label compared to the point. If `right`,\n         * the right side of the label should be touching the point. For points\n         * with an extent, like columns, the alignments also dictates how to\n         * align it inside the box, as given with the\n         * [inside](#plotOptions.column.dataLabels.inside) option. Can be one of\n         * `left`, `center` or `right`.\n         *\n         * @sample {highcharts}\n         *         highcharts/plotoptions/series-datalabels-align-left/ Left\n         *         aligned\n         * @sample {highcharts}\n         *         highcharts/plotoptions/bar-datalabels-align-inside-bar/ Data\n         *         labels inside the bar\n         *\n         * @type {Highcharts.AlignValue|null}\n         */\n        align: 'center',\n        /**\n         * Whether to allow data labels to overlap. To make the labels less\n         * sensitive for overlapping, the\n         * [dataLabels.padding](#plotOptions.series.dataLabels.padding)\n         * can be set to 0.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-allowoverlap-false/\n         *         Don't allow overlap\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     4.1.0\n         * @apioption plotOptions.series.dataLabels.allowOverlap\n         */\n        /**\n         * The background color or gradient for the data label. Setting it to\n         * `auto` will use the point's color.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/\n         *         Data labels box options\n         * @sample {highmaps} maps/plotoptions/series-datalabels-box/\n         *         Data labels box options\n         * @sample {highmaps} maps/demo/mappoint-datalabels-mapmarker\n         *         Data labels as map markers\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @since     2.2.1\n         * @apioption plotOptions.series.dataLabels.backgroundColor\n         */\n        /**\n         * The border color for the data label. Setting it to `auto` will use\n         * the point's color. Defaults to `undefined`.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/\n         *         Data labels box options\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @since     2.2.1\n         * @apioption plotOptions.series.dataLabels.borderColor\n         */\n        /**\n         * The border radius in pixels for the data label.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/\n         *         Data labels box options\n         * @sample {highmaps} maps/plotoptions/series-datalabels-box/\n         *         Data labels box options\n         *\n         * @type      {number}\n         * @default   0\n         * @since     2.2.1\n         * @apioption plotOptions.series.dataLabels.borderRadius\n         */\n        /**\n         * The border width in pixels for the data label.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/\n         *         Data labels box options\n         *\n         * @type      {number}\n         * @default   0\n         * @since     2.2.1\n         * @apioption plotOptions.series.dataLabels.borderWidth\n         */\n        borderWidth: 0,\n        /**\n         * A class name for the data label. Particularly in styled mode,\n         * this can be used to give each series' or point's data label\n         * unique styling. In addition to this option, a default color class\n         * name is added so that we can give the labels a contrast text\n         * shadow.\n         *\n         * @sample {highcharts} highcharts/css/data-label-contrast/\n         *         Contrast text shadow\n         * @sample {highcharts} highcharts/css/series-datalabels/\n         *         Styling by CSS\n         *\n         * @type      {string}\n         * @since     5.0.0\n         * @apioption plotOptions.series.dataLabels.className\n         */\n        /**\n         * This options is deprecated.\n         * Use [style.color](#plotOptions.series.dataLabels.style) instead.\n         *\n         * The text color for the data labels. Defaults to `undefined`. For\n         * certain series types, like column or map, the data labels can be\n         * drawn inside the points. In this case the data label will be\n         * drawn with maximum contrast by default. Additionally, it will be\n         * given a `text-outline` style with the opposite color, to further\n         * increase the contrast. This can be overridden by setting the\n         * `text-outline` style to `none` in the `dataLabels.style` option.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-color/\n         *         Red data labels\n         * @sample {highmaps} maps/demo/color-axis/\n         *         White data labels\n         *\n         * @see [style.color](#plotOptions.series.dataLabels.style)\n         *\n         * @type       {Highcharts.ColorType}\n         * @deprecated 10.3\n         * @apioption  plotOptions.series.dataLabels.color\n         */\n        /**\n         * Whether to hide data labels that are outside the plot area. By\n         * default, the data label is moved inside the plot area according\n         * to the\n         * [overflow](#plotOptions.series.dataLabels.overflow)\n         * option.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @since     2.3.3\n         * @apioption plotOptions.series.dataLabels.crop\n         */\n        /**\n         * Whether to defer displaying the data labels until the initial\n         * series animation has finished. Setting to `false` renders the\n         * data label immediately. If set to `true` inherits the defer\n         * time set in [plotOptions.series.animation](#plotOptions.series.animation).\n         * If set to a number, a defer time is specified in milliseconds.\n         *\n         * @sample highcharts/plotoptions/animation-defer\n         *         Set defer time\n         *\n         * @since     4.0.0\n         * @type      {boolean|number}\n         * @product   highcharts highstock gantt\n         */\n        defer: true,\n        /**\n         * Enable or disable the data labels.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-enabled/\n         *         Data labels enabled\n         * @sample {highmaps} maps/demo/color-axis/\n         *         Data labels enabled\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption plotOptions.series.dataLabels.enabled\n         */\n        /**\n         * A declarative filter to control of which data labels to display.\n         * The declarative filter is designed for use when callback\n         * functions are not available, like when the chart options require\n         * a pure JSON structure or for use with graphical editors. For\n         * programmatic control, use the `formatter` instead, and return\n         * `undefined` to disable a single data label.\n         *\n         * @example\n         * filter: {\n         *     property: 'percentage',\n         *     operator: '>',\n         *     value: 4\n         * }\n         *\n         * @sample {highcharts} highcharts/demo/pie-monochrome\n         *         Data labels filtered by percentage\n         *\n         * @declare   Highcharts.DataLabelsFilterOptionsObject\n         * @since     6.0.3\n         * @apioption plotOptions.series.dataLabels.filter\n         */\n        /**\n         * The operator to compare by. Can be one of `>`, `<`, `>=`, `<=`,\n         * `==`, and `===`.\n         *\n         * @type       {string}\n         * @validvalue [\">\", \"<\", \">=\", \"<=\", \"==\", \"===\"]\n         * @apioption  plotOptions.series.dataLabels.filter.operator\n         */\n        /**\n         * The point property to filter by. Point options are passed\n         * directly to properties, additionally there are `y` value,\n         * `percentage` and others listed under {@link Highcharts.Point}\n         * members.\n         *\n         * @type      {string}\n         * @apioption plotOptions.series.dataLabels.filter.property\n         */\n        /**\n         * The value to compare against.\n         *\n         * @type      {number}\n         * @apioption plotOptions.series.dataLabels.filter.value\n         */\n        /**\n         * A\n         * [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n         * for the data label. Available variables are the same as for\n         * `formatter`.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-format/\n         *         Add a unit\n         * @sample {highmaps} maps/plotoptions/series-datalabels-format/\n         *         Formatted value in the data label\n         *\n         * @type      {string}\n         * @default   y\n         * @default   point.value\n         * @since     3.0\n         * @apioption plotOptions.series.dataLabels.format\n         */\n        // eslint-disable-next-line valid-jsdoc\n        /**\n         * Callback JavaScript function to format the data label. Note that if a\n         * `format` is defined, the format takes precedence and the formatter is\n         * ignored.\n         *\n         * @sample {highmaps} maps/plotoptions/series-datalabels-format/\n         *         Formatted value\n         *\n         * @type {Highcharts.DataLabelsFormatterCallbackFunction}\n         */\n        formatter: function () {\n            var numberFormatter = this.series.chart.numberFormatter;\n            return typeof this.y !== 'number' ?\n                '' : numberFormatter(this.y, -1);\n        },\n        /**\n         * For points with an extent, like columns or map areas, whether to\n         * align the data label inside the box or to the actual value point.\n         * Defaults to `false` in most cases, `true` in stacked columns.\n         *\n         * @type      {boolean}\n         * @since     3.0\n         * @apioption plotOptions.series.dataLabels.inside\n         */\n        /**\n         * Format for points with the value of null. Works analogously to\n         * [format](#plotOptions.series.dataLabels.format). `nullFormat` can\n         * be applied only to series which support displaying null points\n         * i.e `heatmap` or `tilemap`. Does not work with series that don't\n         * display null points, like `line`, `column`, `bar` or `pie`.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-nullformat/\n         *         Format data label for null points in heat map\n         *\n         * @type      {boolean|string}\n         * @since     7.1.0\n         * @apioption plotOptions.series.dataLabels.nullFormat\n         */\n        /**\n         * Callback JavaScript function that defines formatting for points\n         * with the value of null. Works analogously to\n         * [formatter](#plotOptions.series.dataLabels.formatter).\n         * `nullFormatter` can be applied only to series which support\n         * displaying null points i.e `heatmap` or `tilemap`. Does not work\n         * with series that don't display null points, like `line`, `column`,\n         * `bar` or `pie`.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-nullformat/\n         *         Format data label for null points in heat map\n         *\n         * @type      {Highcharts.DataLabelsFormatterCallbackFunction}\n         * @since     7.1.0\n         * @apioption plotOptions.series.dataLabels.nullFormatter\n         */\n        /**\n         * How to handle data labels that flow outside the plot area. The\n         * default is `\"justify\"`, which aligns them inside the plot area.\n         * For columns and bars, this means it will be moved inside the bar.\n         * To display data labels outside the plot area, set `crop` to\n         * `false` and `overflow` to `\"allow\"`.\n         *\n         * @type       {Highcharts.DataLabelsOverflowValue}\n         * @default    justify\n         * @since      3.0.6\n         * @apioption  plotOptions.series.dataLabels.overflow\n         */\n        /**\n         * When either the `borderWidth` or the `backgroundColor` is set,\n         * this is the padding within the box.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/\n         *         Data labels box options\n         * @sample {highmaps} maps/plotoptions/series-datalabels-box/\n         *         Data labels box options\n         *\n         * @since 2.2.1\n         */\n        padding: 5,\n        /**\n         * Aligns data labels relative to points. If `center` alignment is\n         * not possible, it defaults to `right`.\n         *\n         * @type      {Highcharts.AlignValue}\n         * @default   center\n         * @apioption plotOptions.series.dataLabels.position\n         */\n        /**\n         * Text rotation in degrees. Note that due to a more complex\n         * structure, backgrounds, borders and padding will be lost on a\n         * rotated data label.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-rotation/\n         *         Vertical labels\n         *\n         * @type      {number}\n         * @default   0\n         * @apioption plotOptions.series.dataLabels.rotation\n         */\n        /**\n         * The shadow of the box. Works best with `borderWidth` or\n         * `backgroundColor`. Since 2.3 the shadow can be an object\n         * configuration containing `color`, `offsetX`, `offsetY`, `opacity`\n         * and `width`.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-box/\n         *         Data labels box options\n         *\n         * @type      {boolean|Highcharts.ShadowOptionsObject}\n         * @default   false\n         * @since     2.2.1\n         * @apioption plotOptions.series.dataLabels.shadow\n         */\n        /**\n         * The name of a symbol to use for the border around the label.\n         * Symbols are predefined functions on the Renderer object.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-shape/\n         *         A callout for annotations\n         *\n         * @type      {string}\n         * @default   square\n         * @since     4.1.2\n         * @apioption plotOptions.series.dataLabels.shape\n         */\n        /**\n         * Styles for the label. The default `color` setting is\n         * `\"contrast\"`, which is a pseudo color that Highcharts picks up\n         * and applies the maximum contrast to the underlying point item,\n         * for example the bar in a bar chart.\n         *\n         * The `textOutline` is a pseudo property that applies an outline of\n         * the given width with the given color, which by default is the\n         * maximum contrast to the text. So a bright text color will result\n         * in a black text outline for maximum readability on a mixed\n         * background. In some cases, especially with grayscale text, the\n         * text outline doesn't work well, in which cases it can be disabled\n         * by setting it to `\"none\"`. When `useHTML` is true, the\n         * `textOutline` will not be picked up. In this, case, the same\n         * effect can be acheived through the `text-shadow` CSS property.\n         *\n         * For some series types, where each point has an extent, like for\n         * example tree maps, the data label may overflow the point. There\n         * are two strategies for handling overflow. By default, the text\n         * will wrap to multiple lines. The other strategy is to set\n         * `style.textOverflow` to `ellipsis`, which will keep the text on\n         * one line plus it will break inside long words.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-style/\n         *         Bold labels\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-overflow/\n         *         Long labels truncated with an ellipsis in a pie\n         * @sample {highcharts} highcharts/plotoptions/pie-datalabels-overflow-wrap/\n         *         Long labels are wrapped in a pie\n         * @sample {highmaps} maps/demo/color-axis/\n         *         Bold labels\n         *\n         * @type      {Highcharts.CSSObject}\n         * @since     4.1.0\n         * @apioption plotOptions.series.dataLabels.style\n         */\n        style: {\n            /** @internal */\n            fontSize: '11px',\n            /** @internal */\n            fontWeight: 'bold',\n            /** @internal */\n            color: 'contrast',\n            /** @internal */\n            textOutline: '1px contrast'\n        },\n        /**\n         * Options for a label text which should follow marker's shape.\n         * Border and background are disabled for a label that follows a\n         * path.\n         *\n         * **Note:** Only SVG-based renderer supports this option. Setting\n         * `useHTML` to true will disable this option.\n         *\n         * @declare   Highcharts.DataLabelsTextPathOptionsObject\n         * @since     7.1.0\n         * @apioption plotOptions.series.dataLabels.textPath\n         */\n        /**\n         * Presentation attributes for the text path.\n         *\n         * @type      {Highcharts.SVGAttributes}\n         * @since     7.1.0\n         * @apioption plotOptions.series.dataLabels.textPath.attributes\n         */\n        /**\n         * Enable or disable `textPath` option for link's or marker's data\n         * labels.\n         *\n         * @type      {boolean}\n         * @since     7.1.0\n         * @apioption plotOptions.series.dataLabels.textPath.enabled\n         */\n        /**\n         * Whether to\n         * [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n         * to render the labels.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption plotOptions.series.dataLabels.useHTML\n         */\n        /**\n         * The vertical alignment of a data label. Can be one of `top`,\n         * `middle` or `bottom`. The default value depends on the data, for\n         * instance in a column chart, the label is above positive values\n         * and below negative values.\n         *\n         * @type  {Highcharts.VerticalAlignValue|null}\n         * @since 2.3.3\n         */\n        verticalAlign: 'bottom',\n        /**\n         * The x position offset of the label relative to the point in\n         * pixels.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-rotation/\n         *         Vertical and positioned\n         * @sample {highcharts} highcharts/plotoptions/bar-datalabels-align-inside-bar/\n         *         Data labels inside the bar\n         */\n        x: 0,\n        /**\n         * The z index of the data labels. Use a `zIndex` of 6 to display it above\n         * the series, or use a `zIndex` of 2 to display it behind the series.\n         *\n         * @type      {number}\n         * @default   6\n         * @since     2.3.5\n         * @apioption plotOptions.series.dataLabels.zIndex\n         */\n        /**\n         * The y position offset of the label relative to the point in\n         * pixels.\n         *\n         * @sample {highcharts} highcharts/plotoptions/series-datalabels-rotation/\n         *         Vertical and positioned\n         */\n        y: 0\n    },\n    /**\n     * When the series contains less points than the crop threshold, all\n     * points are drawn, even if the points fall outside the visible plot\n     * area at the current zoom. The advantage of drawing all points\n     * (including markers and columns), is that animation is performed on\n     * updates. On the other hand, when the series contains more points than\n     * the crop threshold, the series data is cropped to only contain points\n     * that fall within the plot area. The advantage of cropping away\n     * invisible points is to increase performance on large series.\n     *\n     * @since   2.2\n     * @product highcharts highstock\n     *\n     * @private\n     */\n    cropThreshold: 300,\n    /**\n     * Opacity of a series parts: line, fill (e.g. area) and dataLabels.\n     *\n     * @see [states.inactive.opacity](#plotOptions.series.states.inactive.opacity)\n     *\n     * @since 7.1.0\n     *\n     * @private\n     */\n    opacity: 1,\n    /**\n     * The width of each point on the x axis. For example in a column chart\n     * with one value each day, the pointRange would be 1 day (= 24 * 3600\n     * * 1000 milliseconds). This is normally computed automatically, but\n     * this option can be used to override the automatic value.\n     *\n     * @product highstock\n     *\n     * @private\n     */\n    pointRange: 0,\n    /**\n     * When this is true, the series will not cause the Y axis to cross\n     * the zero plane (or [threshold](#plotOptions.series.threshold) option)\n     * unless the data actually crosses the plane.\n     *\n     * For example, if `softThreshold` is `false`, a series of 0, 1, 2,\n     * 3 will make the Y axis show negative values according to the\n     * `minPadding` option. If `softThreshold` is `true`, the Y axis starts\n     * at 0.\n     *\n     * @since   4.1.9\n     * @product highcharts highstock\n     *\n     * @private\n     */\n    softThreshold: true,\n    /**\n     * @declare Highcharts.SeriesStatesOptionsObject\n     *\n     * @private\n     */\n    states: {\n        /**\n         * The normal state of a series, or for point items in column, pie\n         * and similar series. Currently only used for setting animation\n         * when returning to normal state from hover.\n         *\n         * @declare Highcharts.SeriesStatesNormalOptionsObject\n         */\n        normal: {\n            /**\n             * Animation when returning to normal state after hovering.\n             *\n                 * @type {boolean|Partial<Highcharts.AnimationOptionsObject>}\n             */\n            animation: true\n        },\n        /**\n         * Options for the hovered series. These settings override the\n         * normal state options when a series is moused over or touched.\n         *\n         * @declare Highcharts.SeriesStatesHoverOptionsObject\n         */\n        hover: {\n            /**\n             * Enable separate styles for the hovered series to visualize\n             * that the user hovers either the series itself or the legend.\n             *\n             * @sample {highcharts} highcharts/plotoptions/series-states-hover-enabled/\n             *         Line\n             * @sample {highcharts} highcharts/plotoptions/series-states-hover-enabled-column/\n             *         Column\n             * @sample {highcharts} highcharts/plotoptions/series-states-hover-enabled-pie/\n             *         Pie\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     1.2\n             * @apioption plotOptions.series.states.hover.enabled\n             */\n            /**\n             * Animation setting for hovering the graph in line-type series.\n             *\n             * @type {boolean|Partial<Highcharts.AnimationOptionsObject>}\n             * @since   5.0.8\n             * @product highcharts highstock\n             */\n            animation: {\n                /**\n                 * The duration of the hover animation in milliseconds. By\n                 * default the hover state animates quickly in, and slowly\n                 * back to normal.\n                 *\n                 * @internal\n                 */\n                duration: 50\n            },\n            /**\n             * Pixel width of the graph line. By default this property is\n             * undefined, and the `lineWidthPlus` property dictates how much\n             * to increase the linewidth from normal state.\n             *\n             * @sample {highcharts} highcharts/plotoptions/series-states-hover-linewidth/\n             *         5px line on hover\n             *\n             * @type      {number}\n             * @product   highcharts highstock\n             * @apioption plotOptions.series.states.hover.lineWidth\n             */\n            /**\n             * The additional line width for the graph of a hovered series.\n             *\n             * @sample {highcharts} highcharts/plotoptions/series-states-hover-linewidthplus/\n             *         5 pixels wider\n             * @sample {highstock} highcharts/plotoptions/series-states-hover-linewidthplus/\n             *         5 pixels wider\n             *\n             * @since   4.0.3\n             * @product highcharts highstock\n             */\n            lineWidthPlus: 1,\n            /**\n             * In Highcharts 1.0, the appearance of all markers belonging\n             * to the hovered series. For settings on the hover state of the\n             * individual point, see\n             * [marker.states.hover](#plotOptions.series.marker.states.hover).\n             *\n             * @deprecated\n             *\n             * @extends   plotOptions.series.marker\n             * @excluding states, symbol\n             * @product   highcharts highstock\n             */\n            marker: {\n            // lineWidth: base + 1,\n            // radius: base + 1\n            },\n            /**\n             * Options for the halo appearing around the hovered point in\n             * line-type series as well as outside the hovered slice in pie\n             * charts. By default the halo is filled by the current point or\n             * series color with an opacity of 0.25\\. The halo can be\n             * disabled by setting the `halo` option to `null`.\n             *\n             * In styled mode, the halo is styled with the\n             * `.highcharts-halo` class, with colors inherited from\n             * `.highcharts-color-{n}`.\n             *\n             * @sample {highcharts} highcharts/plotoptions/halo/\n             *         Halo options\n             * @sample {highstock} highcharts/plotoptions/halo/\n             *         Halo options\n             *\n             * @declare Highcharts.SeriesStatesHoverHaloOptionsObject\n             * @type    {null|*}\n             * @since   4.0\n             * @product highcharts highstock\n             */\n            halo: {\n                /**\n                 * A collection of SVG attributes to override the appearance\n                 * of the halo, for example `fill`, `stroke` and\n                 * `stroke-width`.\n                 *\n                 * @type      {Highcharts.SVGAttributes}\n                 * @since     4.0\n                 * @product   highcharts highstock\n                 * @apioption plotOptions.series.states.hover.halo.attributes\n                 */\n                /**\n                 * The pixel size of the halo. For point markers this is the\n                 * radius of the halo. For pie slices it is the width of the\n                 * halo outside the slice. For bubbles it defaults to 5 and\n                 * is the width of the halo outside the bubble.\n                 *\n                 * @since   4.0\n                 * @product highcharts highstock\n                 */\n                size: 10,\n                /**\n                 * Opacity for the halo unless a specific fill is overridden\n                 * using the `attributes` setting. Note that Highcharts is\n                 * only able to apply opacity to colors of hex or rgb(a)\n                 * formats.\n                 *\n                 * @since   4.0\n                 * @product highcharts highstock\n                 */\n                opacity: 0.25\n            }\n        },\n        /**\n         * Specific options for point in selected states, after being\n         * selected by\n         * [allowPointSelect](#plotOptions.series.allowPointSelect)\n         * or programmatically.\n         *\n         * @sample maps/plotoptions/series-allowpointselect/\n         *         Allow point select demo\n         *\n         * @declare   Highcharts.SeriesStatesSelectOptionsObject\n         * @extends   plotOptions.series.states.hover\n         * @excluding brightness\n         */\n        select: {\n            animation: {\n                /** @internal */\n                duration: 0\n            }\n        },\n        /**\n         * The opposite state of a hover for series.\n         *\n         * @sample highcharts/plotoptions/series-states-inactive-disabled\n         *         Disabled inactive state\n         *\n         * @declare Highcharts.SeriesStatesInactiveOptionsObject\n         */\n        inactive: {\n            /**\n             * Enable or disable the inactive state for a series\n             *\n             * @sample highcharts/plotoptions/series-states-inactive-disabled\n             *         Disabled inactive state\n             *\n             * @type {boolean}\n             * @default true\n             * @apioption plotOptions.series.states.inactive.enabled\n             */\n            /**\n             * The animation for entering the inactive state.\n             *\n             * @type {boolean|Partial<Highcharts.AnimationOptionsObject>}\n             */\n            animation: {\n                /** @internal */\n                duration: 50\n            },\n            /**\n             * Opacity of series elements (dataLabels, line, area).\n             *\n             * @type {number}\n             */\n            opacity: 0.2\n        }\n    },\n    /**\n     * Sticky tracking of mouse events. When true, the `mouseOut` event on a\n     * series isn't triggered until the mouse moves over another series, or\n     * out of the plot area. When false, the `mouseOut` event on a series is\n     * triggered when the mouse leaves the area around the series' graph or\n     * markers. This also implies the tooltip when not shared. When\n     * `stickyTracking` is false and `tooltip.shared` is false, the tooltip\n     * will be hidden when moving the mouse between series. Defaults to true\n     * for line and area type series, but to false for columns, pies etc.\n     *\n     * **Note:** The boost module will force this option because of\n     * technical limitations.\n     *\n     * @sample {highcharts} highcharts/plotoptions/series-stickytracking-true/\n     *         True by default\n     * @sample {highcharts} highcharts/plotoptions/series-stickytracking-false/\n     *         False\n     *\n     * @default {highcharts} true\n     * @default {highstock} true\n     * @default {highmaps} false\n     * @since   2.0\n     *\n     * @private\n     */\n    stickyTracking: true,\n    /**\n     * A configuration object for the tooltip rendering of each single\n     * series. Properties are inherited from [tooltip](#tooltip), but only\n     * the following properties can be defined on a series level.\n     *\n     * @declare   Highcharts.SeriesTooltipOptionsObject\n     * @since     2.3\n     * @extends   tooltip\n     * @excluding animation, backgroundColor, borderColor, borderRadius,\n     *            borderWidth, className, crosshairs, enabled, formatter,\n     *            headerShape, hideDelay, outside, padding, positioner,\n     *            shadow, shape, shared, snap, split, stickOnContact,\n     *            style, useHTML\n     * @apioption plotOptions.series.tooltip\n     */\n    /**\n     * When a series contains a data array that is longer than this, only\n     * one dimensional arrays of numbers, or two dimensional arrays with\n     * x and y values are allowed. Also, only the first point is tested,\n     * and the rest are assumed to be the same format. This saves expensive\n     * data checking and indexing in long series. Set it to `0` disable.\n     *\n     * Note:\n     * In boost mode turbo threshold is forced. Only array of numbers or\n     * two dimensional arrays are allowed.\n     *\n     * @since   2.2\n     * @product highcharts highstock gantt\n     *\n     * @private\n     */\n    turboThreshold: 1000,\n    /**\n     * An array defining zones within a series. Zones can be applied to the\n     * X axis, Y axis or Z axis for bubbles, according to the `zoneAxis`\n     * option. The zone definitions have to be in ascending order regarding\n     * to the value.\n     *\n     * In styled mode, the color zones are styled with the\n     * `.highcharts-zone-{n}` class, or custom classed from the `className`\n     * option\n     * ([view live demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/color-zones/)).\n     *\n     * @see [zoneAxis](#plotOptions.series.zoneAxis)\n     *\n     * @sample {highcharts} highcharts/series/color-zones-simple/\n     *         Color zones\n     * @sample {highstock} highcharts/series/color-zones-simple/\n     *         Color zones\n     *\n     * @declare   Highcharts.SeriesZonesOptionsObject\n     * @type      {Array<*>}\n     * @since     4.1.0\n     * @product   highcharts highstock\n     * @apioption plotOptions.series.zones\n     */\n    /**\n     * Styled mode only. A custom class name for the zone.\n     *\n     * @sample highcharts/css/color-zones/\n     *         Zones styled by class name\n     *\n     * @type      {string}\n     * @since     5.0.0\n     * @apioption plotOptions.series.zones.className\n     */\n    /**\n     * Defines the color of the series.\n     *\n     * @see [series color](#plotOptions.series.color)\n     *\n     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     * @since     4.1.0\n     * @product   highcharts highstock\n     * @apioption plotOptions.series.zones.color\n     */\n    /**\n     * A name for the dash style to use for the graph.\n     *\n     * @see [plotOptions.series.dashStyle](#plotOptions.series.dashStyle)\n     *\n     * @sample {highcharts|highstock} highcharts/series/color-zones-dashstyle-dot/\n     *         Dashed line indicates prognosis\n     *\n     * @type      {Highcharts.DashStyleValue}\n     * @since     4.1.0\n     * @product   highcharts highstock\n     * @apioption plotOptions.series.zones.dashStyle\n     */\n    /**\n     * Defines the fill color for the series (in area type series)\n     *\n     * @see [fillColor](#plotOptions.area.fillColor)\n     *\n     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n     * @since     4.1.0\n     * @product   highcharts highstock\n     * @apioption plotOptions.series.zones.fillColor\n     */\n    /**\n     * The value up to where the zone extends, if undefined the zones\n     * stretches to the last value in the series.\n     *\n     * @type      {number}\n     * @since     4.1.0\n     * @product   highcharts highstock\n     * @apioption plotOptions.series.zones.value\n     */\n    /**\n     * When using dual or multiple color axes, this number defines which\n     * colorAxis the particular series is connected to. It refers to\n     * either the\n     * {@link #colorAxis.id|axis id}\n     * or the index of the axis in the colorAxis array, with 0 being the\n     * first. Set this option to false to prevent a series from connecting\n     * to the default color axis.\n     *\n     * Since v7.2.0 the option can also be an axis id or an axis index\n     * instead of a boolean flag.\n     *\n     * @sample highcharts/coloraxis/coloraxis-with-pie/\n     *         Color axis with pie series\n     * @sample highcharts/coloraxis/multiple-coloraxis/\n     *         Multiple color axis\n     *\n     * @type      {number|string|boolean}\n     * @default   0\n     * @product   highcharts highstock highmaps\n     * @apioption plotOptions.series.colorAxis\n     */\n    /**\n     * Determines what data value should be used to calculate point color\n     * if `colorAxis` is used. Requires to set `min` and `max` if some\n     * custom point property is used or if approximation for data grouping\n     * is set to `'sum'`.\n     *\n     * @sample highcharts/coloraxis/custom-color-key/\n     *         Custom color key\n     * @sample highcharts/coloraxis/color-key-with-stops/\n     *         Custom colorKey with color axis stops\n     * @sample highcharts/coloraxis/changed-default-color-key/\n     *         Changed default color key\n     *\n     * @type      {string}\n     * @default   y\n     * @since     7.2.0\n     * @product   highcharts highstock highmaps\n     * @apioption plotOptions.series.colorKey\n     */\n    /**\n     * Determines whether the series should look for the nearest point\n     * in both dimensions or just the x-dimension when hovering the series.\n     * Defaults to `'xy'` for scatter series and `'x'` for most other\n     * series. If the data has duplicate x-values, it is recommended to\n     * set this to `'xy'` to allow hovering over all points.\n     *\n     * Applies only to series types using nearest neighbor search (not\n     * direct hover) for tooltip.\n     *\n     * @sample {highcharts} highcharts/series/findnearestpointby/\n     *         Different hover behaviors\n     * @sample {highstock} highcharts/series/findnearestpointby/\n     *         Different hover behaviors\n     * @sample {highmaps} highcharts/series/findnearestpointby/\n     *         Different hover behaviors\n     *\n     * @since      5.0.10\n     * @validvalue [\"x\", \"xy\"]\n     *\n     * @private\n     */\n    findNearestPointBy: 'x'\n};\n/* *\n *\n *  Default Export\n *\n * */\nexport default seriesDefaults;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport A from '../Animation/AnimationUtilities.js';\nvar animObject = A.animObject, setAnimation = A.setAnimation;\nimport D from '../Defaults.js';\nvar defaultOptions = D.defaultOptions;\nimport F from '../Foundation.js';\nvar registerEventOptions = F.registerEventOptions;\nimport H from '../Globals.js';\nvar hasTouch = H.hasTouch, svg = H.svg, win = H.win;\nimport LegendSymbol from '../Legend/LegendSymbol.js';\nimport Point from './Point.js';\nimport SeriesDefaults from './SeriesDefaults.js';\nimport SeriesRegistry from './SeriesRegistry.js';\nvar seriesTypes = SeriesRegistry.seriesTypes;\nimport SVGElement from '../Renderer/SVG/SVGElement.js';\nimport U from '../Utilities.js';\nvar addEvent = U.addEvent, arrayMax = U.arrayMax, arrayMin = U.arrayMin, clamp = U.clamp, cleanRecursively = U.cleanRecursively, correctFloat = U.correctFloat, defined = U.defined, erase = U.erase, error = U.error, extend = U.extend, find = U.find, fireEvent = U.fireEvent, getNestedProperty = U.getNestedProperty, isArray = U.isArray, isNumber = U.isNumber, isString = U.isString, merge = U.merge, objectEach = U.objectEach, pick = U.pick, removeEvent = U.removeEvent, splat = U.splat, syncTimeout = U.syncTimeout;\n/* *\n *\n *  Class\n *\n * */\n/**\n * This is the base series prototype that all other series types inherit from.\n * A new series is initialized either through the\n * [series](https://api.highcharts.com/highcharts/series)\n * option structure, or after the chart is initialized, through\n * {@link Highcharts.Chart#addSeries}.\n *\n * The object can be accessed in a number of ways. All series and point event\n * handlers give a reference to the `series` object. The chart object has a\n * {@link Highcharts.Chart#series|series} property that is a collection of all\n * the chart's series. The point objects and axis objects also have the same\n * reference.\n *\n * Another way to reference the series programmatically is by `id`. Add an id\n * in the series configuration options, and get the series object by\n * {@link Highcharts.Chart#get}.\n *\n * Configuration options for the series are given in three levels. Options for\n * all series in a chart are given in the\n * [plotOptions.series](https://api.highcharts.com/highcharts/plotOptions.series)\n * object. Then options for all series of a specific type\n * are given in the plotOptions of that type, for example `plotOptions.line`.\n * Next, options for one single series are given in the series array, or as\n * arguments to `chart.addSeries`.\n *\n * The data in the series is stored in various arrays.\n *\n * - First, `series.options.data` contains all the original config options for\n *   each point whether added by options or methods like `series.addPoint`.\n *\n * - Next, `series.data` contains those values converted to points, but in case\n *   the series data length exceeds the `cropThreshold`, or if the data is\n *   grouped, `series.data` doesn't contain all the points. It only contains the\n *   points that have been created on demand.\n *\n * - Then there's `series.points` that contains all currently visible point\n *   objects. In case of cropping, the cropped-away points are not part of this\n *   array. The `series.points` array starts at `series.cropStart` compared to\n *   `series.data` and `series.options.data`. If however the series data is\n *   grouped, these can't be correlated one to one.\n *\n * - `series.xData` and `series.processedXData` contain clean x values,\n *   equivalent to `series.data` and `series.points`.\n *\n * - `series.yData` and `series.processedYData` contain clean y values,\n *   equivalent to `series.data` and `series.points`.\n *\n * @class\n * @name Highcharts.Series\n *\n * @param {Highcharts.Chart} chart\n * The chart instance.\n *\n * @param {Highcharts.SeriesOptionsType|object} options\n * The series options.\n */\nvar Series = /** @class */ (function () {\n    function Series() {\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        this._i = void 0;\n        this.chart = void 0;\n        this.data = void 0;\n        this.eventOptions = void 0;\n        this.eventsToUnbind = void 0;\n        this.index = void 0;\n        this.linkedSeries = void 0;\n        this.options = void 0;\n        this.points = void 0;\n        this.processedXData = void 0;\n        this.processedYData = void 0;\n        this.tooltipOptions = void 0;\n        this.userOptions = void 0;\n        this.xAxis = void 0;\n        this.yAxis = void 0;\n        this.zones = void 0;\n        /** eslint-enable valid-jsdoc */\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    Series.prototype.init = function (chart, userOptions) {\n        fireEvent(this, 'init', { options: userOptions });\n        var series = this, chartSeries = chart.series;\n        // The 'eventsToUnbind' property moved from prototype into the\n        // Series init to avoid reference to the same array between\n        // the different series and charts. #12959, #13937\n        this.eventsToUnbind = [];\n        /**\n         * Read only. The chart that the series belongs to.\n         *\n         * @name Highcharts.Series#chart\n         * @type {Highcharts.Chart}\n         */\n        series.chart = chart;\n        /**\n         * Read only. The series' type, like \"line\", \"area\", \"column\" etc.\n         * The type in the series options anc can be altered using\n         * {@link Series#update}.\n         *\n         * @name Highcharts.Series#type\n         * @type {string}\n         */\n        /**\n         * Read only. The series' current options. To update, use\n         * {@link Series#update}.\n         *\n         * @name Highcharts.Series#options\n         * @type {Highcharts.SeriesOptionsType}\n         */\n        series.options = series.setOptions(userOptions);\n        var options = series.options;\n        series.linkedSeries = [];\n        // bind the axes\n        series.bindAxes();\n        extend(series, {\n            /**\n             * The series name as given in the options. Defaults to\n             * \"Series {n}\".\n             *\n             * @name Highcharts.Series#name\n             * @type {string}\n             */\n            name: options.name,\n            state: '',\n            /**\n             * Read only. The series' visibility state as set by {@link\n             * Series#show}, {@link Series#hide}, or in the initial\n             * configuration.\n             *\n             * @name Highcharts.Series#visible\n             * @type {boolean}\n             */\n            visible: options.visible !== false,\n            /**\n             * Read only. The series' selected state as set by {@link\n             * Highcharts.Series#select}.\n             *\n             * @name Highcharts.Series#selected\n             * @type {boolean}\n             */\n            selected: options.selected === true // false by default\n        });\n        registerEventOptions(this, options);\n        var events = options.events;\n        if ((events && events.click) ||\n            (options.point &&\n                options.point.events &&\n                options.point.events.click) ||\n            options.allowPointSelect) {\n            chart.runTrackerClick = true;\n        }\n        series.getColor();\n        series.getSymbol();\n        // Initialize the parallel data arrays\n        series.parallelArrays.forEach(function (key) {\n            if (!series[key + 'Data']) {\n                series[key + 'Data'] = [];\n            }\n        });\n        // Mark cartesian\n        if (series.isCartesian) {\n            chart.hasCartesianSeries = true;\n        }\n        // Get the index and register the series in the chart. The index is\n        // one more than the current latest series index (#5960).\n        var lastSeries;\n        if (chartSeries.length) {\n            lastSeries = chartSeries[chartSeries.length - 1];\n        }\n        series._i = pick(lastSeries && lastSeries._i, -1) + 1;\n        series.opacity = series.options.opacity;\n        // Insert the series and re-order all series above the insertion\n        // point.\n        chart.orderSeries(this.insert(chartSeries));\n        // Set options for series with sorting and set data later.\n        if (options.dataSorting && options.dataSorting.enabled) {\n            series.setDataSortingOptions();\n        }\n        else if (!series.points && !series.data) {\n            series.setData(options.data, false);\n        }\n        fireEvent(this, 'afterInit');\n    };\n    /**\n     * Check whether the series item is itself or inherits from a certain\n     * series type.\n     *\n     * @function Highcharts.Series#is\n     * @param {string} type The type of series to check for, can be either\n     *        featured or custom series types. For example `column`, `pie`,\n     *        `ohlc` etc.\n     *\n     * @return {boolean}\n     *        True if this item is or inherits from the given type.\n     */\n    Series.prototype.is = function (type) {\n        return seriesTypes[type] && this instanceof seriesTypes[type];\n    };\n    /**\n     * Insert the series in a collection with other series, either the chart\n     * series or yAxis series, in the correct order according to the index\n     * option. Used internally when adding series.\n     *\n     * @private\n     * @function Highcharts.Series#insert\n     * @param {Array<Highcharts.Series>} collection\n     *        A collection of series, like `chart.series` or `xAxis.series`.\n     * @return {number}\n     *         The index of the series in the collection.\n     */\n    Series.prototype.insert = function (collection) {\n        var indexOption = this.options.index;\n        var i;\n        // Insert by index option\n        if (isNumber(indexOption)) {\n            i = collection.length;\n            while (i--) {\n                // Loop down until the interted element has higher index\n                if (indexOption >=\n                    pick(collection[i].options.index, collection[i]._i)) {\n                    collection.splice(i + 1, 0, this);\n                    break;\n                }\n            }\n            if (i === -1) {\n                collection.unshift(this);\n            }\n            i = i + 1;\n            // Or just push it to the end\n        }\n        else {\n            collection.push(this);\n        }\n        return pick(i, collection.length - 1);\n    };\n    /**\n     * Set the xAxis and yAxis properties of cartesian series, and register\n     * the series in the `axis.series` array.\n     *\n     * @private\n     * @function Highcharts.Series#bindAxes\n     */\n    Series.prototype.bindAxes = function () {\n        var series = this, seriesOptions = series.options, chart = series.chart;\n        var axisOptions;\n        fireEvent(this, 'bindAxes', null, function () {\n            // repeat for xAxis and yAxis\n            (series.axisTypes || []).forEach(function (AXIS) {\n                var index = 0;\n                // loop through the chart's axis objects\n                chart[AXIS].forEach(function (axis) {\n                    axisOptions = axis.options;\n                    // apply if the series xAxis or yAxis option mathches\n                    // the number of the axis, or if undefined, use the\n                    // first axis\n                    if ((seriesOptions[AXIS] === index &&\n                        !axisOptions.isInternal) ||\n                        (typeof seriesOptions[AXIS] !==\n                            'undefined' &&\n                            seriesOptions[AXIS] === axisOptions.id) ||\n                        (typeof seriesOptions[AXIS] ===\n                            'undefined' &&\n                            axisOptions.index === 0)) {\n                        // register this series in the axis.series lookup\n                        series.insert(axis.series);\n                        // set this series.xAxis or series.yAxis reference\n                        /**\n                         * Read only. The unique xAxis object associated\n                         * with the series.\n                         *\n                         * @name Highcharts.Series#xAxis\n                         * @type {Highcharts.Axis}\n                         */\n                        /**\n                         * Read only. The unique yAxis object associated\n                         * with the series.\n                         *\n                         * @name Highcharts.Series#yAxis\n                         * @type {Highcharts.Axis}\n                         */\n                        series[AXIS] = axis;\n                        // mark dirty for redraw\n                        axis.isDirty = true;\n                    }\n                    if (!axisOptions.isInternal) {\n                        index++;\n                    }\n                });\n                // The series needs an X and an Y axis\n                if (!series[AXIS] &&\n                    series.optionalAxis !== AXIS) {\n                    error(18, true, chart);\n                }\n            });\n        });\n        fireEvent(this, 'afterBindAxes');\n    };\n    /**\n     * For simple series types like line and column, the data values are\n     * held in arrays like xData and yData for quick lookup to find extremes\n     * and more. For multidimensional series like bubble and map, this can\n     * be extended with arrays like zData and valueData by adding to the\n     * `series.parallelArrays` array.\n     *\n     * @private\n     * @function Highcharts.Series#updateParallelArrays\n     */\n    Series.prototype.updateParallelArrays = function (point, i) {\n        var series = point.series, args = arguments, fn = isNumber(i) ?\n            // Insert the value in the given position\n            function (key) {\n                var val = key === 'y' && series.toYData ?\n                    series.toYData(point) :\n                    point[key];\n                series[key + 'Data'][i] = val;\n            } :\n            // Apply the method specified in i with the following\n            // arguments as arguments\n            function (key) {\n                Array.prototype[i].apply(series[key + 'Data'], Array.prototype.slice.call(args, 2));\n            };\n        series.parallelArrays.forEach(fn);\n    };\n    /**\n     * Define hasData functions for series. These return true if there\n     * are data points on this series within the plot area.\n     *\n     * @private\n     * @function Highcharts.Series#hasData\n     */\n    Series.prototype.hasData = function () {\n        return ((this.visible &&\n            typeof this.dataMax !== 'undefined' &&\n            typeof this.dataMin !== 'undefined') || ( // #3703\n        this.visible &&\n            this.yData &&\n            this.yData.length > 0) // #9758\n        );\n    };\n    /**\n     * Return an auto incremented x value based on the pointStart and\n     * pointInterval options. This is only used if an x value is not given\n     * for the point that calls autoIncrement.\n     *\n     * @private\n     * @function Highcharts.Series#autoIncrement\n     */\n    Series.prototype.autoIncrement = function (x) {\n        var options = this.options, pointIntervalUnit = options.pointIntervalUnit, relativeXValue = options.relativeXValue, time = this.chart.time;\n        var xIncrement = this.xIncrement, date, pointInterval;\n        xIncrement = pick(xIncrement, options.pointStart, 0);\n        this.pointInterval = pointInterval = pick(this.pointInterval, options.pointInterval, 1);\n        if (relativeXValue && isNumber(x)) {\n            pointInterval *= x;\n        }\n        // Added code for pointInterval strings\n        if (pointIntervalUnit) {\n            date = new time.Date(xIncrement);\n            if (pointIntervalUnit === 'day') {\n                time.set('Date', date, time.get('Date', date) + pointInterval);\n            }\n            else if (pointIntervalUnit === 'month') {\n                time.set('Month', date, time.get('Month', date) + pointInterval);\n            }\n            else if (pointIntervalUnit === 'year') {\n                time.set('FullYear', date, time.get('FullYear', date) + pointInterval);\n            }\n            pointInterval = date.getTime() - xIncrement;\n        }\n        if (relativeXValue && isNumber(x)) {\n            return xIncrement + pointInterval;\n        }\n        this.xIncrement = xIncrement + pointInterval;\n        return xIncrement;\n    };\n    /**\n     * Internal function to set properties for series if data sorting is\n     * enabled.\n     *\n     * @private\n     * @function Highcharts.Series#setDataSortingOptions\n     */\n    Series.prototype.setDataSortingOptions = function () {\n        var options = this.options;\n        extend(this, {\n            requireSorting: false,\n            sorted: false,\n            enabledDataSorting: true,\n            allowDG: false\n        });\n        // To allow unsorted data for column series.\n        if (!defined(options.pointRange)) {\n            options.pointRange = 1;\n        }\n    };\n    /**\n     * Set the series options by merging from the options tree. Called\n     * internally on initializing and updating series. This function will\n     * not redraw the series. For API usage, use {@link Series#update}.\n     * @private\n     * @function Highcharts.Series#setOptions\n     * @param {Highcharts.SeriesOptionsType} itemOptions\n     * The series options.\n     * @emits Highcharts.Series#event:afterSetOptions\n     */\n    Series.prototype.setOptions = function (itemOptions) {\n        var chart = this.chart, chartOptions = chart.options, plotOptions = chartOptions.plotOptions, userOptions = chart.userOptions || {}, seriesUserOptions = merge(itemOptions), styledMode = chart.styledMode, e = {\n            plotOptions: plotOptions,\n            userOptions: seriesUserOptions\n        };\n        var zone;\n        fireEvent(this, 'setOptions', e);\n        // These may be modified by the event\n        var typeOptions = e.plotOptions[this.type], userPlotOptions = (userOptions.plotOptions || {});\n        // use copy to prevent undetected changes (#9762)\n        /**\n         * Contains series options by the user without defaults.\n         * @name Highcharts.Series#userOptions\n         * @type {Highcharts.SeriesOptionsType}\n         */\n        this.userOptions = e.userOptions;\n        var options = merge(typeOptions, plotOptions.series, \n        // #3881, chart instance plotOptions[type] should trump\n        // plotOptions.series\n        userOptions.plotOptions &&\n            userOptions.plotOptions[this.type], seriesUserOptions);\n        // The tooltip options are merged between global and series specific\n        // options. Importance order asscendingly:\n        // globals: (1)tooltip, (2)plotOptions.series,\n        // (3)plotOptions[this.type]\n        // init userOptions with possible later updates: 4-6 like 1-3 and\n        // (7)this series options\n        this.tooltipOptions = merge(defaultOptions.tooltip, // 1\n        defaultOptions.plotOptions.series &&\n            defaultOptions.plotOptions.series.tooltip, // 2\n        defaultOptions.plotOptions[this.type].tooltip, // 3\n        chartOptions.tooltip.userOptions, // 4\n        plotOptions.series &&\n            plotOptions.series.tooltip, // 5\n        plotOptions[this.type].tooltip, // 6\n        seriesUserOptions.tooltip // 7\n        );\n        // When shared tooltip, stickyTracking is true by default,\n        // unless user says otherwise.\n        this.stickyTracking = pick(seriesUserOptions.stickyTracking, userPlotOptions[this.type] &&\n            userPlotOptions[this.type].stickyTracking, userPlotOptions.series && userPlotOptions.series.stickyTracking, (this.tooltipOptions.shared && !this.noSharedTooltip ?\n            true :\n            options.stickyTracking));\n        // Delete marker object if not allowed (#1125)\n        if (typeOptions.marker === null) {\n            delete options.marker;\n        }\n        // Handle color zones\n        this.zoneAxis = options.zoneAxis;\n        var zones = this.zones = (options.zones || []).slice();\n        if ((options.negativeColor || options.negativeFillColor) &&\n            !options.zones) {\n            zone = {\n                value: options[this.zoneAxis + 'Threshold'] ||\n                    options.threshold ||\n                    0,\n                className: 'highcharts-negative'\n            };\n            if (!styledMode) {\n                zone.color = options.negativeColor;\n                zone.fillColor = options.negativeFillColor;\n            }\n            zones.push(zone);\n        }\n        if (zones.length) { // Push one extra zone for the rest\n            if (defined(zones[zones.length - 1].value)) {\n                zones.push(styledMode ? {} : {\n                    color: this.color,\n                    fillColor: this.fillColor\n                });\n            }\n        }\n        fireEvent(this, 'afterSetOptions', { options: options });\n        return options;\n    };\n    /**\n     * Return series name in \"Series {Number}\" format or the one defined by\n     * a user. This method can be simply overridden as series name format\n     * can vary (e.g. technical indicators).\n     *\n     * @function Highcharts.Series#getName\n     *\n     * @return {string}\n     * The series name.\n     */\n    Series.prototype.getName = function () {\n        // #4119\n        return pick(this.options.name, 'Series ' + (this.index + 1));\n    };\n    /**\n     * @private\n     * @function Highcharts.Series#getCyclic\n     */\n    Series.prototype.getCyclic = function (prop, value, defaults) {\n        var chart = this.chart, userOptions = this.userOptions, indexName = prop + 'Index', counterName = prop + 'Counter', len = defaults ? defaults.length : pick(chart.options.chart[prop + 'Count'], chart[prop + 'Count']);\n        var i, setting;\n        if (!value) {\n            // Pick up either the colorIndex option, or the _colorIndex\n            // after Series.update()\n            setting = pick(userOptions[indexName], userOptions['_' + indexName]);\n            if (defined(setting)) { // after Series.update()\n                i = setting;\n            }\n            else {\n                // #6138\n                if (!chart.series.length) {\n                    chart[counterName] = 0;\n                }\n                userOptions['_' + indexName] = i =\n                    chart[counterName] % len;\n                chart[counterName] += 1;\n            }\n            if (defaults) {\n                value = defaults[i];\n            }\n        }\n        // Set the colorIndex\n        if (typeof i !== 'undefined') {\n            this[indexName] = i;\n        }\n        this[prop] = value;\n    };\n    /**\n     * Get the series' color based on either the options or pulled from\n     * global options.\n     *\n     * @private\n     * @function Highcharts.Series#getColor\n     */\n    Series.prototype.getColor = function () {\n        if (this.chart.styledMode) {\n            this.getCyclic('color');\n        }\n        else if (this.options.colorByPoint) {\n            this.color = \"#cccccc\" /* Palette.neutralColor20 */;\n        }\n        else {\n            this.getCyclic('color', this.options.color ||\n                defaultOptions.plotOptions[this.type].color, this.chart.options.colors);\n        }\n    };\n    /**\n     * Get all points' instances created for this series.\n     *\n     * @private\n     * @function Highcharts.Series#getPointsCollection\n     */\n    Series.prototype.getPointsCollection = function () {\n        return (this.hasGroupedData ? this.points : this.data) || [];\n    };\n    /**\n     * Get the series' symbol based on either the options or pulled from\n     * global options.\n     *\n     * @private\n     * @function Highcharts.Series#getSymbol\n     */\n    Series.prototype.getSymbol = function () {\n        var seriesMarkerOption = this.options.marker;\n        this.getCyclic('symbol', seriesMarkerOption.symbol, this.chart.options.symbols);\n    };\n    /**\n     * Finds the index of an existing point that matches the given point\n     * options.\n     *\n     * @private\n     * @function Highcharts.Series#findPointIndex\n     * @param {Highcharts.PointOptionsObject} optionsObject\n     * The options of the point.\n     * @param {number} fromIndex\n     * The index to start searching from, used for optimizing series with\n     * required sorting.\n     * @return {number|undefined}\n     * Returns the index of a matching point, or undefined if no match is found.\n     */\n    Series.prototype.findPointIndex = function (optionsObject, fromIndex) {\n        var id = optionsObject.id, x = optionsObject.x, oldData = this.points, dataSorting = this.options.dataSorting;\n        var matchingPoint, matchedById, pointIndex;\n        if (id) {\n            var item = this.chart.get(id);\n            if (item instanceof Point) {\n                matchingPoint = item;\n            }\n        }\n        else if (this.linkedParent ||\n            this.enabledDataSorting ||\n            this.options.relativeXValue) {\n            var matcher = function (oldPoint) { return !oldPoint.touched &&\n                oldPoint.index === optionsObject.index; };\n            if (dataSorting && dataSorting.matchByName) {\n                matcher = function (oldPoint) { return !oldPoint.touched &&\n                    oldPoint.name === optionsObject.name; };\n            }\n            else if (this.options.relativeXValue) {\n                matcher = function (oldPoint) { return !oldPoint.touched &&\n                    oldPoint.options.x === optionsObject.x; };\n            }\n            matchingPoint = find(oldData, matcher);\n            // Add unmatched point as a new point\n            if (!matchingPoint) {\n                return void 0;\n            }\n        }\n        if (matchingPoint) {\n            pointIndex = matchingPoint && matchingPoint.index;\n            if (typeof pointIndex !== 'undefined') {\n                matchedById = true;\n            }\n        }\n        // Search for the same X in the existing data set\n        if (typeof pointIndex === 'undefined' && isNumber(x)) {\n            pointIndex = this.xData.indexOf(x, fromIndex);\n        }\n        // Reduce pointIndex if data is cropped\n        if (pointIndex !== -1 &&\n            typeof pointIndex !== 'undefined' &&\n            this.cropped) {\n            pointIndex = (pointIndex >= this.cropStart) ?\n                pointIndex - this.cropStart : pointIndex;\n        }\n        if (!matchedById &&\n            isNumber(pointIndex) &&\n            oldData[pointIndex] && oldData[pointIndex].touched) {\n            pointIndex = void 0;\n        }\n        return pointIndex;\n    };\n    /**\n     * Internal function called from setData. If the point count is the same\n     * as it was, or if there are overlapping X values, just run\n     * Point.update which is cheaper, allows animation, and keeps references\n     * to points. This also allows adding or removing points if the X-es\n     * don't match.\n     *\n     * @private\n     * @function Highcharts.Series#updateData\n     */\n    Series.prototype.updateData = function (data, animation) {\n        var options = this.options, dataSorting = options.dataSorting, oldData = this.points, pointsToAdd = [], requireSorting = this.requireSorting, equalLength = data.length === oldData.length;\n        var hasUpdatedByKey, i, point, lastIndex, succeeded = true;\n        this.xIncrement = null;\n        // Iterate the new data\n        data.forEach(function (pointOptions, i) {\n            var optionsObject = (defined(pointOptions) &&\n                this.pointClass.prototype.optionsToObject.call({ series: this }, pointOptions)) || {};\n            var pointIndex;\n            // Get the x of the new data point\n            var x = optionsObject.x, id = optionsObject.id;\n            if (id || isNumber(x)) {\n                pointIndex = this.findPointIndex(optionsObject, lastIndex);\n                // Matching X not found\n                // or used already due to ununique x values (#8995),\n                // add point (but later)\n                if (pointIndex === -1 ||\n                    typeof pointIndex === 'undefined') {\n                    pointsToAdd.push(pointOptions);\n                    // Matching X found, update\n                }\n                else if (oldData[pointIndex] &&\n                    pointOptions !== options.data[pointIndex]) {\n                    oldData[pointIndex].update(pointOptions, false, null, false);\n                    // Mark it touched, below we will remove all points that\n                    // are not touched.\n                    oldData[pointIndex].touched = true;\n                    // Speed optimize by only searching after last known\n                    // index. Performs ~20% bettor on large data sets.\n                    if (requireSorting) {\n                        lastIndex = pointIndex + 1;\n                    }\n                    // Point exists, no changes, don't remove it\n                }\n                else if (oldData[pointIndex]) {\n                    oldData[pointIndex].touched = true;\n                }\n                // If the length is equal and some of the nodes had a\n                // match in the same position, we don't want to remove\n                // non-matches.\n                if (!equalLength ||\n                    i !== pointIndex ||\n                    (dataSorting && dataSorting.enabled) ||\n                    this.hasDerivedData) {\n                    hasUpdatedByKey = true;\n                }\n            }\n            else {\n                // Gather all points that are not matched\n                pointsToAdd.push(pointOptions);\n            }\n        }, this);\n        // Remove points that don't exist in the updated data set\n        if (hasUpdatedByKey) {\n            i = oldData.length;\n            while (i--) {\n                point = oldData[i];\n                if (point && !point.touched && point.remove) {\n                    point.remove(false, animation);\n                }\n            }\n            // If we did not find keys (ids or x-values), and the length is the\n            // same, update one-to-one\n        }\n        else if (equalLength && (!dataSorting || !dataSorting.enabled)) {\n            data.forEach(function (point, i) {\n                // .update doesn't exist on a linked, hidden series (#3709)\n                // (#10187)\n                if (point !== oldData[i].y && (oldData[i].update)) {\n                    oldData[i].update(point, false, null, false);\n                }\n            });\n            // Don't add new points since those configs are used above\n            pointsToAdd.length = 0;\n            // Did not succeed in updating data\n        }\n        else {\n            succeeded = false;\n        }\n        oldData.forEach(function (point) {\n            if (point) {\n                point.touched = false;\n            }\n        });\n        if (!succeeded) {\n            return false;\n        }\n        // Add new points\n        pointsToAdd.forEach(function (point) {\n            this.addPoint(point, false, null, null, false);\n        }, this);\n        if (this.xIncrement === null &&\n            this.xData &&\n            this.xData.length) {\n            this.xIncrement = arrayMax(this.xData);\n            this.autoIncrement();\n        }\n        return true;\n    };\n    /**\n     * Apply a new set of data to the series and optionally redraw it. The\n     * new data array is passed by reference (except in case of\n     * `updatePoints`), and may later be mutated when updating the chart\n     * data.\n     *\n     * Note the difference in behaviour when setting the same amount of\n     * points, or a different amount of points, as handled by the\n     * `updatePoints` parameter.\n     *\n     * @sample highcharts/members/series-setdata/\n     *         Set new data from a button\n     * @sample highcharts/members/series-setdata-pie/\n     *         Set data in a pie\n     * @sample stock/members/series-setdata/\n     *         Set new data in Highcharts Stock\n     * @sample maps/members/series-setdata/\n     *         Set new data in Highmaps\n     *\n     * @function Highcharts.Series#setData\n     *\n     * @param {Array<Highcharts.PointOptionsType>} data\n     *        Takes an array of data in the same format as described under\n     *        `series.{type}.data` for the given series type, for example a\n     *        line series would take data in the form described under\n     *        [series.line.data](https://api.highcharts.com/highcharts/series.line.data).\n     *\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw the chart after the series is altered. If\n     *        doing more operations on the chart, it is a good idea to set\n     *        redraw to false and call {@link Chart#redraw} after.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        When the updated data is the same length as the existing data,\n     *        points will be updated by default, and animation visualizes\n     *        how the points are changed. Set false to disable animation, or\n     *        a configuration object to set duration or easing.\n     *\n     * @param {boolean} [updatePoints=true]\n     *        When this is true, points will be updated instead of replaced\n     *        whenever possible. This occurs a) when the updated data is the\n     *        same length as the existing data, b) when points are matched\n     *        by their id's, or c) when points can be matched by X values.\n     *        This allows updating with animation and performs better. In\n     *        this case, the original array is not passed by reference. Set\n     *        `false` to prevent.\n     */\n    Series.prototype.setData = function (data, redraw, animation, updatePoints) {\n        if (redraw === void 0) { redraw = true; }\n        var series = this, oldData = series.points, oldDataLength = (oldData && oldData.length) || 0, options = series.options, chart = series.chart, dataSorting = options.dataSorting, xAxis = series.xAxis, turboThreshold = options.turboThreshold, xData = this.xData, yData = this.yData, pointArrayMap = series.pointArrayMap, valueCount = pointArrayMap && pointArrayMap.length, keys = options.keys;\n        var i, pt, updatedData, indexOfX = 0, indexOfY = 1, firstPoint = null, copiedData;\n        if (!chart.options.chart.allowMutatingData) { // #4259\n            // Remove old reference\n            if (options.data) {\n                delete series.options.data;\n            }\n            if (series.userOptions.data) {\n                delete series.userOptions.data;\n            }\n            copiedData = merge(true, data);\n        }\n        data = copiedData || data || [];\n        var dataLength = data.length;\n        if (dataSorting && dataSorting.enabled) {\n            data = this.sortData(data);\n        }\n        // First try to run Point.update which is cheaper, allows animation,\n        // and keeps references to points.\n        if (chart.options.chart.allowMutatingData &&\n            updatePoints !== false &&\n            dataLength &&\n            oldDataLength &&\n            !series.cropped &&\n            !series.hasGroupedData &&\n            series.visible &&\n            // Soft updating has no benefit in boost, and causes JS error\n            // (#8355)\n            !series.boosted) {\n            updatedData = this.updateData(data, animation);\n        }\n        if (!updatedData) {\n            // Reset properties\n            series.xIncrement = null;\n            series.colorCounter = 0; // for series with colorByPoint (#1547)\n            // Update parallel arrays\n            this.parallelArrays.forEach(function (key) {\n                series[key + 'Data'].length = 0;\n            });\n            // In turbo mode, only one- or twodimensional arrays of numbers\n            // are allowed. The first value is tested, and we assume that\n            // all the rest are defined the same way. Although the 'for'\n            // loops are similar, they are repeated inside each if-else\n            // conditional for max performance.\n            if (turboThreshold && dataLength > turboThreshold) {\n                firstPoint = series.getFirstValidPoint(data);\n                if (isNumber(firstPoint)) { // assume all points are numbers\n                    for (i = 0; i < dataLength; i++) {\n                        xData[i] = this.autoIncrement();\n                        yData[i] = data[i];\n                    }\n                    // Assume all points are arrays when first point is\n                }\n                else if (isArray(firstPoint)) {\n                    if (valueCount) { // [x, low, high] or [x, o, h, l, c]\n                        if (firstPoint.length === valueCount) {\n                            for (i = 0; i < dataLength; i++) {\n                                xData[i] = this.autoIncrement();\n                                yData[i] = data[i];\n                            }\n                        }\n                        else {\n                            for (i = 0; i < dataLength; i++) {\n                                pt = data[i];\n                                xData[i] = pt[0];\n                                yData[i] =\n                                    pt.slice(1, valueCount + 1);\n                            }\n                        }\n                    }\n                    else { // [x, y]\n                        if (keys) {\n                            indexOfX = keys.indexOf('x');\n                            indexOfY = keys.indexOf('y');\n                            indexOfX = indexOfX >= 0 ? indexOfX : 0;\n                            indexOfY = indexOfY >= 0 ? indexOfY : 1;\n                        }\n                        if (firstPoint.length === 1) {\n                            indexOfY = 0;\n                        }\n                        if (indexOfX === indexOfY) {\n                            for (i = 0; i < dataLength; i++) {\n                                xData[i] = this.autoIncrement();\n                                yData[i] = data[i][indexOfY];\n                            }\n                        }\n                        else {\n                            for (i = 0; i < dataLength; i++) {\n                                pt = data[i];\n                                xData[i] = pt[indexOfX];\n                                yData[i] = pt[indexOfY];\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Highcharts expects configs to be numbers or arrays in\n                    // turbo mode\n                    error(12, false, chart);\n                }\n            }\n            else {\n                for (i = 0; i < dataLength; i++) {\n                    // stray commas in oldIE:\n                    if (typeof data[i] !== 'undefined') {\n                        pt = { series: series };\n                        series.pointClass.prototype.applyOptions.apply(pt, [data[i]]);\n                        series.updateParallelArrays(pt, i);\n                    }\n                }\n            }\n            // Forgetting to cast strings to numbers is a common caveat when\n            // handling CSV or JSON\n            if (yData && isString(yData[0])) {\n                error(14, true, chart);\n            }\n            series.data = [];\n            series.options.data = series.userOptions.data = data;\n            // destroy old points\n            i = oldDataLength;\n            while (i--) {\n                if (oldData[i] && (oldData[i].destroy)) {\n                    oldData[i].destroy();\n                }\n            }\n            // reset minRange (#878)\n            if (xAxis) {\n                xAxis.minRange = xAxis.userMinRange;\n            }\n            // redraw\n            series.isDirty = chart.isDirtyBox = true;\n            series.isDirtyData = !!oldData;\n            animation = false;\n        }\n        // Typically for pie series, points need to be processed and\n        // generated prior to rendering the legend\n        if (options.legendType === 'point') {\n            this.processData();\n            this.generatePoints();\n        }\n        if (redraw) {\n            chart.redraw(animation);\n        }\n    };\n    /**\n     * Internal function to sort series data\n     *\n     * @private\n     * @function Highcharts.Series#sortData\n     * @param {Array<Highcharts.PointOptionsType>} data\n     * Force data grouping.\n     */\n    Series.prototype.sortData = function (data) {\n        var series = this, options = series.options, dataSorting = options.dataSorting, sortKey = dataSorting.sortKey || 'y', getPointOptionsObject = function (series, pointOptions) {\n            return (defined(pointOptions) &&\n                series.pointClass.prototype.optionsToObject.call({\n                    series: series\n                }, pointOptions)) || {};\n        };\n        data.forEach(function (pointOptions, i) {\n            data[i] = getPointOptionsObject(series, pointOptions);\n            data[i].index = i;\n        }, this);\n        // Sorting\n        var sortedData = data.concat().sort(function (a, b) {\n            var aValue = getNestedProperty(sortKey, a);\n            var bValue = getNestedProperty(sortKey, b);\n            return bValue < aValue ? -1 : bValue > aValue ? 1 : 0;\n        });\n        // Set x value depending on the position in the array\n        sortedData.forEach(function (point, i) {\n            point.x = i;\n        }, this);\n        // Set the same x for linked series points if they don't have their\n        // own sorting\n        if (series.linkedSeries) {\n            series.linkedSeries.forEach(function (linkedSeries) {\n                var options = linkedSeries.options, seriesData = options.data;\n                if ((!options.dataSorting ||\n                    !options.dataSorting.enabled) &&\n                    seriesData) {\n                    seriesData.forEach(function (pointOptions, i) {\n                        seriesData[i] = getPointOptionsObject(linkedSeries, pointOptions);\n                        if (data[i]) {\n                            seriesData[i].x = data[i].x;\n                            seriesData[i].index = i;\n                        }\n                    });\n                    linkedSeries.setData(seriesData, false);\n                }\n            });\n        }\n        return data;\n    };\n    /**\n     * Internal function to process the data by cropping away unused data\n     * points if the series is longer than the crop threshold. This saves\n     * computing time for large series.\n     *\n     * @private\n     * @function Highcharts.Series#getProcessedData\n     * @param {boolean} [forceExtremesFromAll]\n     * Force getting extremes of a total series data range.\n     */\n    Series.prototype.getProcessedData = function (forceExtremesFromAll) {\n        var series = this, xAxis = series.xAxis, options = series.options, cropThreshold = options.cropThreshold, getExtremesFromAll = forceExtremesFromAll ||\n            series.getExtremesFromAll ||\n            options.getExtremesFromAll, // #4599\n        isCartesian = series.isCartesian, val2lin = xAxis && xAxis.val2lin, isLog = !!(xAxis && xAxis.logarithmic);\n        var croppedData, cropped, cropStart = 0, distance, closestPointRange, i, // loop variable\n        xExtremes, min, max, \n        // copied during slice operation:\n        processedXData = series.xData, processedYData = series.yData, throwOnUnsorted = series.requireSorting, updatingNames = false;\n        var dataLength = processedXData.length;\n        if (xAxis) {\n            // corrected for log axis (#3053)\n            xExtremes = xAxis.getExtremes();\n            min = xExtremes.min;\n            max = xExtremes.max;\n            updatingNames = !!(xAxis.categories && !xAxis.names.length);\n        }\n        // optionally filter out points outside the plot area\n        if (isCartesian &&\n            series.sorted &&\n            !getExtremesFromAll &&\n            (!cropThreshold ||\n                dataLength > cropThreshold ||\n                series.forceCrop)) {\n            // it's outside current extremes\n            if (processedXData[dataLength - 1] < min ||\n                processedXData[0] > max) {\n                processedXData = [];\n                processedYData = [];\n                // only crop if it's actually spilling out\n            }\n            else if (series.yData && (processedXData[0] < min ||\n                processedXData[dataLength - 1] > max)) {\n                croppedData = this.cropData(series.xData, series.yData, min, max);\n                processedXData = croppedData.xData;\n                processedYData = croppedData.yData;\n                cropStart = croppedData.start;\n                cropped = true;\n            }\n        }\n        // Find the closest distance between processed points\n        i = processedXData.length || 1;\n        while (--i) {\n            distance = (isLog ?\n                (val2lin(processedXData[i]) -\n                    val2lin(processedXData[i - 1])) :\n                (processedXData[i] -\n                    processedXData[i - 1]));\n            if (distance > 0 &&\n                (typeof closestPointRange === 'undefined' ||\n                    distance < closestPointRange)) {\n                closestPointRange = distance;\n                // Unsorted data is not supported by the line tooltip, as well\n                // as data grouping and navigation in Stock charts (#725) and\n                // width calculation of columns (#1900).\n                // Avoid warning during the premature processing pass in\n                // updateNames (#16104).\n            }\n            else if (distance < 0 && throwOnUnsorted && !updatingNames) {\n                error(15, false, series.chart);\n                throwOnUnsorted = false; // Only once\n            }\n        }\n        return {\n            xData: processedXData,\n            yData: processedYData,\n            cropped: cropped,\n            cropStart: cropStart,\n            closestPointRange: closestPointRange\n        };\n    };\n    /**\n     * Internal function to apply processed data.\n     * In Highcharts Stock, this function is extended to provide data grouping.\n     *\n     * @private\n     * @function Highcharts.Series#processData\n     * @param {boolean} [force]\n     * Force data grouping.\n     */\n    Series.prototype.processData = function (force) {\n        var series = this, xAxis = series.xAxis;\n        // If the series data or axes haven't changed, don't go through\n        // this. Return false to pass the message on to override methods\n        // like in data grouping.\n        if (series.isCartesian &&\n            !series.isDirty &&\n            !xAxis.isDirty &&\n            !series.yAxis.isDirty &&\n            !force) {\n            return false;\n        }\n        var processedData = series.getProcessedData();\n        // Record the properties\n        series.cropped = processedData.cropped; // undefined or true\n        series.cropStart = processedData.cropStart;\n        series.processedXData = processedData.xData;\n        series.processedYData = processedData.yData;\n        series.closestPointRange = (series.basePointRange = processedData.closestPointRange);\n        fireEvent(series, 'afterProcessData');\n    };\n    /**\n     * Iterate over xData and crop values between min and max. Returns\n     * object containing crop start/end cropped xData with corresponding\n     * part of yData, dataMin and dataMax within the cropped range.\n     *\n     * @private\n     * @function Highcharts.Series#cropData\n     */\n    Series.prototype.cropData = function (xData, yData, min, max, cropShoulder) {\n        var dataLength = xData.length;\n        var i, j, cropStart = 0, cropEnd = dataLength;\n        // line-type series need one point outside\n        cropShoulder = pick(cropShoulder, this.cropShoulder);\n        // iterate up to find slice start\n        for (i = 0; i < dataLength; i++) {\n            if (xData[i] >= min) {\n                cropStart = Math.max(0, i - cropShoulder);\n                break;\n            }\n        }\n        // proceed to find slice end\n        for (j = i; j < dataLength; j++) {\n            if (xData[j] > max) {\n                cropEnd = j + cropShoulder;\n                break;\n            }\n        }\n        return {\n            xData: xData.slice(cropStart, cropEnd),\n            yData: yData.slice(cropStart, cropEnd),\n            start: cropStart,\n            end: cropEnd\n        };\n    };\n    /**\n     * Generate the data point after the data has been processed by cropping\n     * away unused points and optionally grouped in Highcharts Stock.\n     *\n     * @private\n     * @function Highcharts.Series#generatePoints\n     */\n    Series.prototype.generatePoints = function () {\n        var series = this, options = series.options, dataOptions = (series.processedData || options.data), processedXData = series.processedXData, processedYData = series.processedYData, PointClass = series.pointClass, processedDataLength = processedXData.length, cropStart = series.cropStart || 0, hasGroupedData = series.hasGroupedData, keys = options.keys, points = [], groupCropStartIndex = (options.dataGrouping &&\n            options.dataGrouping.groupAll ?\n            cropStart :\n            0);\n        var dataLength, cursor, point, i, data = series.data;\n        if (!data && !hasGroupedData) {\n            var arr = [];\n            arr.length = dataOptions.length;\n            data = series.data = arr;\n        }\n        if (keys && hasGroupedData) {\n            // grouped data has already applied keys (#6590)\n            series.options.keys = false;\n        }\n        for (i = 0; i < processedDataLength; i++) {\n            cursor = cropStart + i;\n            if (!hasGroupedData) {\n                point = data[cursor];\n                // #970:\n                if (!point &&\n                    typeof dataOptions[cursor] !== 'undefined') {\n                    data[cursor] = point = (new PointClass()).init(series, dataOptions[cursor], processedXData[i]);\n                }\n            }\n            else {\n                // splat the y data in case of ohlc data array\n                point = (new PointClass()).init(series, [processedXData[i]].concat(splat(processedYData[i])));\n                point.dataGroup = series.groupMap[groupCropStartIndex + i];\n                if (point.dataGroup.options) {\n                    point.options = point.dataGroup.options;\n                    extend(point, point.dataGroup.options);\n                    // Collision of props and options (#9770)\n                    delete point.dataLabels;\n                }\n            }\n            if (point) { // #6279\n                /**\n                 * Contains the point's index in the `Series.points` array.\n                 *\n                 * @name Highcharts.Point#index\n                 * @type {number}\n                 * @readonly\n                 */\n                // For faster access in Point.update\n                point.index = hasGroupedData ?\n                    (groupCropStartIndex + i) : cursor;\n                points[i] = point;\n            }\n        }\n        // restore keys options (#6590)\n        series.options.keys = keys;\n        // Hide cropped-away points - this only runs when the number of\n        // points is above cropThreshold, or when swithching view from\n        // non-grouped data to grouped data (#637)\n        if (data &&\n            (processedDataLength !== (dataLength = data.length) ||\n                hasGroupedData)) {\n            for (i = 0; i < dataLength; i++) {\n                // when has grouped data, clear all points\n                if (i === cropStart && !hasGroupedData) {\n                    i += processedDataLength;\n                }\n                if (data[i]) {\n                    data[i].destroyElements();\n                    data[i].plotX = void 0; // #1003\n                }\n            }\n        }\n        /**\n         * Read only. An array containing those values converted to points.\n         * In case the series data length exceeds the `cropThreshold`, or if\n         * the data is grouped, `series.data` doesn't contain all the\n         * points. Also, in case a series is hidden, the `data` array may be\n         * empty. To access raw values, `series.options.data` will always be\n         * up to date. `Series.data` only contains the points that have been\n         * created on demand. To modify the data, use\n         * {@link Highcharts.Series#setData} or\n         * {@link Highcharts.Point#update}.\n         *\n         * @see Series.points\n         *\n         * @name Highcharts.Series#data\n         * @type {Array<Highcharts.Point>}\n         */\n        series.data = data;\n        /**\n         * An array containing all currently visible point objects. In case\n         * of cropping, the cropped-away points are not part of this array.\n         * The `series.points` array starts at `series.cropStart` compared\n         * to `series.data` and `series.options.data`. If however the series\n         * data is grouped, these can't be correlated one to one. To modify\n         * the data, use {@link Highcharts.Series#setData} or\n         * {@link Highcharts.Point#update}.\n         *\n         * @name Highcharts.Series#points\n         * @type {Array<Highcharts.Point>}\n         */\n        series.points = points;\n        fireEvent(this, 'afterGeneratePoints');\n    };\n    /**\n     * Get current X extremes for the visible data.\n     *\n     * @private\n     * @function Highcharts.Series#getXExtremes\n     * @param {Array<number>} xData\n     * The data to inspect. Defaults to the current data within the visible\n     * range.\n     */\n    Series.prototype.getXExtremes = function (xData) {\n        return {\n            min: arrayMin(xData),\n            max: arrayMax(xData)\n        };\n    };\n    /**\n     * Calculate Y extremes for the visible data. The result is returned\n     * as an object with `dataMin` and `dataMax` properties.\n     *\n     * @private\n     * @function Highcharts.Series#getExtremes\n     * @param {Array<number>} [yData]\n     * The data to inspect. Defaults to the current data within the visible\n     * range.\n     * @param {boolean} [forceExtremesFromAll]\n     * Force getting extremes of a total series data range.\n     */\n    Series.prototype.getExtremes = function (yData, forceExtremesFromAll) {\n        var xAxis = this.xAxis, yAxis = this.yAxis, xData = this.processedXData || this.xData, activeYData = [], \n        // Handle X outside the viewed area. This does not work with\n        // non-sorted data like scatter (#7639).\n        shoulder = this.requireSorting ? this.cropShoulder : 0, positiveValuesOnly = yAxis ? yAxis.positiveValuesOnly : false;\n        // #2117, need to compensate for log X axis\n        var xExtremes, validValue, withinRange, x, y, i, j, xMin = 0, xMax = 0, activeCounter = 0;\n        yData = yData || this.stackedYData || this.processedYData || [];\n        var yDataLength = yData.length;\n        if (xAxis) {\n            xExtremes = xAxis.getExtremes();\n            xMin = xExtremes.min;\n            xMax = xExtremes.max;\n        }\n        for (i = 0; i < yDataLength; i++) {\n            x = xData[i];\n            y = yData[i];\n            // For points within the visible range, including the first\n            // point outside the visible range (#7061), consider y extremes.\n            validValue = ((isNumber(y) || isArray(y)) &&\n                ((y.length || y > 0) || !positiveValuesOnly));\n            withinRange = (forceExtremesFromAll ||\n                this.getExtremesFromAll ||\n                this.options.getExtremesFromAll ||\n                this.cropped ||\n                !xAxis || // for colorAxis support\n                ((xData[i + shoulder] || x) >= xMin &&\n                    (xData[i - shoulder] || x) <= xMax));\n            if (validValue && withinRange) {\n                j = y.length;\n                if (j) { // array, like ohlc or range data\n                    while (j--) {\n                        if (isNumber(y[j])) { // #7380, #11513\n                            activeYData[activeCounter++] = y[j];\n                        }\n                    }\n                }\n                else {\n                    activeYData[activeCounter++] = y;\n                }\n            }\n        }\n        var dataExtremes = {\n            activeYData: activeYData,\n            dataMin: arrayMin(activeYData),\n            dataMax: arrayMax(activeYData)\n        };\n        fireEvent(this, 'afterGetExtremes', { dataExtremes: dataExtremes });\n        return dataExtremes;\n    };\n    /**\n     * Set the current data extremes as `dataMin` and `dataMax` on the\n     * Series item. Use this only when the series properties should be\n     * updated.\n     *\n     * @private\n     * @function Highcharts.Series#applyExtremes\n     */\n    Series.prototype.applyExtremes = function () {\n        var dataExtremes = this.getExtremes();\n        /**\n         * Contains the minimum value of the series' data point. Some series\n         * types like `networkgraph` do not support this property as they\n         * lack a `y`-value.\n         * @name Highcharts.Series#dataMin\n         * @type {number|undefined}\n         * @readonly\n         */\n        this.dataMin = dataExtremes.dataMin;\n        /**\n         * Contains the maximum value of the series' data point. Some series\n         * types like `networkgraph` do not support this property as they\n         * lack a `y`-value.\n         * @name Highcharts.Series#dataMax\n         * @type {number|undefined}\n         * @readonly\n         */\n        this.dataMax = dataExtremes.dataMax;\n        return dataExtremes;\n    };\n    /**\n     * Find and return the first non null point in the data\n     *\n     * @private\n     * @function Highcharts.Series.getFirstValidPoint\n     * @param {Array<Highcharts.PointOptionsType>} data\n     * Array of options for points\n     */\n    Series.prototype.getFirstValidPoint = function (data) {\n        var dataLength = data.length;\n        var i = 0, firstPoint = null;\n        while (firstPoint === null && i < dataLength) {\n            firstPoint = data[i];\n            i++;\n        }\n        return firstPoint;\n    };\n    /**\n     * Translate data points from raw data values to chart specific\n     * positioning data needed later in the `drawPoints` and `drawGraph`\n     * functions. This function can be overridden in plugins and custom\n     * series type implementations.\n     *\n     * @function Highcharts.Series#translate\n     *\n     * @emits Highcharts.Series#events:translate\n     */\n    Series.prototype.translate = function () {\n        if (!this.processedXData) { // hidden series\n            this.processData();\n        }\n        this.generatePoints();\n        var series = this, options = series.options, stacking = options.stacking, xAxis = series.xAxis, categories = xAxis.categories, enabledDataSorting = series.enabledDataSorting, yAxis = series.yAxis, points = series.points, dataLength = points.length, pointPlacement = series.pointPlacementToXValue(), // #7860\n        dynamicallyPlaced = Boolean(pointPlacement), threshold = options.threshold, stackThreshold = options.startFromThreshold ? threshold : 0, zoneAxis = this.zoneAxis || 'y';\n        var i, plotX, lastPlotX, stackIndicator, closestPointRangePx = Number.MAX_VALUE;\n        /**\n         * Plotted coordinates need to be within a limited range. Drawing\n         * too far outside the viewport causes various rendering issues\n         * (#3201, #3923, #7555).\n         * @private\n         */\n        function limitedRange(val) {\n            return clamp(val, -1e5, 1e5);\n        }\n        // Translate each point\n        for (i = 0; i < dataLength; i++) {\n            var point = points[i], xValue = point.x;\n            var pointStack = void 0, stackValues = void 0, yValue = point.y, yBottom = point.low;\n            var stack = stacking && yAxis.stacking && yAxis.stacking.stacks[(series.negStacks &&\n                yValue <\n                    (stackThreshold ? 0 : threshold) ?\n                '-' :\n                '') + series.stackKey];\n            if (yAxis.positiveValuesOnly &&\n                !yAxis.validatePositiveValue(yValue) ||\n                xAxis.positiveValuesOnly &&\n                    !xAxis.validatePositiveValue(xValue)) {\n                point.isNull = true;\n            }\n            /**\n             * The translated X value for the point in terms of pixels. Relative\n             * to the X axis position if the series has one, otherwise relative\n             * to the plot area. Depending on the series type this value might\n             * not be defined.\n             * @name Highcharts.Point#plotX\n             * @type {number|undefined}\n             */\n            point.plotX = plotX = correctFloat(// #5236\n            // Get the plotX translation\n            limitedRange(xAxis.translate(// #3923\n            xValue, 0, 0, 0, 1, pointPlacement, this.type === 'flags')) // #3923\n            );\n            // Calculate the bottom y value for stacked series\n            if (stacking &&\n                series.visible &&\n                stack &&\n                stack[xValue]) {\n                stackIndicator = series.getStackIndicator(stackIndicator, xValue, series.index);\n                if (!point.isNull && stackIndicator.key) {\n                    pointStack = stack[xValue];\n                    stackValues = pointStack.points[stackIndicator.key];\n                }\n                if (pointStack && isArray(stackValues)) {\n                    yBottom = stackValues[0];\n                    yValue = stackValues[1];\n                    if (yBottom === stackThreshold &&\n                        stackIndicator.key === stack[xValue].base) {\n                        yBottom = pick(isNumber(threshold) ? threshold : yAxis.min);\n                    }\n                    // #1200, #1232\n                    if (yAxis.positiveValuesOnly &&\n                        defined(yBottom) &&\n                        yBottom <= 0) {\n                        yBottom = void 0;\n                    }\n                    point.total = point.stackTotal = pick(pointStack.total);\n                    point.percentage = defined(point.y) && pointStack.total ?\n                        (point.y / pointStack.total * 100) : void 0;\n                    point.stackY = yValue;\n                    // Place the stack label\n                    // in case of variwide series (where widths of points are\n                    // different in most cases), stack labels are positioned\n                    // wrongly, so the call of the setOffset is omited here and\n                    // labels are correctly positioned later, at the end of the\n                    // variwide's translate function (#10962)\n                    if (!series.irregularWidths) {\n                        pointStack.setOffset(series.pointXOffset || 0, series.barW || 0, void 0, void 0, void 0, series.xAxis);\n                    }\n                }\n            }\n            // Set translated yBottom or remove it\n            point.yBottom = defined(yBottom) ?\n                limitedRange(yAxis.translate(yBottom, 0, 1, 0, 1)) :\n                void 0;\n            // General hook, used for Highcharts Stock compare and cumulative\n            if (series.dataModify) {\n                yValue = series.dataModify.modifyValue(yValue, i);\n            }\n            // Set the the plotY value, reset it for redraws\n            // #3201\n            point.plotY = void 0;\n            if (isNumber(yValue)) {\n                var translated = yAxis.translate(yValue, false, true, false, true);\n                if (typeof translated !== 'undefined') {\n                    /**\n                     * The translated Y value for the point in terms of pixels.\n                     * Relative to the Y axis position if the series has one,\n                     * otherwise relative to the plot area. Depending on the\n                     * series type this value might not be defined.\n                     * @name Highcharts.Point#plotY\n                     * @type {number|undefined}\n                     */\n                    point.plotY = limitedRange(translated);\n                }\n            }\n            point.isInside = this.isPointInside(point);\n            // Set client related positions for mouse tracking\n            point.clientX = dynamicallyPlaced ?\n                correctFloat(xAxis.translate(xValue, 0, 0, 0, 1, pointPlacement)) :\n                plotX; // #1514, #5383, #5518\n            // Negative points. For bubble charts, this means negative z\n            // values (#9728)\n            point.negative = point[zoneAxis] < (options[zoneAxis + 'Threshold'] ||\n                threshold ||\n                0);\n            // some API data\n            point.category = pick(categories && categories[point.x], point.x);\n            // Determine auto enabling of markers (#3635, #5099)\n            if (!point.isNull && point.visible !== false) {\n                if (typeof lastPlotX !== 'undefined') {\n                    closestPointRangePx = Math.min(closestPointRangePx, Math.abs(plotX - lastPlotX));\n                }\n                lastPlotX = plotX;\n            }\n            // Find point zone\n            point.zone = this.zones.length ? point.getZone() : void 0;\n            // Animate new points with data sorting\n            if (!point.graphic && series.group && enabledDataSorting) {\n                point.isNew = true;\n            }\n        }\n        series.closestPointRangePx = closestPointRangePx;\n        fireEvent(this, 'afterTranslate');\n    };\n    /**\n     * Return the series points with null points filtered out.\n     *\n     * @function Highcharts.Series#getValidPoints\n     *\n     * @param {Array<Highcharts.Point>} [points]\n     * The points to inspect, defaults to {@link Series.points}.\n     *\n     * @param {boolean} [insideOnly=false]\n     * Whether to inspect only the points that are inside the visible view.\n     *\n     * @param {boolean} [allowNull=false]\n     * Whether to allow null points to pass as valid points.\n     *\n     * @return {Array<Highcharts.Point>}\n     * The valid points.\n     */\n    Series.prototype.getValidPoints = function (points, insideOnly, allowNull) {\n        var chart = this.chart;\n        // #3916, #5029, #5085\n        return (points || this.points || []).filter(function (point) {\n            if (insideOnly && !chart.isInsidePlot(point.plotX, point.plotY, { inverted: chart.inverted })) {\n                return false;\n            }\n            return point.visible !== false &&\n                (allowNull || !point.isNull);\n        });\n    };\n    /**\n     * Get the clipping for the series. Could be called for a series to\n     * initiate animating the clip or to set the final clip (only width\n     * and x).\n     *\n     * @private\n     * @function Highcharts.Series#getClip\n     */\n    Series.prototype.getClipBox = function () {\n        var _a = this, chart = _a.chart, xAxis = _a.xAxis, yAxis = _a.yAxis;\n        // If no axes on the series, use global clipBox\n        var seriesBox = merge(chart.clipBox);\n        // Otherwise, use clipBox.width which is corrected for plotBorderWidth\n        // and clipOffset\n        if (xAxis && xAxis.len !== chart.plotSizeX) {\n            seriesBox.width = xAxis.len;\n        }\n        if (yAxis && yAxis.len !== chart.plotSizeY) {\n            seriesBox.height = yAxis.len;\n        }\n        return seriesBox;\n    };\n    /**\n     * Get the shared clip key, creating it if it doesn't exist.\n     *\n     * @private\n     * @function Highcharts.Series#getSharedClipKey\n     */\n    Series.prototype.getSharedClipKey = function () {\n        this.sharedClipKey = (this.options.xAxis || 0) + ',' +\n            (this.options.yAxis || 0);\n        return this.sharedClipKey;\n    };\n    /**\n     * Set the clipping for the series. For animated series the clip is later\n     * modified.\n     *\n     * @private\n     * @function Highcharts.Series#setClip\n     */\n    Series.prototype.setClip = function () {\n        var _a = this, chart = _a.chart, group = _a.group, markerGroup = _a.markerGroup, sharedClips = chart.sharedClips, renderer = chart.renderer, clipBox = this.getClipBox(), sharedClipKey = this.getSharedClipKey(); // #4526\n        var clipRect = sharedClips[sharedClipKey];\n        // If a clipping rectangle for the same set of axes does not exist,\n        // create it\n        if (!clipRect) {\n            sharedClips[sharedClipKey] = clipRect = renderer.clipRect(clipBox);\n            // When setting chart size, or when the series is rendered again before\n            // starting animating, in compliance to a responsive rule\n        }\n        else {\n            clipRect.animate(clipBox);\n        }\n        if (group) {\n            // When clip is false, reset to no clip after animation\n            group.clip(this.options.clip === false ? void 0 : clipRect);\n        }\n        // Unclip temporary animation clip\n        if (markerGroup) {\n            markerGroup.clip();\n        }\n    };\n    /**\n     * Animate in the series. Called internally twice. First with the `init`\n     * parameter set to true, which sets up the initial state of the\n     * animation. Then when ready, it is called with the `init` parameter\n     * undefined, in order to perform the actual animation.\n     *\n     * @function Highcharts.Series#animate\n     *\n     * @param {boolean} [init]\n     * Initialize the animation.\n     */\n    Series.prototype.animate = function (init) {\n        var _a = this, chart = _a.chart, group = _a.group, markerGroup = _a.markerGroup, inverted = chart.inverted, animation = animObject(this.options.animation), \n        // The key for temporary animation clips\n        animationClipKey = [\n            this.getSharedClipKey(),\n            animation.duration,\n            animation.easing,\n            animation.defer\n        ].join(',');\n        var animationClipRect = chart.sharedClips[animationClipKey], markerAnimationClipRect = chart.sharedClips[animationClipKey + 'm'];\n        // Initialize the animation. Set up the clipping rectangle.\n        if (init && group) {\n            var clipBox = this.getClipBox();\n            // Create temporary animation clips\n            if (!animationClipRect) {\n                clipBox.width = 0;\n                if (inverted) {\n                    clipBox.x = chart.plotHeight;\n                }\n                animationClipRect = chart.renderer.clipRect(clipBox);\n                chart.sharedClips[animationClipKey] = animationClipRect;\n                // The marker clip box. The number 99 is a safe margin to avoid\n                // markers being clipped during animation.\n                var markerClipBox = {\n                    x: inverted ? -99 : -99,\n                    y: inverted ? -99 : -99,\n                    width: inverted ? chart.plotWidth + 199 : 99,\n                    height: inverted ? 99 : chart.plotHeight + 199\n                };\n                markerAnimationClipRect = chart.renderer.clipRect(markerClipBox);\n                chart.sharedClips[animationClipKey + 'm'] = markerAnimationClipRect;\n            }\n            else {\n                // When height changes during animation, typically due to\n                // responsive settings\n                animationClipRect.attr('height', clipBox.height);\n            }\n            group.clip(animationClipRect);\n            if (markerGroup) {\n                markerGroup.clip(markerAnimationClipRect);\n            }\n            // Run the animation\n        }\n        else if (animationClipRect &&\n            // Only first series in this pane\n            !animationClipRect.hasClass('highcharts-animating')) {\n            var finalBox = this.getClipBox(), step_1 = animation.step;\n            // Only do this when there are actually markers\n            if (markerGroup && markerGroup.element.childNodes.length) {\n                // To provide as smooth animation as possible, update the marker\n                // group clipping in steps of the main group animation\n                animation.step = function (val, fx) {\n                    if (step_1) {\n                        step_1.apply(fx, arguments);\n                    }\n                    if (fx.prop === 'width' &&\n                        markerAnimationClipRect &&\n                        markerAnimationClipRect.element) {\n                        markerAnimationClipRect.attr(inverted ? 'height' : 'width', val + 99);\n                    }\n                };\n            }\n            animationClipRect\n                .addClass('highcharts-animating')\n                .animate(finalBox, animation);\n        }\n    };\n    /**\n     * This runs after animation to land on the final plot clipping.\n     *\n     * @private\n     * @function Highcharts.Series#afterAnimate\n     *\n     * @emits Highcharts.Series#event:afterAnimate\n     */\n    Series.prototype.afterAnimate = function () {\n        var _this = this;\n        this.setClip();\n        // Destroy temporary clip rectangles that are no longer in use\n        objectEach(this.chart.sharedClips, function (clip, key, sharedClips) {\n            if (clip && !_this.chart.container.querySelector(\"[clip-path=\\\"url(#\".concat(clip.id, \")\\\"]\"))) {\n                clip.destroy();\n                delete sharedClips[key];\n            }\n        });\n        this.finishedAnimating = true;\n        fireEvent(this, 'afterAnimate');\n    };\n    /**\n     * Draw the markers for line-like series types, and columns or other\n     * graphical representation for {@link Point} objects for other series\n     * types. The resulting element is typically stored as\n     * {@link Point.graphic}, and is created on the first call and updated\n     * and moved on subsequent calls.\n     *\n     * @function Highcharts.Series#drawPoints\n     */\n    Series.prototype.drawPoints = function (points) {\n        if (points === void 0) { points = this.points; }\n        var series = this, chart = series.chart, styledMode = chart.styledMode, colorAxis = series.colorAxis, options = series.options, seriesMarkerOptions = options.marker, markerGroup = series[series.specialGroup || 'markerGroup'], xAxis = series.xAxis, globallyEnabled = pick(seriesMarkerOptions.enabled, !xAxis || xAxis.isRadial ? true : null, \n        // Use larger or equal as radius is null in bubbles (#6321)\n        series.closestPointRangePx >= (seriesMarkerOptions.enabledThreshold *\n            seriesMarkerOptions.radius));\n        var i, point, graphic, verb, pointMarkerOptions, hasPointMarker, markerAttribs;\n        if (seriesMarkerOptions.enabled !== false ||\n            series._hasPointMarkers) {\n            for (i = 0; i < points.length; i++) {\n                point = points[i];\n                graphic = point.graphic;\n                verb = graphic ? 'animate' : 'attr';\n                pointMarkerOptions = point.marker || {};\n                hasPointMarker = !!point.marker;\n                var shouldDrawMarker = ((globallyEnabled &&\n                    typeof pointMarkerOptions.enabled === 'undefined') || pointMarkerOptions.enabled) && !point.isNull && point.visible !== false;\n                // only draw the point if y is defined\n                if (shouldDrawMarker) {\n                    // Shortcuts\n                    var symbol = pick(pointMarkerOptions.symbol, series.symbol, 'rect');\n                    markerAttribs = series.markerAttribs(point, (point.selected && 'select'));\n                    // Set starting position for point sliding animation.\n                    if (series.enabledDataSorting) {\n                        point.startXPos = xAxis.reversed ?\n                            -(markerAttribs.width || 0) :\n                            xAxis.width;\n                    }\n                    var isInside = point.isInside !== false;\n                    if (!graphic &&\n                        isInside &&\n                        ((markerAttribs.width || 0) > 0 || point.hasImage)) {\n                        /**\n                         * SVG graphic representing the point in the chart. In\n                         * some cases it may be a hidden graphic to improve\n                         * accessibility.\n                         *\n                         * Typically this is a simple shape, like a `rect`\n                         * for column charts or `path` for line markers, but\n                         * for some complex series types like boxplot or 3D\n                         * charts, the graphic may be a `g` element\n                         * containing other shapes. The graphic is generated\n                         * the first time {@link Series#drawPoints} runs,\n                         * and updated and moved on subsequent runs.\n                         *\n                         * @see Highcharts.Point#graphics\n                         *\n                         * @name Highcharts.Point#graphic\n                         * @type {Highcharts.SVGElement|undefined}\n                         */\n                        point.graphic = graphic = chart.renderer\n                            .symbol(symbol, markerAttribs.x, markerAttribs.y, markerAttribs.width, markerAttribs.height, hasPointMarker ?\n                            pointMarkerOptions :\n                            seriesMarkerOptions)\n                            .add(markerGroup);\n                        // Sliding animation for new points\n                        if (series.enabledDataSorting &&\n                            chart.hasRendered) {\n                            graphic.attr({\n                                x: point.startXPos\n                            });\n                            verb = 'animate';\n                        }\n                    }\n                    if (graphic && verb === 'animate') { // update\n                        // Since the marker group isn't clipped, each\n                        // individual marker must be toggled\n                        graphic[isInside ? 'show' : 'hide'](isInside)\n                            .animate(markerAttribs);\n                    }\n                    // Presentational attributes\n                    if (graphic) {\n                        var pointAttr = series.pointAttribs(point, ((styledMode || !point.selected) ?\n                            void 0 :\n                            'select'));\n                        if (!styledMode) {\n                            graphic[verb](pointAttr);\n                        }\n                        else if (colorAxis) { // #14114\n                            graphic['css']({\n                                fill: pointAttr.fill\n                            });\n                        }\n                    }\n                    if (graphic) {\n                        graphic.addClass(point.getClassName(), true);\n                    }\n                }\n                else if (graphic) {\n                    point.graphic = graphic.destroy(); // #1269\n                }\n            }\n        }\n    };\n    /**\n     * Get non-presentational attributes for a point. Used internally for\n     * both styled mode and classic. Can be overridden for different series\n     * types.\n     *\n     * @see Series#pointAttribs\n     *\n     * @function Highcharts.Series#markerAttribs\n     *\n     * @param {Highcharts.Point} point\n     * The Point to inspect.\n     *\n     * @param {string} [state]\n     * The state, can be either `hover`, `select` or undefined.\n     *\n     * @return {Highcharts.SVGAttributes}\n     * A hash containing those attributes that are not settable from CSS.\n     */\n    Series.prototype.markerAttribs = function (point, state) {\n        var seriesOptions = this.options, seriesMarkerOptions = seriesOptions.marker, pointMarkerOptions = point.marker || {}, symbol = (pointMarkerOptions.symbol ||\n            seriesMarkerOptions.symbol), attribs = {};\n        var seriesStateOptions, pointStateOptions, radius = pick(pointMarkerOptions.radius, seriesMarkerOptions && seriesMarkerOptions.radius);\n        // Handle hover and select states\n        if (state) {\n            seriesStateOptions = seriesMarkerOptions.states[state];\n            pointStateOptions = pointMarkerOptions.states &&\n                pointMarkerOptions.states[state];\n            radius = pick(pointStateOptions && pointStateOptions.radius, seriesStateOptions && seriesStateOptions.radius, radius && radius + (seriesStateOptions && seriesStateOptions.radiusPlus ||\n                0));\n        }\n        point.hasImage = symbol && symbol.indexOf('url') === 0;\n        if (point.hasImage) {\n            radius = 0; // and subsequently width and height is not set\n        }\n        var pos = point.pos();\n        if (isNumber(radius) && pos) {\n            attribs.x = pos[0] - radius;\n            attribs.y = pos[1] - radius;\n            if (seriesOptions.crisp) {\n                // Math.floor for #1843:\n                attribs.x = Math.floor(attribs.x);\n            }\n        }\n        if (radius) {\n            attribs.width = attribs.height = 2 * radius;\n        }\n        return attribs;\n    };\n    /**\n     * Internal function to get presentational attributes for each point.\n     * Unlike {@link Series#markerAttribs}, this function should return\n     * those attributes that can also be set in CSS. In styled mode,\n     * `pointAttribs` won't be called.\n     *\n     * @private\n     * @function Highcharts.Series#pointAttribs\n     *\n     * @param {Highcharts.Point} [point]\n     * The point instance to inspect.\n     *\n     * @param {string} [state]\n     * The point state, can be either `hover`, `select` or 'normal'. If\n     * undefined, normal state is assumed.\n     *\n     * @return {Highcharts.SVGAttributes}\n     * The presentational attributes to be set on the point.\n     */\n    Series.prototype.pointAttribs = function (point, state) {\n        var seriesMarkerOptions = this.options.marker, pointOptions = point && point.options, pointMarkerOptions = ((pointOptions && pointOptions.marker) || {}), pointColorOption = pointOptions && pointOptions.color, pointColor = point && point.color, zoneColor = point && point.zone && point.zone.color;\n        var seriesStateOptions, pointStateOptions, color = this.color, fill, stroke, strokeWidth = pick(pointMarkerOptions.lineWidth, seriesMarkerOptions.lineWidth), opacity = 1;\n        color = (pointColorOption ||\n            zoneColor ||\n            pointColor ||\n            color);\n        fill = (pointMarkerOptions.fillColor ||\n            seriesMarkerOptions.fillColor ||\n            color);\n        stroke = (pointMarkerOptions.lineColor ||\n            seriesMarkerOptions.lineColor ||\n            color);\n        // Handle hover and select states\n        state = state || 'normal';\n        if (state) {\n            seriesStateOptions = (seriesMarkerOptions.states[state] || {});\n            pointStateOptions = (pointMarkerOptions.states &&\n                pointMarkerOptions.states[state]) || {};\n            strokeWidth = pick(pointStateOptions.lineWidth, seriesStateOptions.lineWidth, strokeWidth + pick(pointStateOptions.lineWidthPlus, seriesStateOptions.lineWidthPlus, 0));\n            fill = (pointStateOptions.fillColor ||\n                seriesStateOptions.fillColor ||\n                fill);\n            stroke = (pointStateOptions.lineColor ||\n                seriesStateOptions.lineColor ||\n                stroke);\n            opacity = pick(pointStateOptions.opacity, seriesStateOptions.opacity, opacity);\n        }\n        return {\n            'stroke': stroke,\n            'stroke-width': strokeWidth,\n            'fill': fill,\n            'opacity': opacity\n        };\n    };\n    /**\n     * Clear DOM objects and free up memory.\n     *\n     * @private\n     * @function Highcharts.Series#destroy\n     *\n     * @emits Highcharts.Series#event:destroy\n     */\n    Series.prototype.destroy = function (keepEventsForUpdate) {\n        var series = this, chart = series.chart, issue134 = /AppleWebKit\\/533/.test(win.navigator.userAgent), data = series.data || [];\n        var destroy, i, point, axis;\n        // add event hook\n        fireEvent(series, 'destroy', { keepEventsForUpdate: keepEventsForUpdate });\n        // remove events\n        this.removeEvents(keepEventsForUpdate);\n        // erase from axes\n        (series.axisTypes || []).forEach(function (AXIS) {\n            axis = series[AXIS];\n            if (axis && axis.series) {\n                erase(axis.series, series);\n                axis.isDirty = axis.forceRedraw = true;\n            }\n        });\n        // remove legend items\n        if (series.legendItem) {\n            series.chart.legend.destroyItem(series);\n        }\n        // destroy all points with their elements\n        i = data.length;\n        while (i--) {\n            point = data[i];\n            if (point && point.destroy) {\n                point.destroy();\n            }\n        }\n        if (series.clips) {\n            series.clips.forEach(function (clip) { return clip.destroy(); });\n        }\n        // Clear the animation timeout if we are destroying the series\n        // during initial animation\n        U.clearTimeout(series.animationTimeout);\n        // Destroy all SVGElements associated to the series\n        objectEach(series, function (val, prop) {\n            // Survive provides a hook for not destroying\n            if (val instanceof SVGElement && !val.survive) {\n                // issue 134 workaround\n                destroy = issue134 && prop === 'group' ?\n                    'hide' :\n                    'destroy';\n                val[destroy]();\n            }\n        });\n        // remove from hoverSeries\n        if (chart.hoverSeries === series) {\n            chart.hoverSeries = void 0;\n        }\n        erase(chart.series, series);\n        chart.orderSeries();\n        // clear all members\n        objectEach(series, function (val, prop) {\n            if (!keepEventsForUpdate || prop !== 'hcEvents') {\n                delete series[prop];\n            }\n        });\n    };\n    /**\n     * Clip the graphs into zones for colors and styling.\n     *\n     * @private\n     * @function Highcharts.Series#applyZones\n     */\n    Series.prototype.applyZones = function () {\n        var series = this, chart = this.chart, renderer = chart.renderer, zones = this.zones, clips = (this.clips || []), graph = this.graph, area = this.area, plotSizeMax = Math.max(chart.plotWidth, chart.plotHeight), axis = this[(this.zoneAxis || 'y') + 'Axis'], inverted = chart.inverted;\n        var translatedFrom, translatedTo, clipAttr, extremes, reversed, horiz, pxRange, pxPosMin, pxPosMax, zoneArea, zoneGraph, ignoreZones = false;\n        if (zones.length &&\n            (graph || area) &&\n            axis &&\n            typeof axis.min !== 'undefined') {\n            reversed = axis.reversed;\n            horiz = axis.horiz;\n            // The use of the Color Threshold assumes there are no gaps\n            // so it is safe to hide the original graph and area\n            // unless it is not waterfall series, then use showLine property\n            // to set lines between columns to be visible (#7862)\n            if (graph && !this.showLine) {\n                graph.hide();\n            }\n            if (area) {\n                area.hide();\n            }\n            // Create the clips\n            extremes = axis.getExtremes();\n            zones.forEach(function (threshold, i) {\n                translatedFrom = reversed ?\n                    (horiz ? chart.plotWidth : 0) :\n                    (horiz ? 0 : (axis.toPixels(extremes.min) || 0));\n                translatedFrom = clamp(pick(translatedTo, translatedFrom), 0, plotSizeMax);\n                translatedTo = clamp(Math.round(axis.toPixels(pick(threshold.value, extremes.max), true) || 0), 0, plotSizeMax);\n                if (ignoreZones) {\n                    translatedFrom = translatedTo =\n                        axis.toPixels(extremes.max);\n                }\n                pxRange = Math.abs(translatedFrom - translatedTo);\n                pxPosMin = Math.min(translatedFrom, translatedTo);\n                pxPosMax = Math.max(translatedFrom, translatedTo);\n                if (axis.isXAxis) {\n                    clipAttr = {\n                        x: inverted ? pxPosMax : pxPosMin,\n                        y: 0,\n                        width: pxRange,\n                        height: plotSizeMax\n                    };\n                    if (!horiz) {\n                        clipAttr.x = chart.plotHeight - clipAttr.x;\n                    }\n                }\n                else {\n                    clipAttr = {\n                        x: 0,\n                        y: inverted ? pxPosMax : pxPosMin,\n                        width: plotSizeMax,\n                        height: pxRange\n                    };\n                    if (horiz) {\n                        clipAttr.y = chart.plotWidth - clipAttr.y;\n                    }\n                }\n                // VML SUPPPORT\n                if (inverted && renderer.isVML) {\n                    if (axis.isXAxis) {\n                        clipAttr = {\n                            x: 0,\n                            y: reversed ? pxPosMin : pxPosMax,\n                            height: clipAttr.width,\n                            width: chart.chartWidth\n                        };\n                    }\n                    else {\n                        clipAttr = {\n                            x: (clipAttr.y -\n                                chart.plotLeft -\n                                chart.spacingBox.x),\n                            y: 0,\n                            width: clipAttr.height,\n                            height: chart.chartHeight\n                        };\n                    }\n                }\n                // END OF VML SUPPORT\n                if (clips[i]) {\n                    clips[i].animate(clipAttr);\n                }\n                else {\n                    clips[i] = renderer.clipRect(clipAttr);\n                }\n                // when no data, graph zone is not applied and after setData\n                // clip was ignored. As a result, it should be applied each\n                // time.\n                zoneArea = series['zone-area-' + i];\n                zoneGraph = series['zone-graph-' + i];\n                if (graph && zoneGraph) {\n                    zoneGraph.clip(clips[i]);\n                }\n                if (area && zoneArea) {\n                    zoneArea.clip(clips[i]);\n                }\n                // if this zone extends out of the axis, ignore the others\n                ignoreZones = threshold.value > extremes.max;\n                // Clear translatedTo for indicators\n                if (series.resetZones && translatedTo === 0) {\n                    translatedTo = void 0;\n                }\n            });\n            this.clips = clips;\n        }\n        else if (series.visible) {\n            // If zones were removed, restore graph and area\n            if (graph) {\n                graph.show();\n            }\n            if (area) {\n                area.show();\n            }\n        }\n    };\n    /**\n     * General abstraction for creating plot groups like series.group,\n     * series.dataLabelsGroup and series.markerGroup. On subsequent calls,\n     * the group will only be adjusted to the updated plot size.\n     *\n     * @private\n     * @function Highcharts.Series#plotGroup\n     */\n    Series.prototype.plotGroup = function (prop, name, visibility, zIndex, parent) {\n        var group = this[prop];\n        var isNew = !group, attrs = {\n            visibility: visibility,\n            zIndex: zIndex || 0.1 // IE8 and pointer logic use this\n        };\n        // Avoid setting undefined opacity, or in styled mode\n        if (typeof this.opacity !== 'undefined' &&\n            !this.chart.styledMode && this.state !== 'inactive' // #13719\n        ) {\n            attrs.opacity = this.opacity;\n        }\n        // Generate it on first call\n        if (isNew) {\n            this[prop] = group = this.chart.renderer\n                .g()\n                .add(parent);\n        }\n        // Add the class names, and replace existing ones as response to\n        // Series.update (#6660)\n        group.addClass(('highcharts-' + name +\n            ' highcharts-series-' + this.index +\n            ' highcharts-' + this.type + '-series ' +\n            (defined(this.colorIndex) ?\n                'highcharts-color-' + this.colorIndex + ' ' :\n                '') +\n            (this.options.className || '') +\n            (group.hasClass('highcharts-tracker') ?\n                ' highcharts-tracker' :\n                '')), true);\n        // Place it on first and subsequent (redraw) calls\n        group.attr(attrs)[isNew ? 'attr' : 'animate'](this.getPlotBox(name));\n        return group;\n    };\n    /**\n     * Get the translation and scale for the plot area of this series.\n     *\n     * @function Highcharts.Series#getPlotBox\n     */\n    Series.prototype.getPlotBox = function (name) {\n        var horAxis = this.xAxis, vertAxis = this.yAxis;\n        var chart = this.chart, inverted = (chart.inverted &&\n            !chart.polar &&\n            horAxis &&\n            this.invertible !== false &&\n            name === 'series');\n        // Swap axes for inverted (#2339)\n        if (chart.inverted) {\n            horAxis = vertAxis;\n            vertAxis = this.xAxis;\n        }\n        return {\n            translateX: horAxis ? horAxis.left : chart.plotLeft,\n            translateY: vertAxis ? vertAxis.top : chart.plotTop,\n            rotation: inverted ? 90 : 0,\n            rotationOriginX: inverted ?\n                (horAxis.len - vertAxis.len) / 2 :\n                0,\n            rotationOriginY: inverted ?\n                (horAxis.len + vertAxis.len) / 2 :\n                0,\n            scaleX: inverted ? -1 : 1,\n            scaleY: 1\n        };\n    };\n    /**\n     * Removes the event handlers attached previously with addEvents.\n     * @private\n     * @function Highcharts.Series#removeEvents\n     */\n    Series.prototype.removeEvents = function (keepEventsForUpdate) {\n        var series = this;\n        if (!keepEventsForUpdate) {\n            // remove all events\n            removeEvent(series);\n        }\n        if (series.eventsToUnbind.length) {\n            // remove only internal events for proper update\n            // #12355 - solves problem with multiple destroy events\n            series.eventsToUnbind.forEach(function (unbind) {\n                unbind();\n            });\n            series.eventsToUnbind.length = 0;\n        }\n    };\n    /**\n     * Render the graph and markers. Called internally when first rendering\n     * and later when redrawing the chart. This function can be extended in\n     * plugins, but normally shouldn't be called directly.\n     *\n     * @function Highcharts.Series#render\n     *\n     * @emits Highcharts.Series#event:afterRender\n     */\n    Series.prototype.render = function () {\n        var series = this, chart = series.chart, options = series.options, animOptions = animObject(options.animation), visibility = series.visible ?\n            'inherit' : 'hidden', // #2597\n        zIndex = options.zIndex, hasRendered = series.hasRendered, chartSeriesGroup = chart.seriesGroup, inverted = chart.inverted;\n        // Animation doesn't work in IE8 quirks when the group div is\n        // hidden, and looks bad in other oldIE\n        var animDuration = (!series.finishedAnimating && chart.renderer.isSVG) ?\n            animOptions.duration : 0;\n        fireEvent(this, 'render');\n        // the group\n        var group = series.plotGroup('group', 'series', visibility, zIndex, chartSeriesGroup);\n        series.markerGroup = series.plotGroup('markerGroup', 'markers', visibility, zIndex, chartSeriesGroup);\n        // Initial clipping, applies to columns etc. (#3839).\n        if (options.clip !== false) {\n            series.setClip();\n        }\n        // Initialize the animation\n        if (series.animate && animDuration) {\n            series.animate(true);\n        }\n        // Draw the graph if any\n        if (series.drawGraph) {\n            series.drawGraph();\n            series.applyZones();\n        }\n        // Draw the points\n        if (series.visible) {\n            series.drawPoints();\n        }\n        // Draw the data labels\n        if (series.drawDataLabels) {\n            series.drawDataLabels();\n        }\n        // In pie charts, slices are added to the DOM, but actual rendering\n        // is postponed until labels reserved their space\n        if (series.redrawPoints) {\n            series.redrawPoints();\n        }\n        // draw the mouse tracking area\n        if (series.drawTracker &&\n            series.options.enableMouseTracking !== false) {\n            series.drawTracker();\n        }\n        // Run the animation\n        if (series.animate && animDuration) {\n            series.animate();\n        }\n        // Call the afterAnimate function on animation complete (but don't\n        // overwrite the animation.complete option which should be available\n        // to the user).\n        if (!hasRendered) {\n            // Additional time if defer is defined before afterAnimate\n            // will be triggered\n            if (animDuration && animOptions.defer) {\n                animDuration += animOptions.defer;\n            }\n            series.animationTimeout = syncTimeout(function () {\n                series.afterAnimate();\n            }, animDuration || 0);\n        }\n        // Means data is in accordance with what you see\n        series.isDirty = false;\n        // (See #322) series.isDirty = series.isDirtyData = false; // means\n        // data is in accordance with what you see\n        series.hasRendered = true;\n        fireEvent(series, 'afterRender');\n    };\n    /**\n     * Redraw the series. This function is called internally from\n     * `chart.redraw` and normally shouldn't be called directly.\n     * @private\n     * @function Highcharts.Series#redraw\n     */\n    Series.prototype.redraw = function () {\n        // Cache it here as it is set to false in render, but used after\n        var wasDirty = this.isDirty || this.isDirtyData;\n        this.translate();\n        this.render();\n        if (wasDirty) { // #3868, #3945\n            delete this.kdTree;\n        }\n    };\n    /**\n     * Find the nearest point from a pointer event. This applies to series that\n     * use k-d-trees to get the nearest point. Native pointer events must be\n     * normalized using `Pointer.normalize`, that adds `chartX` and `chartY`\n     * properties.\n     *\n     * @sample highcharts/demo/synchronized-charts\n     *         Synchronized charts with tooltips\n     *\n     * @function Highcharts.Series#searchPoint\n     *\n     * @param {Highcharts.PointerEvent} e\n     *        The normalized pointer event\n     * @param {boolean} [compareX=false]\n     *        Search only by the X value, not Y\n     *\n     * @return {Point|undefined}\n     *        The closest point to the pointer event\n     */\n    Series.prototype.searchPoint = function (e, compareX) {\n        var series = this, xAxis = series.xAxis, yAxis = series.yAxis, inverted = series.chart.inverted;\n        return this.searchKDTree({\n            clientX: inverted ?\n                xAxis.len - e.chartY + xAxis.pos :\n                e.chartX - xAxis.pos,\n            plotY: inverted ?\n                yAxis.len - e.chartX + yAxis.pos :\n                e.chartY - yAxis.pos\n        }, compareX, e);\n    };\n    /**\n     * Build the k-d-tree that is used by mouse and touch interaction to get\n     * the closest point. Line-like series typically have a one-dimensional\n     * tree where points are searched along the X axis, while scatter-like\n     * series typically search in two dimensions, X and Y.\n     *\n     * @private\n     * @function Highcharts.Series#buildKDTree\n     */\n    Series.prototype.buildKDTree = function (e) {\n        // Prevent multiple k-d-trees from being built simultaneously\n        // (#6235)\n        this.buildingKdTree = true;\n        var series = this, dimensions = series.options.findNearestPointBy\n            .indexOf('y') > -1 ? 2 : 1;\n        /**\n         * Internal function\n         * @private\n         */\n        function _kdtree(points, depth, dimensions) {\n            var length = points && points.length;\n            var axis, median;\n            if (length) {\n                // alternate between the axis\n                axis = series.kdAxisArray[depth % dimensions];\n                // sort point array\n                points.sort(function (a, b) {\n                    return a[axis] - b[axis];\n                });\n                median = Math.floor(length / 2);\n                // build and return nod\n                return {\n                    point: points[median],\n                    left: _kdtree(points.slice(0, median), depth + 1, dimensions),\n                    right: _kdtree(points.slice(median + 1), depth + 1, dimensions)\n                };\n            }\n        }\n        /**\n         * Start the recursive build process with a clone of the points\n         * array and null points filtered out. (#3873)\n         * @private\n         */\n        function startRecursive() {\n            series.kdTree = _kdtree(series.getValidPoints(null, \n            // For line-type series restrict to plot area, but\n            // column-type series not (#3916, #4511)\n            !series.directTouch), dimensions, dimensions);\n            series.buildingKdTree = false;\n        }\n        delete series.kdTree;\n        // For testing tooltips, don't build async. Also if touchstart, we\n        // may be dealing with click events on mobile, so don't delay\n        // (#6817).\n        syncTimeout(startRecursive, series.options.kdNow || (e && e.type === 'touchstart') ? 0 : 1);\n    };\n    /**\n     * @private\n     * @function Highcharts.Series#searchKDTree\n     */\n    Series.prototype.searchKDTree = function (point, compareX, e) {\n        var series = this, kdX = this.kdAxisArray[0], kdY = this.kdAxisArray[1], kdComparer = compareX ? 'distX' : 'dist', kdDimensions = series.options.findNearestPointBy\n            .indexOf('y') > -1 ? 2 : 1;\n        /**\n         * Set the one and two dimensional distance on the point object.\n         * @private\n         */\n        function setDistance(p1, p2) {\n            var x = (defined(p1[kdX]) &&\n                defined(p2[kdX])) ?\n                Math.pow(p1[kdX] - p2[kdX], 2) :\n                null, y = (defined(p1[kdY]) &&\n                defined(p2[kdY])) ?\n                Math.pow(p1[kdY] - p2[kdY], 2) :\n                null, r = (x || 0) + (y || 0);\n            p2.dist = defined(r) ? Math.sqrt(r) : Number.MAX_VALUE;\n            p2.distX = defined(x) ? Math.sqrt(x) : Number.MAX_VALUE;\n        }\n        /**\n         * @private\n         */\n        function _search(search, tree, depth, dimensions) {\n            var point = tree.point, axis = series.kdAxisArray[depth % dimensions];\n            var nPoint1, nPoint2, ret = point;\n            setDistance(search, point);\n            // Pick side based on distance to splitting point\n            var tdist = search[axis] - point[axis], sideA = tdist < 0 ? 'left' : 'right', sideB = tdist < 0 ? 'right' : 'left';\n            // End of tree\n            if (tree[sideA]) {\n                nPoint1 = _search(search, tree[sideA], depth + 1, dimensions);\n                ret = (nPoint1[kdComparer] <\n                    ret[kdComparer] ?\n                    nPoint1 :\n                    point);\n            }\n            if (tree[sideB]) {\n                // compare distance to current best to splitting point to\n                // decide whether to check side B or not\n                if (Math.sqrt(tdist * tdist) < ret[kdComparer]) {\n                    nPoint2 = _search(search, tree[sideB], depth + 1, dimensions);\n                    ret = (nPoint2[kdComparer] <\n                        ret[kdComparer] ?\n                        nPoint2 :\n                        ret);\n                }\n            }\n            return ret;\n        }\n        if (!this.kdTree && !this.buildingKdTree) {\n            this.buildKDTree(e);\n        }\n        if (this.kdTree) {\n            return _search(point, this.kdTree, kdDimensions, kdDimensions);\n        }\n    };\n    /**\n     * @private\n     * @function Highcharts.Series#pointPlacementToXValue\n     */\n    Series.prototype.pointPlacementToXValue = function () {\n        var _a = this, _b = _a.options, pointPlacement = _b.pointPlacement, pointRange = _b.pointRange, axis = _a.xAxis;\n        var factor = pointPlacement;\n        // Point placement is relative to each series pointRange (#5889)\n        if (factor === 'between') {\n            factor = axis.reversed ? -0.5 : 0.5; // #11955\n        }\n        return isNumber(factor) ?\n            factor * (pointRange || axis.pointRange) :\n            0;\n    };\n    /**\n     * @private\n     * @function Highcharts.Series#isPointInside\n     */\n    Series.prototype.isPointInside = function (point) {\n        var _a = this, chart = _a.chart, xAxis = _a.xAxis, yAxis = _a.yAxis, isInside = (typeof point.plotY !== 'undefined' &&\n            typeof point.plotX !== 'undefined' &&\n            point.plotY >= 0 &&\n            point.plotY <= (yAxis ? yAxis.len : chart.plotHeight) &&\n            point.plotX >= 0 &&\n            point.plotX <= (xAxis ? xAxis.len : chart.plotWidth));\n        return isInside;\n    };\n    /**\n     * Draw the tracker object that sits above all data labels and markers to\n     * track mouse events on the graph or points. For the line type charts\n     * the tracker uses the same graphPath, but with a greater stroke width\n     * for better control.\n     * @private\n     */\n    Series.prototype.drawTracker = function () {\n        var series = this, options = series.options, trackByArea = options.trackByArea, trackerPath = [].concat(trackByArea ?\n            series.areaPath :\n            series.graphPath), \n        // trackerPathLength = trackerPath.length,\n        chart = series.chart, pointer = chart.pointer, renderer = chart.renderer, snap = chart.options.tooltip.snap, tracker = series.tracker, onMouseOver = function (e) {\n            if (chart.hoverSeries !== series) {\n                series.onMouseOver();\n            }\n        }, \n        /*\n         * Empirical lowest possible opacities for TRACKER_FILL for an\n         * element to stay invisible but clickable\n         * IE6: 0.002\n         * IE7: 0.002\n         * IE8: 0.002\n         * IE9: 0.00000000001 (unlimited)\n         * IE10: 0.0001 (exporting only)\n         * FF: 0.00000000001 (unlimited)\n         * Chrome: 0.000001\n         * Safari: 0.000001\n         * Opera: 0.00000000001 (unlimited)\n         */\n        TRACKER_FILL = 'rgba(192,192,192,' + (svg ? 0.0001 : 0.002) + ')';\n        var i;\n        // Draw the tracker\n        if (tracker) {\n            tracker.attr({ d: trackerPath });\n        }\n        else if (series.graph) { // create\n            series.tracker = renderer.path(trackerPath)\n                .attr({\n                visibility: series.visible ? 'inherit' : 'hidden',\n                zIndex: 2\n            })\n                .addClass(trackByArea ?\n                'highcharts-tracker-area' :\n                'highcharts-tracker-line')\n                .add(series.group);\n            if (!chart.styledMode) {\n                series.tracker.attr({\n                    'stroke-linecap': 'round',\n                    'stroke-linejoin': 'round',\n                    stroke: TRACKER_FILL,\n                    fill: trackByArea ? TRACKER_FILL : 'none',\n                    'stroke-width': series.graph.strokeWidth() +\n                        (trackByArea ? 0 : 2 * snap)\n                });\n            }\n            // The tracker is added to the series group, which is clipped, but\n            // is covered by the marker group. So the marker group also needs to\n            // capture events.\n            [\n                series.tracker,\n                series.markerGroup,\n                series.dataLabelsGroup\n            ].forEach(function (tracker) {\n                if (tracker) {\n                    tracker.addClass('highcharts-tracker')\n                        .on('mouseover', onMouseOver)\n                        .on('mouseout', function (e) {\n                        pointer.onTrackerMouseOut(e);\n                    });\n                    if (options.cursor && !chart.styledMode) {\n                        tracker.css({ cursor: options.cursor });\n                    }\n                    if (hasTouch) {\n                        tracker.on('touchstart', onMouseOver);\n                    }\n                }\n            });\n        }\n        fireEvent(this, 'afterDrawTracker');\n    };\n    /**\n     * Add a point to the series after render time. The point can be added at\n     * the end, or by giving it an X value, to the start or in the middle of the\n     * series.\n     *\n     * @sample highcharts/members/series-addpoint-append/\n     *         Append point\n     * @sample highcharts/members/series-addpoint-append-and-shift/\n     *         Append and shift\n     * @sample highcharts/members/series-addpoint-x-and-y/\n     *         Both X and Y values given\n     * @sample highcharts/members/series-addpoint-pie/\n     *         Append pie slice\n     * @sample stock/members/series-addpoint/\n     *         Append 100 points in Highcharts Stock\n     * @sample stock/members/series-addpoint-shift/\n     *         Append and shift in Highcharts Stock\n     * @sample maps/members/series-addpoint/\n     *         Add a point in Highmaps\n     *\n     * @function Highcharts.Series#addPoint\n     *\n     * @param {Highcharts.PointOptionsType} options\n     *        The point options. If options is a single number, a point with\n     *        that y value is appended to the series. If it is an array, it will\n     *        be interpreted as x and y values respectively. If it is an\n     *        object, advanced options as outlined under `series.data` are\n     *        applied.\n     *\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw the chart after the point is added. When adding\n     *        more than one point, it is highly recommended that the redraw\n     *        option be set to false, and instead {@link Chart#redraw} is\n     *        explicitly called after the adding of points is finished.\n     *        Otherwise, the chart will redraw after adding each point.\n     *\n     * @param {boolean} [shift=false]\n     *        If true, a point is shifted off the start of the series as one is\n     *        appended to the end.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        Whether to apply animation, and optionally animation\n     *        configuration.\n     *\n     * @param {boolean} [withEvent=true]\n     *        Used internally, whether to fire the series `addPoint` event.\n     *\n     * @emits Highcharts.Series#event:addPoint\n     */\n    Series.prototype.addPoint = function (options, redraw, shift, animation, withEvent) {\n        var series = this, seriesOptions = series.options, data = series.data, chart = series.chart, xAxis = series.xAxis, names = xAxis && xAxis.hasNames && xAxis.names, dataOptions = seriesOptions.data, xData = series.xData;\n        var isInTheMiddle, i;\n        // Optional redraw, defaults to true\n        redraw = pick(redraw, true);\n        // Get options and push the point to xData, yData and series.options. In\n        // series.generatePoints the Point instance will be created on demand\n        // and pushed to the series.data array.\n        var point = { series: series };\n        series.pointClass.prototype.applyOptions.apply(point, [options]);\n        var x = point.x;\n        // Get the insertion point\n        i = xData.length;\n        if (series.requireSorting && x < xData[i - 1]) {\n            isInTheMiddle = true;\n            while (i && xData[i - 1] > x) {\n                i--;\n            }\n        }\n        // Insert undefined item\n        series.updateParallelArrays(point, 'splice', i, 0, 0);\n        // Update it\n        series.updateParallelArrays(point, i);\n        if (names && point.name) {\n            names[x] = point.name;\n        }\n        dataOptions.splice(i, 0, options);\n        if (isInTheMiddle ||\n            // When processedData is present we need to splice an empty slot\n            // into series.data, otherwise generatePoints won't pick it up.\n            series.processedData) {\n            series.data.splice(i, 0, null);\n            series.processData();\n        }\n        // Generate points to be added to the legend (#1329)\n        if (seriesOptions.legendType === 'point') {\n            series.generatePoints();\n        }\n        // Shift the first point off the parallel arrays\n        if (shift) {\n            if (data[0] && (data[0].remove)) {\n                data[0].remove(false);\n            }\n            else {\n                data.shift();\n                series.updateParallelArrays(point, 'shift');\n                dataOptions.shift();\n            }\n        }\n        // Fire event\n        if (withEvent !== false) {\n            fireEvent(series, 'addPoint', { point: point });\n        }\n        // redraw\n        series.isDirty = true;\n        series.isDirtyData = true;\n        if (redraw) {\n            chart.redraw(animation); // Animation is set anyway on redraw, #5665\n        }\n    };\n    /**\n     * Remove a point from the series. Unlike the\n     * {@link Highcharts.Point#remove} method, this can also be done on a point\n     * that is not instanciated because it is outside the view or subject to\n     * Highcharts Stock data grouping.\n     *\n     * @sample highcharts/members/series-removepoint/\n     *         Remove cropped point\n     *\n     * @function Highcharts.Series#removePoint\n     *\n     * @param {number} i\n     *        The index of the point in the {@link Highcharts.Series.data|data}\n     *        array.\n     *\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw the chart after the point is added. When\n     *        removing more than one point, it is highly recommended that the\n     *        `redraw` option be set to `false`, and instead {@link\n     *        Highcharts.Chart#redraw} is explicitly called after the adding of\n     *        points is finished.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        Whether and optionally how the series should be animated.\n     *\n     * @emits Highcharts.Point#event:remove\n     */\n    Series.prototype.removePoint = function (i, redraw, animation) {\n        var series = this, data = series.data, point = data[i], points = series.points, chart = series.chart, remove = function () {\n            if (points && points.length === data.length) { // #4935\n                points.splice(i, 1);\n            }\n            data.splice(i, 1);\n            series.options.data.splice(i, 1);\n            series.updateParallelArrays(point || { series: series }, 'splice', i, 1);\n            if (point) {\n                point.destroy();\n            }\n            // redraw\n            series.isDirty = true;\n            series.isDirtyData = true;\n            if (redraw) {\n                chart.redraw();\n            }\n        };\n        setAnimation(animation, chart);\n        redraw = pick(redraw, true);\n        // Fire the event with a default handler of removing the point\n        if (point) {\n            point.firePointEvent('remove', null, remove);\n        }\n        else {\n            remove();\n        }\n    };\n    /**\n     * Remove a series and optionally redraw the chart.\n     *\n     * @sample highcharts/members/series-remove/\n     *         Remove first series from a button\n     *\n     * @function Highcharts.Series#remove\n     *\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw the chart or wait for an explicit call to\n     *        {@link Highcharts.Chart#redraw}.\n     *\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        Whether to apply animation, and optionally animation\n     *        configuration.\n     *\n     * @param {boolean} [withEvent=true]\n     *        Used internally, whether to fire the series `remove` event.\n     *\n     * @emits Highcharts.Series#event:remove\n     */\n    Series.prototype.remove = function (redraw, animation, withEvent, keepEvents) {\n        var series = this, chart = series.chart;\n        /**\n         * @private\n         */\n        function remove() {\n            // Destroy elements\n            series.destroy(keepEvents);\n            // Redraw\n            chart.isDirtyLegend = chart.isDirtyBox = true;\n            chart.linkSeries();\n            if (pick(redraw, true)) {\n                chart.redraw(animation);\n            }\n        }\n        // Fire the event with a default handler of removing the point\n        if (withEvent !== false) {\n            fireEvent(series, 'remove', null, remove);\n        }\n        else {\n            remove();\n        }\n    };\n    /**\n     * Update the series with a new set of options. For a clean and precise\n     * handling of new options, all methods and elements from the series are\n     * removed, and it is initialized from scratch. Therefore, this method is\n     * more performance expensive than some other utility methods like {@link\n     * Series#setData} or {@link Series#setVisible}.\n     *\n     * Note that `Series.update` may mutate the passed `data` options.\n     *\n     * @sample highcharts/members/series-update/\n     *         Updating series options\n     * @sample maps/members/series-update/\n     *         Update series options in Highmaps\n     *\n     * @function Highcharts.Series#update\n     *\n     * @param {Highcharts.SeriesOptionsType} options\n     *        New options that will be merged with the series' existing options.\n     *\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw the chart after the series is altered. If doing\n     *        more operations on the chart, it is a good idea to set redraw to\n     *        false and call {@link Chart#redraw} after.\n     *\n     * @emits Highcharts.Series#event:update\n     * @emits Highcharts.Series#event:afterUpdate\n     */\n    Series.prototype.update = function (options, redraw) {\n        options = cleanRecursively(options, this.userOptions);\n        fireEvent(this, 'update', { options: options });\n        var series = this, chart = series.chart, \n        // must use user options when changing type because series.options\n        // is merged in with type specific plotOptions\n        oldOptions = series.userOptions, initialType = series.initialType || series.type, plotOptions = chart.options.plotOptions, initialSeriesProto = seriesTypes[initialType].prototype, groups = [\n            'group',\n            'markerGroup',\n            'dataLabelsGroup',\n            'transformGroup',\n            'shadowGroup'\n        ], \n        // Animation must be enabled when calling update before the initial\n        // animation has first run. This happens when calling update\n        // directly after chart initialization, or when applying responsive\n        // rules (#6912).\n        animation = series.finishedAnimating && { animation: false }, kinds = {};\n        var seriesOptions, n, preserve = [\n            'eventOptions',\n            'navigatorSeries',\n            'baseSeries'\n        ], newType = (options.type ||\n            oldOptions.type ||\n            chart.options.chart.type);\n        var keepPoints = !(\n        // Indicators, histograms etc recalculate the data. It should be\n        // possible to omit this.\n        this.hasDerivedData ||\n            // New type requires new point classes\n            (newType && newType !== this.type) ||\n            // New options affecting how the data points are built\n            typeof options.pointStart !== 'undefined' ||\n            typeof options.pointInterval !== 'undefined' ||\n            typeof options.relativeXValue !== 'undefined' ||\n            options.joinBy ||\n            options.mapData || // #11636\n            // Changes to data grouping requires new points in new group\n            series.hasOptionChanged('dataGrouping') ||\n            series.hasOptionChanged('pointStart') ||\n            series.hasOptionChanged('pointInterval') ||\n            series.hasOptionChanged('pointIntervalUnit') ||\n            series.hasOptionChanged('keys'));\n        newType = newType || initialType;\n        if (keepPoints) {\n            preserve.push('data', 'isDirtyData', 'points', 'processedData', // #17057\n            'processedXData', 'processedYData', 'xIncrement', 'cropped', '_hasPointMarkers', '_hasPointLabels', 'clips', // #15420\n            // Networkgraph (#14397)\n            'nodes', 'layout', \n            // Treemap\n            'level', \n            // Map specific, consider moving it to series-specific preserve-\n            // properties (#10617)\n            'mapMap', 'mapData', 'minY', 'maxY', 'minX', 'maxX');\n            if (options.visible !== false) {\n                preserve.push('area', 'graph');\n            }\n            series.parallelArrays.forEach(function (key) {\n                preserve.push(key + 'Data');\n            });\n            if (options.data) {\n                // setData uses dataSorting options so we need to update them\n                // earlier\n                if (options.dataSorting) {\n                    extend(series.options.dataSorting, options.dataSorting);\n                }\n                this.setData(options.data, false);\n            }\n        }\n        // Do the merge, with some forced options\n        options = merge(oldOptions, animation, {\n            // When oldOptions.index is null it should't be cleared.\n            // Otherwise navigator series will have wrong indexes (#10193).\n            index: typeof oldOptions.index === 'undefined' ?\n                series.index : oldOptions.index,\n            pointStart: pick(\n            // when updating from blank (#7933)\n            (plotOptions &&\n                plotOptions.series &&\n                plotOptions.series.pointStart), oldOptions.pointStart, \n            // when updating after addPoint\n            series.xData[0])\n        }, (!keepPoints && { data: series.options.data }), options);\n        // Merge does not merge arrays, but replaces them. Since points were\n        // updated, `series.options.data` has correct merged options, use it:\n        if (keepPoints && options.data) {\n            options.data = series.options.data;\n        }\n        // Make sure preserved properties are not destroyed (#3094)\n        preserve = groups.concat(preserve);\n        preserve.forEach(function (prop) {\n            preserve[prop] = series[prop];\n            delete series[prop];\n        });\n        var casting = false;\n        if (seriesTypes[newType]) {\n            casting = newType !== series.type;\n            // Destroy the series and delete all properties, it will be\n            // reinserted within the `init` call below\n            series.remove(false, false, false, true);\n            if (casting) {\n                // Modern browsers including IE11\n                if (Object.setPrototypeOf) {\n                    Object.setPrototypeOf(series, seriesTypes[newType].prototype);\n                    // Legacy (IE < 11)\n                }\n                else {\n                    var ownEvents = Object.hasOwnProperty.call(series, 'hcEvents') && series.hcEvents;\n                    for (n in initialSeriesProto) { // eslint-disable-line guard-for-in\n                        series[n] = void 0;\n                    }\n                    // Reinsert all methods and properties from the new type\n                    // prototype (#2270, #3719).\n                    extend(series, seriesTypes[newType].prototype);\n                    // The events are tied to the prototype chain, don't copy if\n                    // they're not the series' own\n                    if (ownEvents) {\n                        series.hcEvents = ownEvents;\n                    }\n                    else {\n                        delete series.hcEvents;\n                    }\n                }\n            }\n        }\n        else {\n            error(17, true, chart, { missingModuleFor: newType });\n        }\n        // Re-register groups (#3094) and other preserved properties\n        preserve.forEach(function (prop) {\n            series[prop] = preserve[prop];\n        });\n        series.init(chart, options);\n        // Remove particular elements of the points. Check `series.options`\n        // because we need to consider the options being set on plotOptions as\n        // well.\n        if (keepPoints && this.points) {\n            seriesOptions = series.options;\n            // What kind of elements to destroy\n            if (seriesOptions.visible === false) {\n                kinds.graphic = 1;\n                kinds.dataLabel = 1;\n            }\n            else if (!series._hasPointLabels) {\n                var marker = seriesOptions.marker, dataLabels = seriesOptions.dataLabels, oldMarker = oldOptions.marker || {};\n                // If the  marker got disabled or changed its symbol, width or\n                // height - destroy\n                if (marker && (marker.enabled === false ||\n                    oldMarker.symbol !== marker.symbol || // #10870, #15946\n                    oldMarker.height !== marker.height || // #16274\n                    oldMarker.width !== marker.width // #16274\n                )) {\n                    kinds.graphic = 1;\n                }\n                if (dataLabels &&\n                    dataLabels.enabled === false) {\n                    kinds.dataLabel = 1;\n                }\n            }\n            for (var _a = 0, _b = this.points; _a < _b.length; _a++) {\n                var point = _b[_a];\n                if (point && point.series) {\n                    point.resolveColor();\n                    // Destroy elements in order to recreate based on updated\n                    // series options.\n                    if (Object.keys(kinds).length) {\n                        point.destroyElements(kinds);\n                    }\n                    if (seriesOptions.showInLegend === false &&\n                        point.legendItem) {\n                        chart.legend.destroyItem(point);\n                    }\n                }\n            }\n        }\n        series.initialType = initialType;\n        chart.linkSeries(); // Links are lost in series.remove (#3028)\n        // #15383: Fire updatedData if the type has changed to keep linked\n        // series such as indicators updated\n        if (casting && series.linkedSeries.length) {\n            series.isDirtyData = true;\n        }\n        fireEvent(this, 'afterUpdate');\n        if (pick(redraw, true)) {\n            chart.redraw(keepPoints ? void 0 : false);\n        }\n    };\n    /**\n     * Used from within series.update\n     * @private\n     */\n    Series.prototype.setName = function (name) {\n        this.name = this.options.name = this.userOptions.name = name;\n        this.chart.isDirtyLegend = true;\n    };\n    /**\n     * Check if the option has changed.\n     * @private\n     */\n    Series.prototype.hasOptionChanged = function (optionName) {\n        var chart = this.chart, option = this.options[optionName], plotOptions = chart.options.plotOptions, oldOption = this.userOptions[optionName];\n        if (oldOption) {\n            return option !== oldOption;\n        }\n        return option !==\n            pick(plotOptions &&\n                plotOptions[this.type] &&\n                plotOptions[this.type][optionName], plotOptions &&\n                plotOptions.series &&\n                plotOptions.series[optionName], option);\n    };\n    /**\n     * Runs on mouse over the series graphical items.\n     *\n     * @function Highcharts.Series#onMouseOver\n     * @emits Highcharts.Series#event:mouseOver\n     */\n    Series.prototype.onMouseOver = function () {\n        var series = this, chart = series.chart, hoverSeries = chart.hoverSeries, pointer = chart.pointer;\n        pointer.setHoverChartIndex();\n        // set normal state to previous series\n        if (hoverSeries && hoverSeries !== series) {\n            hoverSeries.onMouseOut();\n        }\n        // trigger the event, but to save processing time,\n        // only if defined\n        if (series.options.events.mouseOver) {\n            fireEvent(series, 'mouseOver');\n        }\n        // hover this\n        series.setState('hover');\n        /**\n         * Contains the original hovered series.\n         *\n         * @name Highcharts.Chart#hoverSeries\n         * @type {Highcharts.Series|null}\n         */\n        chart.hoverSeries = series;\n    };\n    /**\n     * Runs on mouse out of the series graphical items.\n     *\n     * @function Highcharts.Series#onMouseOut\n     *\n     * @emits Highcharts.Series#event:mouseOut\n     */\n    Series.prototype.onMouseOut = function () {\n        // trigger the event only if listeners exist\n        var series = this, options = series.options, chart = series.chart, tooltip = chart.tooltip, hoverPoint = chart.hoverPoint;\n        // #182, set to null before the mouseOut event fires\n        chart.hoverSeries = null;\n        // trigger mouse out on the point, which must be in this series\n        if (hoverPoint) {\n            hoverPoint.onMouseOut();\n        }\n        // fire the mouse out event\n        if (series && options.events.mouseOut) {\n            fireEvent(series, 'mouseOut');\n        }\n        // hide the tooltip\n        if (tooltip &&\n            !series.stickyTracking &&\n            (!tooltip.shared || series.noSharedTooltip)) {\n            tooltip.hide();\n        }\n        // Reset all inactive states\n        chart.series.forEach(function (s) {\n            s.setState('', true);\n        });\n    };\n    /**\n     * Set the state of the series. Called internally on mouse interaction\n     * operations, but it can also be called directly to visually\n     * highlight a series.\n     *\n     * @function Highcharts.Series#setState\n     *\n     * @param {Highcharts.SeriesStateValue|\"\"} [state]\n     *        The new state, can be either `'hover'`, `'inactive'`, `'select'`,\n     *        or `''` (an empty string), `'normal'` or `undefined` to set to\n     *        normal state.\n     * @param {boolean} [inherit]\n     *        Determines if state should be inherited by points too.\n     */\n    Series.prototype.setState = function (state, inherit) {\n        var series = this, options = series.options, graph = series.graph, inactiveOtherPoints = options.inactiveOtherPoints, stateOptions = options.states, \n        // By default a quick animation to hover/inactive,\n        // slower to un-hover\n        stateAnimation = pick((stateOptions[state || 'normal'] &&\n            stateOptions[state || 'normal'].animation), series.chart.options.chart.animation);\n        var attribs, lineWidth = options.lineWidth, i = 0, opacity = options.opacity;\n        state = state || '';\n        if (series.state !== state) {\n            // Toggle class names\n            [\n                series.group,\n                series.markerGroup,\n                series.dataLabelsGroup\n            ].forEach(function (group) {\n                if (group) {\n                    // Old state\n                    if (series.state) {\n                        group.removeClass('highcharts-series-' + series.state);\n                    }\n                    // New state\n                    if (state) {\n                        group.addClass('highcharts-series-' + state);\n                    }\n                }\n            });\n            series.state = state;\n            if (!series.chart.styledMode) {\n                if (stateOptions[state] &&\n                    stateOptions[state].enabled === false) {\n                    return;\n                }\n                if (state) {\n                    lineWidth = (stateOptions[state].lineWidth ||\n                        lineWidth + (stateOptions[state].lineWidthPlus || 0)); // #4035\n                    opacity = pick(stateOptions[state].opacity, opacity);\n                }\n                if (graph && !graph.dashstyle && isNumber(lineWidth)) {\n                    attribs = {\n                        'stroke-width': lineWidth\n                    };\n                    // Animate the graph stroke-width.\n                    graph.animate(attribs, stateAnimation);\n                    while (series['zone-graph-' + i]) {\n                        series['zone-graph-' + i].animate(attribs, stateAnimation);\n                        i = i + 1;\n                    }\n                }\n                // For some types (pie, networkgraph, sankey) opacity is\n                // resolved on a point level\n                if (!inactiveOtherPoints) {\n                    [\n                        series.group,\n                        series.markerGroup,\n                        series.dataLabelsGroup,\n                        series.labelBySeries\n                    ].forEach(function (group) {\n                        if (group) {\n                            group.animate({\n                                opacity: opacity\n                            }, stateAnimation);\n                        }\n                    });\n                }\n            }\n        }\n        // Don't loop over points on a series that doesn't apply inactive state\n        // to siblings markers (e.g. line, column)\n        if (inherit && inactiveOtherPoints && series.points) {\n            series.setAllPointsToState(state || void 0);\n        }\n    };\n    /**\n     * Set the state for all points in the series.\n     *\n     * @function Highcharts.Series#setAllPointsToState\n     *\n     * @private\n     *\n     * @param {string} [state]\n     *        Can be either `hover` or undefined to set to normal state.\n     */\n    Series.prototype.setAllPointsToState = function (state) {\n        this.points.forEach(function (point) {\n            if (point.setState) {\n                point.setState(state);\n            }\n        });\n    };\n    /**\n     * Show or hide the series.\n     *\n     * @function Highcharts.Series#setVisible\n     *\n     * @param {boolean} [visible]\n     * True to show the series, false to hide. If undefined, the visibility is\n     * toggled.\n     *\n     * @param {boolean} [redraw=true]\n     * Whether to redraw the chart after the series is altered. If doing more\n     * operations on the chart, it is a good idea to set redraw to false and\n     * call {@link Chart#redraw|chart.redraw()} after.\n     *\n     * @emits Highcharts.Series#event:hide\n     * @emits Highcharts.Series#event:show\n     */\n    Series.prototype.setVisible = function (vis, redraw) {\n        var series = this, chart = series.chart, ignoreHiddenSeries = chart.options.chart.ignoreHiddenSeries, oldVisibility = series.visible;\n        // if called without an argument, toggle visibility\n        series.visible =\n            vis =\n                series.options.visible =\n                    series.userOptions.visible =\n                        typeof vis === 'undefined' ? !oldVisibility : vis; // #5618\n        var showOrHide = vis ? 'show' : 'hide';\n        // show or hide elements\n        [\n            'group',\n            'dataLabelsGroup',\n            'markerGroup',\n            'tracker',\n            'tt'\n        ].forEach(function (key) {\n            if (series[key]) {\n                series[key][showOrHide]();\n            }\n        });\n        // hide tooltip (#1361)\n        if (chart.hoverSeries === series ||\n            (chart.hoverPoint && chart.hoverPoint.series) === series) {\n            series.onMouseOut();\n        }\n        if (series.legendItem) {\n            chart.legend.colorizeItem(series, vis);\n        }\n        // rescale or adapt to resized chart\n        series.isDirty = true;\n        // in a stack, all other series are affected\n        if (series.options.stacking) {\n            chart.series.forEach(function (otherSeries) {\n                if (otherSeries.options.stacking && otherSeries.visible) {\n                    otherSeries.isDirty = true;\n                }\n            });\n        }\n        // show or hide linked series\n        series.linkedSeries.forEach(function (otherSeries) {\n            otherSeries.setVisible(vis, false);\n        });\n        if (ignoreHiddenSeries) {\n            chart.isDirtyBox = true;\n        }\n        fireEvent(series, showOrHide);\n        if (redraw !== false) {\n            chart.redraw();\n        }\n    };\n    /**\n     * Show the series if hidden.\n     *\n     * @sample highcharts/members/series-hide/\n     *         Toggle visibility from a button\n     *\n     * @function Highcharts.Series#show\n     * @emits Highcharts.Series#event:show\n     */\n    Series.prototype.show = function () {\n        this.setVisible(true);\n    };\n    /**\n     * Hide the series if visible. If the\n     * [chart.ignoreHiddenSeries](https://api.highcharts.com/highcharts/chart.ignoreHiddenSeries)\n     * option is true, the chart is redrawn without this series.\n     *\n     * @sample highcharts/members/series-hide/\n     *         Toggle visibility from a button\n     *\n     * @function Highcharts.Series#hide\n     * @emits Highcharts.Series#event:hide\n     */\n    Series.prototype.hide = function () {\n        this.setVisible(false);\n    };\n    /**\n     * Select or unselect the series. This means its\n     * {@link Highcharts.Series.selected|selected}\n     * property is set, the checkbox in the legend is toggled and when selected,\n     * the series is returned by the {@link Highcharts.Chart#getSelectedSeries}\n     * function.\n     *\n     * @sample highcharts/members/series-select/\n     *         Select a series from a button\n     *\n     * @function Highcharts.Series#select\n     *\n     * @param {boolean} [selected]\n     * True to select the series, false to unselect. If undefined, the selection\n     * state is toggled.\n     *\n     * @emits Highcharts.Series#event:select\n     * @emits Highcharts.Series#event:unselect\n     */\n    Series.prototype.select = function (selected) {\n        var series = this;\n        series.selected =\n            selected =\n                this.options.selected = (typeof selected === 'undefined' ?\n                    !series.selected :\n                    selected);\n        if (series.checkbox) {\n            series.checkbox.checked = selected;\n        }\n        fireEvent(series, selected ? 'select' : 'unselect');\n    };\n    /**\n     * Checks if a tooltip should be shown for a given point.\n     *\n     * @private\n     */\n    Series.prototype.shouldShowTooltip = function (plotX, plotY, options) {\n        if (options === void 0) { options = {}; }\n        options.series = this;\n        options.visiblePlotOnly = true;\n        return this.chart.isInsidePlot(plotX, plotY, options);\n    };\n    Series.defaultOptions = SeriesDefaults;\n    /**\n     * Registry of all available series types.\n     *\n     * @name Highcharts.Series.types\n     * @type {Highcharts.Dictionary<typeof_Highcharts.Series>}\n     */\n    Series.types = SeriesRegistry.seriesTypes;\n    /* *\n     *\n     *  Static Functions\n     *\n     * */\n    /**\n     * Registers a series class to be accessible via `Series.types`.\n     *\n     * @function Highcharts.Series.registerType\n     *\n     * @param {string} seriesType\n     * The series type as an identifier string in lower case.\n     *\n     * @param {Function} SeriesClass\n     * The series class as a class pattern or a constructor function with\n     * prototype.\n     */\n    Series.registerType = SeriesRegistry.registerSeriesType;\n    return Series;\n}());\nextend(Series.prototype, {\n    axisTypes: ['xAxis', 'yAxis'],\n    coll: 'series',\n    colorCounter: 0,\n    cropShoulder: 1,\n    directTouch: false,\n    drawLegendSymbol: LegendSymbol.drawLineMarker,\n    isCartesian: true,\n    kdAxisArray: ['clientX', 'plotY'],\n    // each point's x and y values are stored in this.xData and this.yData:\n    parallelArrays: ['x', 'y'],\n    pointClass: Point,\n    requireSorting: true,\n    // requires the data to be sorted:\n    sorted: true\n});\n/* *\n *\n *  Registry\n *\n * */\nSeriesRegistry.series = Series;\n/* *\n *\n *  Default Export\n *\n * */\nexport default Series;\n/* *\n *\n *  API Declarations\n *\n * */\n/**\n * This is a placeholder type of the possible series options for\n * [Highcharts](../highcharts/series), [Highcharts Stock](../highstock/series),\n * [Highmaps](../highmaps/series), and [Gantt](../gantt/series).\n *\n * In TypeScript is this dynamically generated to reference all possible types\n * of series options.\n *\n * @ignore-declaration\n * @typedef {Highcharts.SeriesOptions|Highcharts.Dictionary<*>} Highcharts.SeriesOptionsType\n */\n/**\n * Options for `dataSorting`.\n *\n * @interface Highcharts.DataSortingOptionsObject\n * @since 8.0.0\n */ /**\n* Enable or disable data sorting for the series.\n* @name Highcharts.DataSortingOptionsObject#enabled\n* @type {boolean|undefined}\n*/ /**\n* Whether to allow matching points by name in an update.\n* @name Highcharts.DataSortingOptionsObject#matchByName\n* @type {boolean|undefined}\n*/ /**\n* Determines what data value should be used to sort by.\n* @name Highcharts.DataSortingOptionsObject#sortKey\n* @type {string|undefined}\n*/\n/**\n * Function callback when a series has been animated.\n *\n * @callback Highcharts.SeriesAfterAnimateCallbackFunction\n *\n * @param {Highcharts.Series} this\n *        The series where the event occured.\n *\n * @param {Highcharts.SeriesAfterAnimateEventObject} event\n *        Event arguments.\n */\n/**\n * Event information regarding completed animation of a series.\n *\n * @interface Highcharts.SeriesAfterAnimateEventObject\n */ /**\n* Animated series.\n* @name Highcharts.SeriesAfterAnimateEventObject#target\n* @type {Highcharts.Series}\n*/ /**\n* Event type.\n* @name Highcharts.SeriesAfterAnimateEventObject#type\n* @type {\"afterAnimate\"}\n*/\n/**\n * Function callback when the checkbox next to the series' name in the legend is\n * clicked.\n *\n * @callback Highcharts.SeriesCheckboxClickCallbackFunction\n *\n * @param {Highcharts.Series} this\n *        The series where the event occured.\n *\n * @param {Highcharts.SeriesCheckboxClickEventObject} event\n *        Event arguments.\n */\n/**\n * Event information regarding check of a series box.\n *\n * @interface Highcharts.SeriesCheckboxClickEventObject\n */ /**\n* Whether the box has been checked.\n* @name Highcharts.SeriesCheckboxClickEventObject#checked\n* @type {boolean}\n*/ /**\n* Related series.\n* @name Highcharts.SeriesCheckboxClickEventObject#item\n* @type {Highcharts.Series}\n*/ /**\n* Related series.\n* @name Highcharts.SeriesCheckboxClickEventObject#target\n* @type {Highcharts.Series}\n*/ /**\n* Event type.\n* @name Highcharts.SeriesCheckboxClickEventObject#type\n* @type {\"checkboxClick\"}\n*/\n/**\n * Function callback when a series is clicked. Return false to cancel toogle\n * actions.\n *\n * @callback Highcharts.SeriesClickCallbackFunction\n *\n * @param {Highcharts.Series} this\n *        The series where the event occured.\n *\n * @param {Highcharts.SeriesClickEventObject} event\n *        Event arguments.\n */\n/**\n * Common information for a click event on a series.\n *\n * @interface Highcharts.SeriesClickEventObject\n * @extends global.Event\n */ /**\n* Nearest point on the graph.\n* @name Highcharts.SeriesClickEventObject#point\n* @type {Highcharts.Point}\n*/\n/**\n * Gets fired when the series is hidden after chart generation time, either by\n * clicking the legend item or by calling `.hide()`.\n *\n * @callback Highcharts.SeriesHideCallbackFunction\n *\n * @param {Highcharts.Series} this\n *        The series where the event occured.\n *\n * @param {global.Event} event\n *        The event that occured.\n */\n/**\n * The SVG value used for the `stroke-linecap` and `stroke-linejoin` of a line\n * graph.\n *\n * @typedef {\"butt\"|\"round\"|\"square\"|string} Highcharts.SeriesLinecapValue\n */\n/**\n * Gets fired when the legend item belonging to the series is clicked. The\n * default action is to toggle the visibility of the series. This can be\n * prevented by returning `false` or calling `event.preventDefault()`.\n *\n * @callback Highcharts.SeriesLegendItemClickCallbackFunction\n *\n * @param {Highcharts.Series} this\n *        The series where the event occured.\n *\n * @param {Highcharts.SeriesLegendItemClickEventObject} event\n *        The event that occured.\n */\n/**\n * Information about the event.\n *\n * @interface Highcharts.SeriesLegendItemClickEventObject\n */ /**\n* Related browser event.\n* @name Highcharts.SeriesLegendItemClickEventObject#browserEvent\n* @type {global.PointerEvent}\n*/ /**\n* Prevent the default action of toggle the visibility of the series.\n* @name Highcharts.SeriesLegendItemClickEventObject#preventDefault\n* @type {Function}\n*/ /**\n* Related series.\n* @name Highcharts.SeriesCheckboxClickEventObject#target\n* @type {Highcharts.Series}\n*/ /**\n* Event type.\n* @name Highcharts.SeriesCheckboxClickEventObject#type\n* @type {\"checkboxClick\"}\n*/\n/**\n * Gets fired when the mouse leaves the graph.\n *\n * @callback Highcharts.SeriesMouseOutCallbackFunction\n *\n * @param {Highcharts.Series} this\n *        Series where the event occured.\n *\n * @param {global.PointerEvent} event\n *        Event that occured.\n */\n/**\n * Gets fired when the mouse enters the graph.\n *\n * @callback Highcharts.SeriesMouseOverCallbackFunction\n *\n * @param {Highcharts.Series} this\n *        Series where the event occured.\n *\n * @param {global.PointerEvent} event\n *        Event that occured.\n */\n/**\n * Translation and scale for the plot area of a series.\n *\n * @interface Highcharts.SeriesPlotBoxObject\n */ /**\n* @name Highcharts.SeriesPlotBoxObject#scaleX\n* @type {number}\n*/ /**\n* @name Highcharts.SeriesPlotBoxObject#scaleY\n* @type {number}\n*/ /**\n* @name Highcharts.SeriesPlotBoxObject#translateX\n* @type {number}\n*/ /**\n* @name Highcharts.SeriesPlotBoxObject#translateY\n* @type {number}\n*/\n/**\n * Gets fired when the series is shown after chart generation time, either by\n * clicking the legend item or by calling `.show()`.\n *\n * @callback Highcharts.SeriesShowCallbackFunction\n *\n * @param {Highcharts.Series} this\n *        Series where the event occured.\n *\n * @param {global.Event} event\n *        Event that occured.\n */\n/**\n * Possible key values for the series state options.\n *\n * @typedef {\"hover\"|\"inactive\"|\"normal\"|\"select\"} Highcharts.SeriesStateValue\n */\n''; // detach doclets above\n/* *\n *\n *  API Options\n *\n * */\n/**\n * Series options for specific data and the data itself. In TypeScript you\n * have to cast the series options to specific series types, to get all\n * possible options for a series.\n *\n * @example\n * // TypeScript example\n * Highcharts.chart('container', {\n *     series: [{\n *         color: '#06C',\n *         data: [[0, 1], [2, 3]]\n *     } as Highcharts.SeriesLineOptions ]\n * });\n *\n * @type      {Array<*>}\n * @apioption series\n */\n/**\n * An id for the series. This can be used after render time to get a pointer\n * to the series object through `chart.get()`.\n *\n * @sample {highcharts} highcharts/plotoptions/series-id/\n *         Get series by id\n *\n * @type      {string}\n * @since     1.2.0\n * @apioption series.id\n */\n/**\n * The index of the series in the chart, affecting the internal index in the\n * `chart.series` array, the visible Z index as well as the order in the\n * legend.\n *\n * @type      {number}\n * @since     2.3.0\n * @apioption series.index\n */\n/**\n * The sequential index of the series in the legend.\n *\n * @see [legend.reversed](#legend.reversed),\n *      [yAxis.reversedStacks](#yAxis.reversedStacks)\n *\n * @sample {highcharts|highstock} highcharts/series/legendindex/\n *         Legend in opposite order\n *\n * @type      {number}\n * @apioption series.legendIndex\n */\n/**\n * The name of the series as shown in the legend, tooltip etc.\n *\n * @sample {highcharts} highcharts/series/name/\n *         Series name\n * @sample {highmaps} maps/demo/category-map/\n *         Series name\n *\n * @type      {string}\n * @apioption series.name\n */\n/**\n * This option allows grouping series in a stacked chart. The stack option\n * can be a string or anything else, as long as the grouped series' stack\n * options match each other after conversion into a string.\n *\n * @sample {highcharts} highcharts/series/stack/\n *         Stacked and grouped columns\n *\n * @type      {number|string}\n * @since     2.1\n * @product   highcharts highstock\n * @apioption series.stack\n */\n/**\n * The type of series, for example `line` or `column`. By default, the\n * series type is inherited from [chart.type](#chart.type), so unless the\n * chart is a combination of series types, there is no need to set it on the\n * series level.\n *\n * @sample {highcharts} highcharts/series/type/\n *         Line and column in the same chart\n * @sample highcharts/series/type-dynamic/\n *         Dynamic types with button selector\n * @sample {highmaps} maps/demo/mapline-mappoint/\n *         Multiple types in the same map\n *\n * @type      {string}\n * @apioption series.type\n */\n/**\n * When using dual or multiple x axes, this number defines which xAxis the\n * particular series is connected to. It refers to either the\n * {@link #xAxis.id|axis id}\n * or the index of the axis in the xAxis array, with 0 being the first.\n *\n * @type      {number|string}\n * @default   0\n * @product   highcharts highstock\n * @apioption series.xAxis\n */\n/**\n * When using dual or multiple y axes, this number defines which yAxis the\n * particular series is connected to. It refers to either the\n * {@link #yAxis.id|axis id}\n * or the index of the axis in the yAxis array, with 0 being the first.\n *\n * @sample {highcharts} highcharts/series/yaxis/\n *         Apply the column series to the secondary Y axis\n *\n * @type      {number|string}\n * @default   0\n * @product   highcharts highstock\n * @apioption series.yAxis\n */\n/**\n * Define the visual z index of the series.\n *\n * @sample {highcharts} highcharts/plotoptions/series-zindex-default/\n *         With no z index, the series defined last are on top\n * @sample {highcharts} highcharts/plotoptions/series-zindex/\n *         With a z index, the series with the highest z index is on top\n * @sample {highstock} highcharts/plotoptions/series-zindex-default/\n *         With no z index, the series defined last are on top\n * @sample {highstock} highcharts/plotoptions/series-zindex/\n *         With a z index, the series with the highest z index is on top\n *\n * @type      {number}\n * @product   highcharts highstock\n * @apioption series.zIndex\n */\n''; // include precedent doclets in transpilat\n"],"x_google_ignoreList":[0,1,2]}