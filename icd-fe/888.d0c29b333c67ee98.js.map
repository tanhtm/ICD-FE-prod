{"version":3,"file":"888.d0c29b333c67ee98.js","mappings":"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","names":["extend","U","D","zoomIn","zoomOut","buttonOptions","alignTo","align","verticalAlign","x","width","height","padding","style","fontSize","fontWeight","theme","buttons","onclick","this","mapZoom","text","y","mouseWheelSensitivity","doc","H","addEvent","isNumber","merge","objectEach","pick","stopEvent","e","preventDefault","stopPropagation","cancelBubble","MapNavigation","chart","navButtons","init","prototype","update","options","attr","mapNav","o","mapNavigation","outerHandler","handler","call","length","pop","destroy","enableButtons","enabled","renderer","forExport","navButtonsGroup","g","zIndex","add","n","styledMode","button","addClass","title","lang","element","push","hasLoaded","unbind_1","expBtnBBox","exportingGroup","getBBox","navBtnsBBox","box1","box2","isIntersectRect_1","translateY","updateEvents","enableDoubleClickZoom","enableDoubleClickZoomTo","unbindDblClick","container","pointer","onContainerDblClick","enableMouseWheelZoom","unbindMouseWheel","onwheel","onmousewheel","inClass","target","onContainerMouseWheel","Chart","fitToBox","inner","outer","forEach","dim","pos","size","howMuch","xProjected","yProjected","chartX","chartY","mapView","Math","log","zoomBy","projection","inverse","totalWheelDeltaTimer","defined","wrap","normalize","Pointer","totalWheelDelta","chartPosition","lonLat","pixelsToLonLat","plotLeft","plotTop","hoverPoint","zoomTo","isInsidePlot","delta","wheelDelta","deltaY","detail","abs","clearTimeout","setTimeout","proceed","enableTouchZoom","zooming","pinchType","apply","slice","arguments","pinchDown","touches","transform","selectionMarker","clip","lastValidTouch","xBigger","type","hasZoom","pinchTranslateDirection","scaleX","scaleY","symbols","SVGRenderer","selectiveRoundedRect","w","h","rTopLeft","rTopRight","rBottomRight","rBottomLeft","bottombutton","bottomButton","r","topbutton","topButton","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","TypeError","String","__","constructor","create","getOptions","MapChart","_super","userOptions","callback","defaultCreditsOptions","credits","panning","mapText","mapTextFull","tooltip","followTouchMove","maps","mapChart","a","c","splitPath","path","arr","replace","split","map","item","test","parseFloat","MapUtilities","boundsFromPath","validBounds","x2","Number","MAX_VALUE","x1","y2","y1","seg","min","max","pointInPolygon","point","polygon","i","j","MapPoint","_this","series","getProjectedPath","projectedPath","geometry","hasCoordinates","applyOptions","mapData","mapMap","mapKey","getNestedProperty","joinBy","mapPoint","pointArrayMap","indexOf","value","getProjectedBounds","bounds","properties","propMiddleX","propMiddleY","midX","middleX","middleYFraction","middleY","midY","onMouseOver","colorInterval","isNull","visible","nullInteraction","onMouseOut","setVisible","vis","method","dataLabel","graphic","pointAttribs","inset","insetIndex","insets","px1","projectedUnitsToPixels","px2","proj1","pixelsToProjectedUnits","proj2","fitToBounds","isDirty","redraw","SeriesRegistry","pointClass","dataLabelOnNull","ColorMapComposition","moveToTopOnHover","isValid","MapViewOptionsDefault","center","fitToGeometry","maxZoom","name","parallels","rotation","zoom","MapViewInsetsOptionsDefault","borderColor","borderWidth","relativeTo","units","format","F","win","error","topo2geo","topology","objectName","keys","objects","object","arcsArray","arcs","_a","scale_1","scale","translate_1","translate","arc","position","arcsToCoordinates","reduce","coordinates","arcNo","reverse","concat","features","geometries","geojson","copyright","copyrightShort","copyrightUrl","bbox","json","hType","feature","pointOptions","name_1","NAME","lon","lat","mapCredits","mapCreditsFull","latLon","proj4","jsonmarginX","_b","jsonmarginY","_c","jsonres","_d","_e","xoffset","_f","xpan","_g","yoffset","_h","ypan","projected","crs","cosAngle","cos","sinAngle","sin","rotated","normalized","projectedUnitsToLonLat","lonLatToProjectedUnits","href","isInside","clipEdge1","clipEdge2","intersection","prevPoint","currentPoint","dc","dp","n1","n2","n3","isIntersection","PolygonClip","clipLineString","line","boundsPolygon","ret","l","clipPolygon","splice","subjectPolygon","closed","outputList","inputList","sign","deg2rad","PI","halfPI","eps10","tany","tan","LambertConformalConic","lat1","lat2","cosLat1","projectedBounds","pow","forward","xy","outside","cy","rho","sqrt","atan2","atan","A1","A2","A3","A4","M","EqualEarth","paramLat","asin","paramLatSq","paramLatPow6","dlat","quarterPI","Miller","exp","Orthographic","antimeridianCutting","lonDeg","z","cSin","cCos","maxLatitude","WebMercator","sinLat","__spreadArray","to","from","pack","ar","PC","clamp","erase","floatCorrection","wrapLon","Projection","hasGeoProjection","rotator","getRotator","ProjectionDefinition","registry","def","definition","greatCircle","point1","point2","inclusive","lon1","lon2","deltaLat","deltaLng","calcA","calcB","jumps","round","lineString","step","fraction","A","B","lat3","lon3","insertGreatCircles","poly","toString","join","lineIntersectsBounds","getIntersect","val","p1","p2","otherDim","crossingVal","deltaLambda","deltaPhi","deltaGamma","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","cosLat","k","rLonLat","cutOnAntimeridian","isPolygon","polarIntersection","antimeridian","intersections","polygons","previousLonLat","direction","sort","index","lonPlus","lonMinus","i_1","poly_1","polarLatitude","polarSegment","unshift","projectingToPlane","preclip","postclip","addToPath","firstValidLonLat","lastValidLonLat","movedTo","gap","pushToPath","someOutside","someInside","points","Infinity","GeoJSONModule","MU","fireEvent","isArray","isObject","isString","relativeLength","worldSize","zoomFromBounds","playingField","scaleToField","MapView","recommendedMapView","recommendedProjection","eventsToUnbind","MapViewInset","geoMaps","s","getGeoMap","allGeoBounds_1","geoMap","geoBounds","compositeBounds","defaultOptions","recInsets","optInsets","mergeInsets","plotBox","createInsets","getField","minZoom","hasRendered","setUpEvents","toObject","ob","id","insetsObj","key","insetOptions","animation","pad","fullField","padArr","setView","padded","plotWidth","plotHeight","getMapBBox","getScale","allBounds","acc","affectsMapView","fitToGeometryCache","positions","xs","ys","getSVGTransform","projectedCenter","flipFactor","translateX","lonLatToPixels","mapTransforms","hitZone","coords","transformFromLatLon","default","_i","insetProjectedPoint","pxPoint","transformToLatLon","coordinates_1","useMapGeometry","bottomLeft","topRight","boundsCenterProjected","field","getHitZone","render","mouseDownCenterProjected","mouseDownKey","mouseDownRotation","onPan","mouseDownX","mouseDownY","originalEvent","worldBounds","worldZoom","ratio","newCenter","evt","resetSelection","showResetZoom","group","newProjection","isDirtyProjection","isDirtyInsets","groups","transformGroups","clearBounds","isDirtyData","chartCoords","offsetY","arrayOfBounds","cur","defaultInsetsOptions","geoBoundsProjectedBox","geoBoundsProjectedPolygon","segment","relativeTo_1","Boolean","borderPath","animate","border","stroke","crisp_1","strokeWidth","field_1","floor","f","animObject","noop","ColumnSeries","column","ScatterSeries","scatter","find","splat","MapSeries","data","processedData","isSVG","animateDrilldown","opacity","drilldown","fadeInGroup","dataLabelsGroup","animateDrillupFrom","animateDrillupTo","doFullTranslate","isResizing","isVML","drawMapDataLabels","Series","clipRect","drawPoints","shapeArgs","parentGroup","fill","state","animate_1","className","toLowerCase","css","selected","params","complete","animateIn","animateOut","inheritedStrokeWidth","getStrokeWidth","removeAttribute","transformGroup","svgTransform","animatePoints","globalAnimation","startTranslateX_1","startTranslateY_1","startScale_1","animator","now","fx","scaleStep","insets_1","projection_1","allBounds_1","labelrank","midX_1","midY_1","pointAttrToOptions","hasData","processedXData","colorAttribs","pointStrokeWidth","stateOptions","states","stateStrokeWidth","seriesStrokeWidth","dashstyle","nullColor","linecap","updateData","setData","updatePoints","processData","generatePoints","props","chartOptions","dataUsed","mapDataObject","mapTitle","ix","joinKey_1","allAreas","joinKey_2","dataUsedString_1","setOptions","itemOptions","mainSvgTransform_1","plotX","plotY","shapeType","dataLabels","crop","formatter","numberFormatter","inside","overflow","marker","stickyTracking","followPointer","pointFormat","turboThreshold","hover","halo","brightness","normal","select","color","axisTypes","colorKey","directTouch","drawDataLabels","drawGraph","drawLegendSymbol","LegendSymbol","forceDL","getCenter","CU","getExtremesFromAll","getSymbol","isCartesian","parallelArrays","preserveAspectRatio","searchPoint","trackerGroups","MapLineSeries","fillColor","lineWidth","colorProp","MapPointPoint","MapPointSeries","projectPoint","hasCoordinates_1","didBounds","plotCoords","isPointInside","zone","zones","getZone","defer","anchorX","anchorY","isLegendSymbol","context","mapPointProto","MapBubblePoint","BubblePoint","mapProto","mappoint","MapBubbleSeries","compareX","searchKDTree","clientX","getRadii","translateBubble","BubbleSeries","animationLimit","xyFromShape","G","Highcharts","ColorAxis","Map","Fx","Legend","Axis"],"sourceRoot":"webpack:///","sources":["./node_modules/highcharts/es-modules/Maps/MapNavigationDefaults.js","./node_modules/highcharts/es-modules/Maps/MapNavigation.js","./node_modules/highcharts/es-modules/Maps/MapPointer.js","./node_modules/highcharts/es-modules/Maps/MapSymbols.js","./node_modules/highcharts/es-modules/Core/Chart/MapChart.js","./node_modules/highcharts/es-modules/Maps/MapUtilities.js","./node_modules/highcharts/es-modules/Series/Map/MapPoint.js","./node_modules/highcharts/es-modules/Maps/MapViewOptionsDefault.js","./node_modules/highcharts/es-modules/Maps/MapViewInsetsOptionsDefault.js","./node_modules/highcharts/es-modules/Extensions/GeoJSON.js","./node_modules/highcharts/es-modules/Core/Geometry/PolygonClip.js","./node_modules/highcharts/es-modules/Maps/Projections/LambertConformalConic.js","./node_modules/highcharts/es-modules/Maps/Projections/EqualEarth.js","./node_modules/highcharts/es-modules/Maps/Projections/Miller.js","./node_modules/highcharts/es-modules/Maps/Projections/Orthographic.js","./node_modules/highcharts/es-modules/Maps/Projections/WebMercator.js","./node_modules/highcharts/es-modules/Maps/Projections/ProjectionRegistry.js","./node_modules/highcharts/es-modules/Maps/Projection.js","./node_modules/highcharts/es-modules/Maps/MapView.js","./node_modules/highcharts/es-modules/Series/Map/MapSeries.js","./node_modules/highcharts/es-modules/Series/MapLine/MapLineSeries.js","./node_modules/highcharts/es-modules/Series/MapPoint/MapPointPoint.js","./node_modules/highcharts/es-modules/Series/MapPoint/MapPointSeries.js","./node_modules/highcharts/es-modules/Series/MapBubble/MapBubblePoint.js","./node_modules/highcharts/es-modules/Series/MapBubble/MapBubbleSeries.js","./node_modules/highcharts/es-modules/masters/modules/map.src.js"],"sourcesContent":["/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport D from '../Core/Defaults.js';\nimport U from '../Core/Utilities.js';\nvar extend = U.extend;\n/* *\n *\n *  Constants\n *\n * */\n/**\n * The `mapNavigation` option handles buttons for navigation in addition to\n * mousewheel and doubleclick handlers for map zooming.\n *\n * @product      highmaps\n * @optionparent mapNavigation\n */\nvar MapNavigationDefaults = {\n    /**\n     * General options for the map navigation buttons. Individual options\n     * can be given from the [mapNavigation.buttons](#mapNavigation.buttons)\n     * option set.\n     *\n     * @sample {highmaps} maps/mapnavigation/button-theme/\n     *         Theming the navigation buttons\n     */\n    buttonOptions: {\n        /**\n         * What box to align the buttons to. Possible values are `plotBox`\n         * and `spacingBox`.\n         *\n         * @type {Highcharts.ButtonRelativeToValue}\n         */\n        alignTo: 'plotBox',\n        /**\n         * The alignment of the navigation buttons.\n         *\n         * @type {Highcharts.AlignValue}\n         */\n        align: 'left',\n        /**\n         * The vertical alignment of the buttons. Individual alignment can\n         * be adjusted by each button's `y` offset.\n         *\n         * @type {Highcharts.VerticalAlignValue}\n         */\n        verticalAlign: 'top',\n        /**\n         * The X offset of the buttons relative to its `align` setting.\n         */\n        x: 0,\n        /**\n         * The width of the map navigation buttons.\n         */\n        width: 18,\n        /**\n         * The pixel height of the map navigation buttons.\n         */\n        height: 18,\n        /**\n         * Padding for the navigation buttons.\n         *\n         * @since 5.0.0\n         */\n        padding: 5,\n        /**\n         * Text styles for the map navigation buttons.\n         *\n         * @type    {Highcharts.CSSObject}\n         * @default {\"fontSize\": \"15px\", \"fontWeight\": \"bold\"}\n         */\n        style: {\n            /** @ignore */\n            fontSize: '15px',\n            /** @ignore */\n            fontWeight: 'bold'\n        },\n        /**\n         * A configuration object for the button theme. The object accepts\n         * SVG properties like `stroke-width`, `stroke` and `fill`. Tri-state\n         * button styles are supported by the `states.hover` and `states.select`\n         * objects.\n         *\n         * @sample {highmaps} maps/mapnavigation/button-theme/\n         *         Themed navigation buttons\n         *\n         * @type    {Highcharts.SVGAttributes}\n         * @default {\"stroke-width\": 1, \"text-align\": \"center\"}\n         */\n        theme: {\n            /** @ignore */\n            'stroke-width': 1,\n            /** @ignore */\n            'text-align': 'center'\n        }\n    },\n    /**\n     * The individual buttons for the map navigation. This usually includes\n     * the zoom in and zoom out buttons. Properties for each button is\n     * inherited from\n     * [mapNavigation.buttonOptions](#mapNavigation.buttonOptions), while\n     * individual options can be overridden. But default, the `onclick`, `text`\n     * and `y` options are individual.\n     */\n    buttons: {\n        /**\n         * Options for the zoom in button. Properties for the zoom in and zoom\n         * out buttons are inherited from\n         * [mapNavigation.buttonOptions](#mapNavigation.buttonOptions), while\n         * individual options can be overridden. By default, the `onclick`,\n         * `text` and `y` options are individual.\n         *\n         * @extends mapNavigation.buttonOptions\n         */\n        zoomIn: {\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * Click handler for the button.\n             *\n             * @type    {Function}\n             * @default function () { this.mapZoom(0.5); }\n             */\n            onclick: function () {\n                this.mapZoom(0.5);\n            },\n            /**\n             * The text for the button. The tooltip (title) is a language option\n             * given by [lang.zoomIn](#lang.zoomIn).\n             */\n            text: '+',\n            /**\n             * The position of the zoomIn button relative to the vertical\n             * alignment.\n             */\n            y: 0\n        },\n        /**\n         * Options for the zoom out button. Properties for the zoom in and\n         * zoom out buttons are inherited from\n         * [mapNavigation.buttonOptions](#mapNavigation.buttonOptions), while\n         * individual options can be overridden. By default, the `onclick`,\n         * `text` and `y` options are individual.\n         *\n         * @extends mapNavigation.buttonOptions\n         */\n        zoomOut: {\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * Click handler for the button.\n             *\n             * @type    {Function}\n             * @default function () { this.mapZoom(2); }\n             */\n            onclick: function () {\n                this.mapZoom(2);\n            },\n            /**\n             * The text for the button. The tooltip (title) is a language option\n             * given by [lang.zoomOut](#lang.zoomIn).\n             */\n            text: '-',\n            /**\n             * The position of the zoomOut button relative to the vertical\n             * alignment.\n             */\n            y: 28\n        }\n    },\n    /**\n     * Whether to enable navigation buttons. By default it inherits the\n     * [enabled](#mapNavigation.enabled) setting.\n     *\n     * @type      {boolean}\n     * @apioption mapNavigation.enableButtons\n     */\n    /**\n     * Whether to enable map navigation. The default is not to enable\n     * navigation, as many choropleth maps are simple and don't need it.\n     * Additionally, when touch zoom and mousewheel zoom is enabled, it breaks\n     * the default behaviour of these interactions in the website, and the\n     * implementer should be aware of this.\n     *\n     * Individual interactions can be enabled separately, namely buttons,\n     * multitouch zoom, double click zoom, double click zoom to element and\n     * mousewheel zoom.\n     *\n     * @type      {boolean}\n     * @default   false\n     * @apioption mapNavigation.enabled\n     */\n    /**\n     * Enables zooming in on an area on double clicking in the map. By default\n     * it inherits the [enabled](#mapNavigation.enabled) setting.\n     *\n     * @type      {boolean}\n     * @apioption mapNavigation.enableDoubleClickZoom\n     */\n    /**\n     * Whether to zoom in on an area when that area is double clicked.\n     *\n     * @sample {highmaps} maps/mapnavigation/doubleclickzoomto/\n     *         Enable double click zoom to\n     *\n     * @type      {boolean}\n     * @default   false\n     * @apioption mapNavigation.enableDoubleClickZoomTo\n     */\n    /**\n     * Enables zooming by mouse wheel. By default it inherits the [enabled](\n     * #mapNavigation.enabled) setting.\n     *\n     * @type      {boolean}\n     * @apioption mapNavigation.enableMouseWheelZoom\n     */\n    /**\n     * Whether to enable multitouch zooming. Note that if the chart covers the\n     * viewport, this prevents the user from using multitouch and touchdrag on\n     * the web page, so you should make sure the user is not trapped inside the\n     * chart. By default it inherits the [enabled](#mapNavigation.enabled)\n     * setting.\n     *\n     * @type      {boolean}\n     * @apioption mapNavigation.enableTouchZoom\n     */\n    /**\n     * Sensitivity of mouse wheel or trackpad scrolling. 1 is no sensitivity,\n     * while with 2, one mousewheel delta will zoom in 50%.\n     *\n     * @since 4.2.4\n     */\n    mouseWheelSensitivity: 1.1\n    // enabled: false,\n    // enableButtons: null, // inherit from enabled\n    // enableTouchZoom: null, // inherit from enabled\n    // enableDoubleClickZoom: null, // inherit from enabled\n    // enableDoubleClickZoomTo: false\n    // enableMouseWheelZoom: null, // inherit from enabled\n};\n/* *\n *\n *  Composition\n *\n * */\n// Add language\nextend(D.defaultOptions.lang, {\n    zoomIn: 'Zoom in',\n    zoomOut: 'Zoom out'\n});\n// Set the default map navigation options\nD.defaultOptions.mapNavigation = MapNavigationDefaults;\n/* *\n *\n *  Default Export\n *\n * */\nexport default MapNavigationDefaults;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport Chart from '../Core/Chart/Chart.js';\nimport H from '../Core/Globals.js';\nvar doc = H.doc;\nimport U from '../Core/Utilities.js';\nvar addEvent = U.addEvent, extend = U.extend, isNumber = U.isNumber, merge = U.merge, objectEach = U.objectEach, pick = U.pick;\nimport './MapNavigationDefaults.js';\n/* eslint-disable no-invalid-this, valid-jsdoc */\n/**\n * @private\n */\nfunction stopEvent(e) {\n    if (e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        }\n        if (e.stopPropagation) {\n            e.stopPropagation();\n        }\n        e.cancelBubble = true;\n    }\n}\n/**\n * The MapNavigation handles buttons for navigation in addition to mousewheel\n * and doubleclick handlers for chart zooming.\n *\n * @private\n * @class\n * @name MapNavigation\n *\n * @param {Highcharts.Chart} chart\n *        The Chart instance.\n */\nfunction MapNavigation(chart) {\n    this.navButtons = [];\n    this.init(chart);\n}\n/**\n * Initialize function.\n *\n * @function MapNavigation#init\n *\n * @param {Highcharts.Chart} chart\n *        The Chart instance.\n *\n * @return {void}\n */\nMapNavigation.prototype.init = function (chart) {\n    this.chart = chart;\n};\n/**\n * Update the map navigation with new options. Calling this is the same as\n * calling `chart.update({ mapNavigation: {} })`.\n *\n * @function MapNavigation#update\n *\n * @param {Highcharts.MapNavigationOptions} [options]\n *        New options for the map navigation.\n *\n * @return {void}\n */\nMapNavigation.prototype.update = function (options) {\n    var mapNav = this, chart = this.chart, o = chart.options.mapNavigation, attr, outerHandler = function (e) {\n        this.handler.call(chart, e);\n        stopEvent(e); // Stop default click event (#4444)\n    }, navButtons = mapNav.navButtons;\n    // Merge in new options in case of update, and register back to chart\n    // options.\n    if (options) {\n        o = chart.options.mapNavigation =\n            merge(chart.options.mapNavigation, options);\n    }\n    // Destroy buttons in case of dynamic update\n    while (navButtons.length) {\n        navButtons.pop().destroy();\n    }\n    if (pick(o.enableButtons, o.enabled) && !chart.renderer.forExport) {\n        if (!mapNav.navButtonsGroup) {\n            mapNav.navButtonsGroup = chart.renderer.g().attr({\n                zIndex: 4 // #4955, // #8392\n            }).add();\n        }\n        objectEach(o.buttons, function (buttonOptions, n) {\n            buttonOptions = merge(o.buttonOptions, buttonOptions);\n            // Presentational\n            if (!chart.styledMode && buttonOptions.theme) {\n                attr = buttonOptions.theme;\n                attr.style = merge(buttonOptions.theme.style, buttonOptions.style // #3203\n                );\n            }\n            var button = chart.renderer\n                .button(buttonOptions.text || '', 0, 0, outerHandler, attr, void 0, void 0, void 0, n === 'zoomIn' ? 'topbutton' : 'bottombutton')\n                .addClass('highcharts-map-navigation highcharts-' + {\n                zoomIn: 'zoom-in',\n                zoomOut: 'zoom-out'\n            }[n])\n                .attr({\n                width: buttonOptions.width,\n                height: buttonOptions.height,\n                title: chart.options.lang[n],\n                padding: buttonOptions.padding,\n                zIndex: 5\n            })\n                .add(mapNav.navButtonsGroup);\n            button.handler = buttonOptions.onclick;\n            // Stop double click event (#4444)\n            addEvent(button.element, 'dblclick', stopEvent);\n            navButtons.push(button);\n            extend(buttonOptions, {\n                width: button.width,\n                height: 2 * button.height\n            });\n            if (!chart.hasLoaded) {\n                // Align it after the plotBox is known (#12776)\n                var unbind_1 = addEvent(chart, 'load', function () {\n                    // #15406: Make sure button hasnt been destroyed\n                    if (button.element) {\n                        button.align(buttonOptions, false, buttonOptions.alignTo);\n                    }\n                    unbind_1();\n                });\n            }\n            else {\n                button.align(buttonOptions, false, buttonOptions.alignTo);\n            }\n        });\n        // Borrowed from overlapping-datalabels. Consider a shared module.\n        var isIntersectRect_1 = function (box1, box2) { return !(box2.x >= box1.x + box1.width ||\n            box2.x + box2.width <= box1.x ||\n            box2.y >= box1.y + box1.height ||\n            box2.y + box2.height <= box1.y); };\n        // Check the mapNavigation buttons collision with exporting button\n        // and translate the mapNavigation button if they overlap.\n        var adjustMapNavBtn = function () {\n            var expBtnBBox = chart.exportingGroup && chart.exportingGroup.getBBox();\n            if (expBtnBBox) {\n                var navBtnsBBox = mapNav.navButtonsGroup.getBBox();\n                // If buttons overlap\n                if (isIntersectRect_1(expBtnBBox, navBtnsBBox)) {\n                    // Adjust the mapNav buttons' position by translating them\n                    // above or below the exporting button\n                    var aboveExpBtn = -navBtnsBBox.y - navBtnsBBox.height +\n                        expBtnBBox.y - 5, belowExpBtn = expBtnBBox.y + expBtnBBox.height -\n                        navBtnsBBox.y + 5, mapNavVerticalAlign = o.buttonOptions && o.buttonOptions.verticalAlign;\n                    // If bottom aligned and adjusting the mapNav button would\n                    // translate it out of the plotBox, translate it up\n                    // instead of down\n                    mapNav.navButtonsGroup.attr({\n                        translateY: mapNavVerticalAlign === 'bottom' ?\n                            aboveExpBtn :\n                            belowExpBtn\n                    });\n                }\n            }\n        };\n        if (!chart.hasLoaded) {\n            // Align it after the plotBox is known (#12776) and after the\n            // hamburger button's position is known so they don't overlap\n            // (#15782)\n            addEvent(chart, 'render', adjustMapNavBtn);\n        }\n    }\n    this.updateEvents(o);\n};\n/**\n * Update events, called internally from the update function. Add new event\n * handlers, or unbinds events if disabled.\n *\n * @function MapNavigation#updateEvents\n *\n * @param {Highcharts.MapNavigationOptions} options\n *        Options for map navigation.\n *\n * @return {void}\n */\nMapNavigation.prototype.updateEvents = function (options) {\n    var chart = this.chart;\n    // Add the double click event\n    if (pick(options.enableDoubleClickZoom, options.enabled) ||\n        options.enableDoubleClickZoomTo) {\n        this.unbindDblClick = this.unbindDblClick || addEvent(chart.container, 'dblclick', function (e) {\n            chart.pointer.onContainerDblClick(e);\n        });\n    }\n    else if (this.unbindDblClick) {\n        // Unbind and set unbinder to undefined\n        this.unbindDblClick = this.unbindDblClick();\n    }\n    // Add the mousewheel event\n    if (pick(options.enableMouseWheelZoom, options.enabled)) {\n        this.unbindMouseWheel = this.unbindMouseWheel || addEvent(chart.container, doc.onwheel !== void 0 ? 'wheel' : // Newer Firefox\n            doc.onmousewheel !== void 0 ? 'mousewheel' :\n                'DOMMouseScroll', function (e) {\n            // Prevent scrolling when the pointer is over the element with\n            // that class, for example anotation popup #12100.\n            if (!chart.pointer.inClass(e.target, 'highcharts-no-mousewheel')) {\n                chart.pointer.onContainerMouseWheel(e);\n                // Issue #5011, returning false from non-jQuery event does\n                // not prevent default\n                stopEvent(e);\n            }\n            return false;\n        });\n    }\n    else if (this.unbindMouseWheel) {\n        // Unbind and set unbinder to undefined\n        this.unbindMouseWheel = this.unbindMouseWheel();\n    }\n};\n// Add events to the Chart object itself\nextend(Chart.prototype, /** @lends Chart.prototype */ {\n    /**\n     * Fit an inner box to an outer. If the inner box overflows left or right,\n     * align it to the sides of the outer. If it overflows both sides, fit it\n     * within the outer. This is a pattern that occurs more places in\n     * Highcharts, perhaps it should be elevated to a common utility function.\n     *\n     * @ignore\n     * @function Highcharts.Chart#fitToBox\n     *\n     * @param {Highcharts.BBoxObject} inner\n     *\n     * @param {Highcharts.BBoxObject} outer\n     *\n     * @return {Highcharts.BBoxObject}\n     *         The inner box\n     */\n    fitToBox: function (inner, outer) {\n        [['x', 'width'], ['y', 'height']].forEach(function (dim) {\n            var pos = dim[0], size = dim[1];\n            if (inner[pos] + inner[size] >\n                outer[pos] + outer[size]) { // right\n                // the general size is greater, fit fully to outer\n                if (inner[size] > outer[size]) {\n                    inner[size] = outer[size];\n                    inner[pos] = outer[pos];\n                }\n                else { // align right\n                    inner[pos] = outer[pos] +\n                        outer[size] - inner[size];\n                }\n            }\n            if (inner[size] > outer[size]) {\n                inner[size] = outer[size];\n            }\n            if (inner[pos] < outer[pos]) {\n                inner[pos] = outer[pos];\n            }\n        });\n        return inner;\n    },\n    /**\n     * Highcharts Maps only. Zoom in or out of the map. See also\n     * {@link Point#zoomTo}. See {@link Chart#fromLatLonToPoint} for how to get\n     * the `centerX` and `centerY` parameters for a geographic location.\n     *\n     * Deprecated as of v9.3 in favor of [MapView.zoomBy](https://api.highcharts.com/class-reference/Highcharts.MapView#zoomBy).\n     *\n     * @deprecated\n     * @function Highcharts.Chart#mapZoom\n     *\n     * @param {number} [howMuch]\n     *        How much to zoom the map. Values less than 1 zooms in. 0.5 zooms\n     *        in to half the current view. 2 zooms to twice the current view. If\n     *        omitted, the zoom is reset.\n     *\n     * @param {number} [xProjected]\n     *        The projected x position to keep stationary when zooming, if\n     *        available space.\n     *\n     * @param {number} [yProjected]\n     *        The projected y position to keep stationary when zooming, if\n     *        available space.\n     *\n     * @param {number} [chartX]\n     *        Keep this chart position stationary if possible. This is used for\n     *        example in mousewheel events, where the area under the mouse\n     *        should be fixed as we zoom in.\n     *\n     * @param {number} [chartY]\n     *        Keep this chart position stationary if possible.\n     *\n     * @deprecated\n     */\n    mapZoom: function (howMuch, xProjected, yProjected, chartX, chartY) {\n        if (this.mapView) {\n            if (isNumber(howMuch)) {\n                // Compliance, mapView.zoomBy uses different values\n                howMuch = Math.log(howMuch) / Math.log(0.5);\n            }\n            this.mapView.zoomBy(howMuch, isNumber(xProjected) && isNumber(yProjected) ?\n                this.mapView.projection.inverse([xProjected, yProjected]) :\n                void 0, isNumber(chartX) && isNumber(chartY) ?\n                [chartX, chartY] :\n                void 0);\n        }\n    }\n});\n// Extend the Chart.render method to add zooming and panning\naddEvent(Chart, 'beforeRender', function () {\n    // Render the plus and minus buttons. Doing this before the shapes makes\n    // getBBox much quicker, at least in Chrome.\n    this.mapNavigation = new MapNavigation(this);\n    this.mapNavigation.update();\n});\nH.MapNavigation = MapNavigation;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport Pointer from '../Core/Pointer.js';\nimport U from '../Core/Utilities.js';\nvar defined = U.defined, extend = U.extend, pick = U.pick, wrap = U.wrap;\n/* eslint-disable no-invalid-this */\nvar normalize = Pointer.prototype.normalize;\nvar totalWheelDelta = 0;\nvar totalWheelDeltaTimer;\n// Extend the Pointer\nextend(Pointer.prototype, {\n    // Add lon and lat information to pointer events\n    normalize: function (e, chartPosition) {\n        var chart = this.chart;\n        e = normalize.call(this, e, chartPosition);\n        if (chart && chart.mapView) {\n            var lonLat = chart.mapView.pixelsToLonLat({\n                x: e.chartX - chart.plotLeft,\n                y: e.chartY - chart.plotTop\n            });\n            if (lonLat) {\n                extend(e, lonLat);\n            }\n        }\n        return e;\n    },\n    // The event handler for the doubleclick event\n    onContainerDblClick: function (e) {\n        var chart = this.chart;\n        e = this.normalize(e);\n        if (chart.options.mapNavigation.enableDoubleClickZoomTo) {\n            if (chart.pointer.inClass(e.target, 'highcharts-tracker') &&\n                chart.hoverPoint) {\n                chart.hoverPoint.zoomTo();\n            }\n        }\n        else if (chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop)) {\n            chart.mapZoom(0.5, void 0, void 0, e.chartX, e.chartY);\n        }\n    },\n    // The event handler for the mouse scroll event\n    onContainerMouseWheel: function (e) {\n        var chart = this.chart;\n        e = this.normalize(e);\n        // Firefox uses e.deltaY or e.detail, WebKit and IE uses wheelDelta\n        // try wheelDelta first #15656\n        var delta = (defined(e.wheelDelta) && -e.wheelDelta / 120) ||\n            e.deltaY || e.detail;\n        // Wheel zooming on trackpads have different behaviours in Firefox vs\n        // WebKit. In Firefox the delta increments in steps by 1, so it is not\n        // distinguishable from true mouse wheel. Therefore we use this timer\n        // to avoid trackpad zooming going too fast and out of control. In\n        // WebKit however, the delta is < 1, so we simply disable animation in\n        // the `chart.mapZoom` call below.\n        if (Math.abs(delta) >= 1) {\n            totalWheelDelta += Math.abs(delta);\n            if (totalWheelDeltaTimer) {\n                clearTimeout(totalWheelDeltaTimer);\n            }\n            totalWheelDeltaTimer = setTimeout(function () {\n                totalWheelDelta = 0;\n            }, 50);\n        }\n        if (totalWheelDelta < 10 && chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop) && chart.mapView) {\n            chart.mapView.zoomBy((chart.options.mapNavigation.mouseWheelSensitivity -\n                1) * -delta, void 0, [e.chartX, e.chartY], \n            // Delta less than 1 indicates stepless/trackpad zooming, avoid\n            // animation delaying the zoom\n            Math.abs(delta) < 1 ? false : void 0);\n        }\n    }\n});\n// The pinchType is inferred from mapNavigation options.\nwrap(Pointer.prototype, 'zoomOption', function (proceed) {\n    var mapNavigation = this.chart.options.mapNavigation;\n    // Pinch status\n    if (pick(mapNavigation.enableTouchZoom, mapNavigation.enabled)) {\n        this.chart.options.chart.zooming.pinchType = 'xy';\n    }\n    proceed.apply(this, [].slice.call(arguments, 1));\n});\n// Extend the pinchTranslate method to preserve fixed ratio when zooming\nwrap(Pointer.prototype, 'pinchTranslate', function (proceed, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch) {\n    var xBigger;\n    proceed.call(this, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch);\n    // Keep ratio\n    if (this.chart.options.chart.type === 'map' && this.hasZoom) {\n        xBigger = transform.scaleX > transform.scaleY;\n        this.pinchTranslateDirection(!xBigger, pinchDown, touches, transform, selectionMarker, clip, lastValidTouch, xBigger ? transform.scaleX : transform.scaleY);\n    }\n});\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport SVGRenderer from '../Core/Renderer/SVG/SVGRenderer.js';\nvar symbols = SVGRenderer.prototype.symbols;\n/* *\n *\n *  Functions\n *\n * */\n/* eslint-disable require-jsdoc, valid-jsdoc */\nfunction bottomButton(x, y, w, h, options) {\n    var r = (options && options.r) || 0;\n    return selectiveRoundedRect(x - 1, y - 1, w, h, 0, 0, r, r);\n}\n/**\n * Create symbols for the zoom buttons\n * @private\n */\nfunction selectiveRoundedRect(x, y, w, h, rTopLeft, rTopRight, rBottomRight, rBottomLeft) {\n    return [\n        ['M', x + rTopLeft, y],\n        // top side\n        ['L', x + w - rTopRight, y],\n        // top right corner\n        [\n            'C',\n            x + w - rTopRight / 2,\n            y,\n            x + w,\n            y + rTopRight / 2,\n            x + w,\n            y + rTopRight\n        ],\n        // right side\n        ['L', x + w, y + h - rBottomRight],\n        // bottom right corner\n        [\n            'C', x + w, y + h - rBottomRight / 2,\n            x + w - rBottomRight / 2, y + h,\n            x + w - rBottomRight, y + h\n        ],\n        // bottom side\n        ['L', x + rBottomLeft, y + h],\n        // bottom left corner\n        [\n            'C',\n            x + rBottomLeft / 2,\n            y + h,\n            x,\n            y + h - rBottomLeft / 2,\n            x,\n            y + h - rBottomLeft\n        ],\n        // left side\n        ['L', x, y + rTopLeft],\n        // top left corner\n        ['C', x, y + rTopLeft / 2, x + rTopLeft / 2, y, x + rTopLeft, y],\n        ['Z']\n    ];\n}\nfunction topButton(x, y, w, h, options) {\n    var r = (options && options.r) || 0;\n    return selectiveRoundedRect(x - 1, y - 1, w, h, r, r, 0, 0);\n}\nsymbols.bottombutton = bottomButton;\nsymbols.topbutton = topButton;\n/* *\n *\n *  Default Export\n *\n * */\nexport default symbols;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Chart from './Chart.js';\nimport D from '../Defaults.js';\nvar getOptions = D.getOptions;\nimport SVGRenderer from '../Renderer/SVG/SVGRenderer.js';\nimport U from '../Utilities.js';\nvar merge = U.merge, pick = U.pick;\nimport '../../Maps/MapSymbols.js';\n/**\n * Map-optimized chart. Use {@link Highcharts.Chart|Chart} for common charts.\n *\n * @requires modules/map\n *\n * @class\n * @name Highcharts.MapChart\n * @extends Highcharts.Chart\n */\nvar MapChart = /** @class */ (function (_super) {\n    __extends(MapChart, _super);\n    function MapChart() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Initializes the chart. The constructor's arguments are passed on\n     * directly.\n     *\n     * @function Highcharts.MapChart#init\n     *\n     * @param {Highcharts.Options} userOptions\n     *        Custom options.\n     *\n     * @param {Function} [callback]\n     *        Function to run when the chart has loaded and and all external\n     *        images are loaded.\n     *\n     *\n     * @emits Highcharts.MapChart#event:init\n     * @emits Highcharts.MapChart#event:afterInit\n     */\n    MapChart.prototype.init = function (userOptions, callback) {\n        var defaultCreditsOptions = getOptions().credits;\n        var options = merge({\n            chart: {\n                panning: {\n                    enabled: true,\n                    type: 'xy'\n                },\n                type: 'map'\n            },\n            credits: {\n                mapText: pick(defaultCreditsOptions.mapText, ' \\u00a9 <a href=\"{geojson.copyrightUrl}\">' +\n                    '{geojson.copyrightShort}</a>'),\n                mapTextFull: pick(defaultCreditsOptions.mapTextFull, '{geojson.copyright}')\n            },\n            mapView: {},\n            tooltip: {\n                followTouchMove: false\n            }\n        }, userOptions // user's options\n        );\n        _super.prototype.init.call(this, options, callback);\n    };\n    return MapChart;\n}(Chart));\n/* eslint-disable valid-jsdoc */\n(function (MapChart) {\n    /**\n     * Contains all loaded map data for Highmaps.\n     *\n     * @requires modules/map\n     *\n     * @name Highcharts.maps\n     * @type {Record<string,*>}\n     */\n    MapChart.maps = {};\n    /**\n     * The factory function for creating new map charts. Creates a new {@link\n     * Highcharts.MapChart|MapChart} object with different default options than\n     * the basic Chart.\n     *\n     * @requires modules/map\n     *\n     * @function Highcharts.mapChart\n     *\n     * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n     * The DOM element to render to, or its id.\n     *\n     * @param {Highcharts.Options} options\n     * The chart options structure as described in the\n     * [options reference](https://api.highcharts.com/highstock).\n     *\n     * @param {Highcharts.ChartCallbackFunction} [callback]\n     * A function to execute when the chart object is finished loading and\n     * rendering. In most cases the chart is built in one thread, but in\n     * Internet Explorer version 8 or less the chart is sometimes initialized\n     * before the document is ready, and in these cases the chart object will\n     * not be finished synchronously. As a consequence, code that relies on the\n     * newly built Chart object should always run in the callback. Defining a\n     * [chart.events.load](https://api.highcharts.com/highstock/chart.events.load)\n     * handler is equivalent.\n     *\n     * @return {Highcharts.MapChart}\n     * The chart object.\n     */\n    function mapChart(a, b, c) {\n        return new MapChart(a, b, c);\n    }\n    MapChart.mapChart = mapChart;\n    /**\n     * Utility for reading SVG paths directly.\n     *\n     * @requires modules/map\n     *\n     * @function Highcharts.splitPath\n     *\n     * @param {string|Array<string|number>} path\n     *\n     * @return {Highcharts.SVGPathArray}\n     * Splitted SVG path\n     */\n    function splitPath(path) {\n        var arr;\n        if (typeof path === 'string') {\n            path = path\n                // Move letters apart\n                .replace(/([A-Za-z])/g, ' $1 ')\n                // Trim\n                .replace(/^\\s*/, '').replace(/\\s*$/, '');\n            // Split on spaces and commas. The semicolon is bogus, designed to\n            // circumvent string replacement in the pre-v7 assembler that built\n            // specific styled mode files.\n            var split = path.split(/[ ,;]+/);\n            arr = split.map(function (item) {\n                if (!/[A-za-z]/.test(item)) {\n                    return parseFloat(item);\n                }\n                return item;\n            });\n        }\n        else {\n            arr = path;\n        }\n        return SVGRenderer.prototype.pathToSegments(arr);\n    }\n    MapChart.splitPath = splitPath;\n})(MapChart || (MapChart = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default MapChart;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n// Compute bounds from a path element\nvar boundsFromPath = function (path) {\n    var x2 = -Number.MAX_VALUE, x1 = Number.MAX_VALUE, y2 = -Number.MAX_VALUE, y1 = Number.MAX_VALUE, validBounds;\n    path.forEach(function (seg) {\n        var x = seg[seg.length - 2], y = seg[seg.length - 1];\n        if (typeof x === 'number' &&\n            typeof y === 'number') {\n            x1 = Math.min(x1, x);\n            x2 = Math.max(x2, x);\n            y1 = Math.min(y1, y);\n            y2 = Math.max(y2, y);\n            validBounds = true;\n        }\n    });\n    if (validBounds) {\n        return { x1: x1, y1: y1, x2: x2, y2: y2 };\n    }\n};\n/**\n * Test for point in polygon. Polygon defined as array of [x,y] points.\n * @private\n */\nvar pointInPolygon = function (point, polygon) {\n    var i, j, rel1, rel2, c = false, x = point.x, y = point.y;\n    for (i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n        rel1 = polygon[i][1] > y;\n        rel2 = polygon[j][1] > y;\n        if (rel1 !== rel2 &&\n            (x < (polygon[j][0] - polygon[i][0]) * (y - polygon[i][1]) /\n                (polygon[j][1] - polygon[i][1]) +\n                polygon[i][0])) {\n            c = !c;\n        }\n    }\n    return c;\n};\n/* *\n *\n *  Default Export\n *\n * */\nvar MapUtilities = {\n    boundsFromPath: boundsFromPath,\n    pointInPolygon: pointInPolygon\n};\nexport default MapUtilities;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport ColorMapComposition from '../ColorMapComposition.js';\nimport MapUtilities from '../../Maps/MapUtilities.js';\nvar boundsFromPath = MapUtilities.boundsFromPath;\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nvar ScatterSeries = SeriesRegistry.seriesTypes.scatter;\nimport U from '../../Core/Utilities.js';\nvar extend = U.extend, isNumber = U.isNumber, pick = U.pick;\n/* *\n *\n *  Class\n *\n * */\nvar MapPoint = /** @class */ (function (_super) {\n    __extends(MapPoint, _super);\n    function MapPoint() {\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.options = void 0;\n        _this.path = void 0;\n        _this.series = void 0;\n        return _this;\n        /* eslint-enable valid-jsdoc */\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    // Get the projected path based on the geometry. May also be called on\n    // mapData options (not point instances), hence static.\n    MapPoint.getProjectedPath = function (point, projection) {\n        if (!point.projectedPath) {\n            if (projection && point.geometry) {\n                // Always true when given GeoJSON coordinates\n                projection.hasCoordinates = true;\n                point.projectedPath = projection.path(point.geometry);\n                // SVG path given directly in point options\n            }\n            else {\n                point.projectedPath = point.path;\n            }\n        }\n        return point.projectedPath || [];\n    };\n    /**\n     * Extend the Point object to split paths.\n     * @private\n     */\n    MapPoint.prototype.applyOptions = function (options, x) {\n        var series = this.series, point = _super.prototype.applyOptions.call(this, options, x), joinBy = series.joinBy;\n        if (series.mapData && series.mapMap) {\n            var joinKey = joinBy[1], mapKey = _super.prototype.getNestedProperty.call(point, joinKey), mapPoint = typeof mapKey !== 'undefined' &&\n                series.mapMap[mapKey];\n            if (mapPoint) {\n                extend(point, mapPoint); // copy over properties\n            }\n            else if (series.pointArrayMap.indexOf('value') !== -1) {\n                point.value = point.value || null;\n            }\n        }\n        return point;\n    };\n    /*\n     * Get the bounds in terms of projected units\n     * @param projection\n     * @return MapBounds|undefined The computed bounds\n     */\n    MapPoint.prototype.getProjectedBounds = function (projection) {\n        var path = MapPoint.getProjectedPath(this, projection), bounds = boundsFromPath(path), properties = this.properties;\n        if (bounds) {\n            // Cache point bounding box for use to position data labels, bubbles\n            // etc\n            var propMiddleX = properties && properties['hc-middle-x'], propMiddleY = properties && properties['hc-middle-y'];\n            bounds.midX = (bounds.x1 + (bounds.x2 - bounds.x1) * pick(this.middleX, isNumber(propMiddleX) ? propMiddleX : 0.5));\n            var middleYFraction = pick(this.middleY, isNumber(propMiddleY) ? propMiddleY : 0.5);\n            // No geographic geometry, only path given => flip\n            if (!this.geometry) {\n                middleYFraction = 1 - middleYFraction;\n            }\n            bounds.midY = bounds.y2 - (bounds.y2 - bounds.y1) * middleYFraction;\n            return bounds;\n        }\n    };\n    /**\n     * Stop the fade-out\n     * @private\n     */\n    MapPoint.prototype.onMouseOver = function (e) {\n        U.clearTimeout(this.colorInterval);\n        if (\n        // Valid...\n        (!this.isNull && this.visible) ||\n            // ... or interact anyway\n            this.series.options.nullInteraction) {\n            _super.prototype.onMouseOver.call(this, e);\n        }\n        else {\n            // #3401 Tooltip doesn't hide when hovering over null points\n            this.series.onMouseOut(e);\n        }\n    };\n    MapPoint.prototype.setVisible = function (vis) {\n        var method = vis ? 'show' : 'hide';\n        this.visible = this.options.visible = !!vis;\n        // Show and hide associated elements\n        if (this.dataLabel) {\n            this.dataLabel[method]();\n        }\n        // For invisible map points, render them as null points rather than\n        // fully removing them. Makes more sense for color axes with data\n        // classes.\n        if (this.graphic) {\n            this.graphic.attr(this.series.pointAttribs(this));\n        }\n    };\n    /**\n     * Highmaps only. Zoom in on the point using the global animation.\n     *\n     * @sample maps/members/point-zoomto/\n     *         Zoom to points from buttons\n     *\n     * @requires modules/map\n     *\n     * @function Highcharts.Point#zoomTo\n     */\n    MapPoint.prototype.zoomTo = function () {\n        var point = this, chart = point.series.chart, mapView = chart.mapView;\n        var bounds = point.bounds;\n        if (mapView && bounds) {\n            var inset = isNumber(point.insetIndex) &&\n                mapView.insets[point.insetIndex];\n            if (inset) {\n                // If in an inset, translate the bounds to pixels ...\n                var px1 = inset.projectedUnitsToPixels({\n                    x: bounds.x1,\n                    y: bounds.y1\n                }), px2 = inset.projectedUnitsToPixels({\n                    x: bounds.x2,\n                    y: bounds.y2\n                }), \n                // ... then back to projected units in the main mapView\n                proj1 = mapView.pixelsToProjectedUnits({\n                    x: px1.x,\n                    y: px1.y\n                }), proj2 = mapView.pixelsToProjectedUnits({\n                    x: px2.x,\n                    y: px2.y\n                });\n                bounds = {\n                    x1: proj1.x,\n                    y1: proj1.y,\n                    x2: proj2.x,\n                    y2: proj2.y\n                };\n            }\n            mapView.fitToBounds(bounds, void 0, false);\n            point.series.isDirty = true;\n            chart.redraw();\n        }\n    };\n    return MapPoint;\n}(ScatterSeries.prototype.pointClass));\nextend(MapPoint.prototype, {\n    dataLabelOnNull: ColorMapComposition.pointMembers.dataLabelOnNull,\n    moveToTopOnHover: ColorMapComposition.pointMembers.moveToTopOnHover,\n    isValid: ColorMapComposition.pointMembers.isValid\n});\n/* *\n *\n *  Default Export\n *\n * */\nexport default MapPoint;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n/**\n * The `mapView` options control the initial view of the chart, and how\n * projection is set up for raw geoJSON maps (beta as of v9.3).\n *\n * To set the view dynamically after chart generation, see\n * [mapView.setView](/class-reference/Highcharts.MapView#setView).\n *\n * @since 9.3.0\n * @product      highmaps\n * @optionparent mapView\n */\nvar defaultOptions = {\n    /**\n     * The center of the map in terms of longitude and latitude. For\n     * preprojected maps (like the GeoJSON files in Map Collection v1.x), the\n     * units are projected x and y units.\n     *\n     * @default [0, 0]\n     * @type   {Highcharts.LonLatArray}\n     *\n     * @sample {highmaps} maps/mapview/center-zoom Custom view of a world map\n     * @sample {highmaps} maps/mapview/get-view Report the current view of a\n     *         preprojected map\n     */\n    center: [0, 0],\n    /**\n     * Fit the map to a geometry object consisting of individual points or\n     * polygons. This is practical for responsive maps where we want to focus on\n     * a specific area regardless of map size - unlike setting `center` and\n     * `zoom`, where the view doesn't scale with different map sizes.\n     *\n     * The geometry can be combined with the [padding](#mapView.padding) option\n     * to avoid touching the edges of the chart.\n     *\n     * @type {object}\n     * @since 10.3.3\n     *\n     * @sample maps/mapview/fittogeometry Fitting the view to geometries\n     */\n    fitToGeometry: void 0,\n    /**\n     * Prevents the end user from zooming too far in on the map. See\n     * [zoom](#mapView.zoom).\n     *\n     * @type   {number|undefined}\n     *\n     * @sample {highmaps} maps/mapview/maxzoom\n     *         Prevent zooming in too far\n     */\n    maxZoom: void 0,\n    /**\n     * The padding inside the plot area when auto fitting to the map bounds. A\n     * number signifies pixels, and a percentage is relative to the plot area\n     * size.\n     *\n     * An array sets individual padding for the sides in the order [top, right,\n     * bottom, left].\n     *\n     * @sample {highmaps} maps/chart/plotbackgroundcolor-color\n     *         Visible plot area and percentage padding\n     * @sample {highmaps} maps/demo/mappoint-mapmarker\n     *         Padding for individual sides\n     * @type  {number|string|Array<number|string>}\n     */\n    padding: 0,\n    /**\n     * The projection options allow applying client side projection to a map\n     * given in geographic coordinates, typically from TopoJSON or GeoJSON.\n     *\n     * @type   {Object}\n     *\n     * @sample maps/demo/projection-explorer\n     *         Projection explorer\n     * @sample maps/demo/topojson-projection\n     *         Orthographic projection\n     * @sample maps/mapview/projection-custom-proj4js\n     *         Custom UTM projection definition\n     * @sample maps/mapview/projection-custom-d3geo\n     *         Custom Robinson projection definition\n     */\n    projection: {\n        /**\n         * Projection name. Built-in projections are `EqualEarth`,\n         * `LambertConformalConic`, `Miller`, `Orthographic` and `WebMercator`.\n         *\n         * @type   {string}\n         * @sample maps/demo/projection-explorer\n         *         Projection explorer\n         * @sample maps/mapview/projection-custom-proj4js\n         *         Custom UTM projection definition\n         * @sample maps/mapview/projection-custom-d3geo\n         *         Custom Robinson projection definition\n         * @sample maps/demo/topojson-projection\n         *         Orthographic projection\n         */\n        name: void 0,\n        /**\n         * The two standard parallels that define the map layout in conic\n         * projections, like the LambertConformalConic projection. If only one\n         * number is given, the second parallel will be the same as the first.\n         *\n         * @sample maps/mapview/projection-parallels\n         *         LCC projection with parallels\n         * @sample maps/demo/projection-explorer\n         *         Projection explorer\n         * @type {Array<number>}\n         */\n        parallels: void 0,\n        /**\n         * Rotation of the projection in terms of degrees `[lambda, phi,\n         * gamma]`. When given, a three-axis spherical rotation is be applied\n         * to the globe prior to the projection.\n         *\n         * * `lambda` shifts the longitudes by the given value.\n         * * `phi` shifts the latitudes by the given value. Can be omitted.\n         * * `gamma` applies a _roll_. Can be omitted.\n         *\n         * @sample maps/demo/projection-explorer\n         *         Projection explorer\n         * @sample maps/mapview/projection-america-centric\n         *         America-centric world map\n         */\n        rotation: void 0\n    },\n    /**\n     * The zoom level of a map. Higher zoom levels means more zoomed in. An\n     * increase of 1 zooms in to a quarter of the viewed area (half the width\n     * and height). Defaults to fitting to the map bounds.\n     *\n     * In a `WebMercator` projection, a zoom level of 0 represents\n     * the world in a 256x256 pixel square. This is a common concept for WMS\n     * tiling software.\n     *\n     * @type   {number|undefined}\n     * @sample {highmaps} maps/mapview/center-zoom\n     *         Custom view of a world map\n     * @sample {highmaps} maps/mapview/get-view\n     *         Report the current view of a preprojected map\n     */\n    zoom: void 0\n};\n/* *\n *\n *  Default Export\n *\n * */\nexport default defaultOptions;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\n/**\n * Generic options for the placement and appearance of map insets like\n * non-contiguous territories.\n *\n * @since 10.0.0\n * @product      highmaps\n * @optionparent mapView.insetOptions\n */\nvar defaultOptions = {\n    /**\n     * The border color of the insets.\n     *\n     * @sample maps/mapview/insetoptions-border\n     *         Inset border options\n     * @type {Highcharts.ColorType}\n     */\n    borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n    /**\n     * The pixel border width of the insets.\n     *\n     * @sample maps/mapview/insetoptions-border\n     *         Inset border options\n     */\n    borderWidth: 1,\n    /**\n     * @ignore-option\n     */\n    center: [0, 0],\n    /**\n     * The padding of the insets. Can be either a number of pixels, a percentage\n     * string, or an array of either. If an array is given, it sets the top,\n     * right, bottom, left paddings respectively.\n     *\n     * @type {number|string|Array<number|string>}\n     */\n    padding: '10%',\n    /**\n     * What coordinate system the `field` and `borderPath` should relate to. If\n     * `plotBox`, they will be fixed to the plot box and responsively move in\n     * relation to the main map. If `mapBoundingBox`, they will be fixed to the\n     * map bounding box, which is constant and centered in different chart sizes\n     * and ratios.\n     *\n     * @validvalue [\"plotBox\", \"mapBoundingBox\"]\n     */\n    relativeTo: 'mapBoundingBox',\n    /**\n     * What units to use for the `field` and `borderPath` geometries. If\n     * `percent` (default), they relate to the box given in `relativeTo`. If\n     * `pixels`, they are absolute values.\n     *\n     * @validvalue [\"percent\", \"pixels\"]\n     */\n    units: 'percent'\n};\n/**\n * The individual MapView insets, typically used for non-contiguous areas of a\n * country. Each item inherits from the generic `insetOptions`.\n *\n * Some of the TopoJSON files of the [Highcharts Map\n * Collection](https://code.highcharts.com/mapdata/) include a property called\n * `hc-recommended-mapview`, and some of these include insets. In order to\n * override the recommended inset options, an inset option with a matching id\n * can be applied, and it will be merged into the embedded settings.\n *\n * @sample      maps/mapview/insets-extended\n *              Extending the embedded insets\n * @sample      maps/mapview/insets-complete\n *              Complete inset config from scratch\n *\n * @extends     mapView.insetOptions\n * @type        Array<Object>\n * @product     highmaps\n * @apioption   mapView.insets\n */\n/**\n * A geometry object of type `MultiLineString` defining the border path of the\n * inset in terms of `units`. If undefined, a border is rendered around the\n * `field` geometry. It is recommended that the `borderPath` partly follows the\n * outline of the `field` in order to make pointer positioning consistent.\n *\n * @sample    maps/mapview/insets-complete\n *            Complete inset config with `borderPath`\n *\n * @product   highmaps\n * @type      {Object|undefined}\n * @apioption mapView.insets.borderPath\n */\n/**\n * A geometry object of type `Polygon` defining where in the chart the inset\n * should be rendered, in terms of `units` and relative to the `relativeTo`\n * setting. If a `borderPath` is omitted, a border is rendered around the field.\n * If undefined, the inset is rendered in the full plot area.\n *\n * @sample    maps/mapview/insets-extended\n *            Border path emitted, field is rendered\n *\n * @product   highmaps\n * @type      {Object|undefined}\n * @apioption mapView.insets.field\n */\n/**\n * A geometry object of type `Polygon` encircling the shapes that should be\n * rendered in the inset, in terms of geographic coordinates. Geometries within\n * this geometry are removed from the default map view and rendered in the\n * inset.\n *\n * @sample    maps/mapview/insets-complete\n *            Complete inset config with `geoBounds`\n *\n * @product   highmaps\n * @type      {Object}\n * @apioption mapView.insets.geoBounds\n */\n/**\n * The id of the inset, used for internal reference.\n *\n * @sample    maps/mapview/insets-extended\n *            Extending recommended insets by id\n *\n * @product   highmaps\n * @type      {string}\n * @apioption mapView.insets.id\n */\n/**\n * The projection options for the inset.\n *\n * @product   highmaps\n * @type      {Object}\n * @extends   mapView.projection\n * @apioption mapView.insets.projection\n */\n/* *\n *\n *  Default Export\n *\n * */\nexport default defaultOptions;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport Chart from '../Core/Chart/Chart.js';\nimport F from '../Core/FormatUtilities.js';\nvar format = F.format;\nimport H from '../Core/Globals.js';\nvar win = H.win;\nimport U from '../Core/Utilities.js';\nvar error = U.error, extend = U.extend, merge = U.merge, wrap = U.wrap;\n/**\n * Represents the loose structure of a geographic JSON file.\n *\n * @interface Highcharts.GeoJSON\n */ /**\n* Full copyright note of the geographic data.\n* @name Highcharts.GeoJSON#copyright\n* @type {string|undefined}\n*/ /**\n* Short copyright note of the geographic data suitable for watermarks.\n* @name Highcharts.GeoJSON#copyrightShort\n* @type {string|undefined}\n*/ /**\n* Additional meta information based on the coordinate reference system.\n* @name Highcharts.GeoJSON#crs\n* @type {Highcharts.Dictionary<any>|undefined}\n*/ /**\n* Data sets of geographic features.\n* @name Highcharts.GeoJSON#features\n* @type {Array<Highcharts.GeoJSONFeature>}\n*/ /**\n* Map projections and transformations to be used when calculating between\n* lat/lon and chart values. Required for lat/lon support on maps. Allows\n* resizing, rotating, and moving portions of a map within its projected\n* coordinate system while still retaining lat/lon support. If using lat/lon\n* on a portion of the map that does not match a `hitZone`, the definition with\n* the key `default` is used.\n* @name Highcharts.GeoJSON#hc-transform\n* @type {Highcharts.Dictionary<Highcharts.GeoJSONTranslation>|undefined}\n*/ /**\n* Title of the geographic data.\n* @name Highcharts.GeoJSON#title\n* @type {string|undefined}\n*/ /**\n* Type of the geographic data. Type of an optimized map collection is\n* `FeatureCollection`.\n* @name Highcharts.GeoJSON#type\n* @type {string|undefined}\n*/ /**\n* Version of the geographic data.\n* @name Highcharts.GeoJSON#version\n* @type {string|undefined}\n*/\n/**\n * Data set of a geographic feature.\n * @interface Highcharts.GeoJSONFeature\n * @extends Highcharts.Dictionary<*>\n */ /**\n* Data type of the geographic feature.\n* @name Highcharts.GeoJSONFeature#type\n* @type {string}\n*/\n/**\n * Describes the map projection and transformations applied to a portion of\n * a map.\n * @interface Highcharts.GeoJSONTranslation\n */ /**\n* The coordinate reference system used to generate this portion of the map.\n* @name Highcharts.GeoJSONTranslation#crs\n* @type {string}\n*/ /**\n* Define the portion of the map that this defintion applies to. Defined as a\n* GeoJSON polygon feature object, with `type` and `coordinates` properties.\n* @name Highcharts.GeoJSONTranslation#hitZone\n* @type {Highcharts.Dictionary<*>|undefined}\n*/ /**\n* Property for internal use for maps generated by Highsoft.\n* @name Highcharts.GeoJSONTranslation#jsonmarginX\n* @type {number|undefined}\n*/ /**\n* Property for internal use for maps generated by Highsoft.\n* @name Highcharts.GeoJSONTranslation#jsonmarginY\n* @type {number|undefined}\n*/ /**\n* Property for internal use for maps generated by Highsoft.\n* @name Highcharts.GeoJSONTranslation#jsonres\n* @type {number|undefined}\n*/ /**\n* Specifies clockwise rotation of the coordinates after the projection, but\n* before scaling and panning. Defined in radians, relative to the coordinate\n* system origin.\n* @name Highcharts.GeoJSONTranslation#rotation\n* @type {number|undefined}\n*/ /**\n* The scaling factor applied to the projected coordinates.\n* @name Highcharts.GeoJSONTranslation#scale\n* @type {number|undefined}\n*/ /**\n* Property for internal use for maps generated by Highsoft.\n* @name Highcharts.GeoJSONTranslation#xoffset\n* @type {number|undefined}\n*/ /**\n* X offset of projected coordinates after scaling.\n* @name Highcharts.GeoJSONTranslation#xpan\n* @type {number|undefined}\n*/ /**\n* Property for internal use for maps generated by Highsoft.\n* @name Highcharts.GeoJSONTranslation#yoffset\n* @type {number|undefined}\n*/ /**\n* Y offset of projected coordinates after scaling.\n* @name Highcharts.GeoJSONTranslation#ypan\n* @type {number|undefined}\n*/\n/**\n * Result object of a map transformation.\n *\n * @interface Highcharts.ProjectedXY\n */ /**\n* X coordinate in projected units.\n* @name Highcharts.ProjectedXY#x\n* @type {number}\n*/ /**\n* Y coordinate in projected units\n* @name Highcharts.ProjectedXY#y\n* @type {number}\n*/\n/**\n * A latitude/longitude object.\n *\n * @interface Highcharts.MapLonLatObject\n */ /**\n* The latitude.\n* @name Highcharts.MapLonLatObject#lat\n* @type {number}\n*/ /**\n* The longitude.\n* @name Highcharts.MapLonLatObject#lon\n* @type {number}\n*/\n/**\n * An array of longitude, latitude.\n *\n * @typedef {Array<number>} Highcharts.LonLatArray\n */\n/**\n * A TopoJSON object, see description on the\n * [project's GitHub page](https://github.com/topojson/topojson).\n *\n * @typedef {Object} Highcharts.TopoJSON\n */\n''; // detach doclets above\n/* eslint-disable no-invalid-this, valid-jsdoc */\n/**\n * Highcharts Maps only. Get point from latitude and longitude using specified\n * transform definition.\n *\n * @requires modules/map\n *\n * @sample maps/series/latlon-transform/\n *         Use specific transformation for lat/lon\n *\n * @function Highcharts.Chart#transformFromLatLon\n *\n * @param {Highcharts.MapLonLatObject} latLon\n *        A latitude/longitude object.\n *\n * @param {*} transform\n *        The transform definition to use as explained in the\n *        {@link https://www.highcharts.com/docs/maps/latlon|documentation}.\n *\n * @return {ProjectedXY}\n *         An object with `x` and `y` properties.\n */\nChart.prototype.transformFromLatLon = function (latLon, transform) {\n    /**\n     * Allows to manually load the proj4 library from Highcharts options\n     * instead of the `window`.\n     * In case of loading the library from a `script` tag,\n     * this option is not needed, it will be loaded from there by default.\n     *\n     * @type      {Function}\n     * @product   highmaps\n     * @apioption chart.proj4\n     */\n    var proj4 = this.options.chart.proj4 || win.proj4;\n    if (!proj4) {\n        error(21, false, this);\n        return;\n    }\n    var _a = transform.jsonmarginX, jsonmarginX = _a === void 0 ? 0 : _a, _b = transform.jsonmarginY, jsonmarginY = _b === void 0 ? 0 : _b, _c = transform.jsonres, jsonres = _c === void 0 ? 1 : _c, _d = transform.scale, scale = _d === void 0 ? 1 : _d, _e = transform.xoffset, xoffset = _e === void 0 ? 0 : _e, _f = transform.xpan, xpan = _f === void 0 ? 0 : _f, _g = transform.yoffset, yoffset = _g === void 0 ? 0 : _g, _h = transform.ypan, ypan = _h === void 0 ? 0 : _h;\n    var projected = proj4(transform.crs, [latLon.lon, latLon.lat]), cosAngle = transform.cosAngle ||\n        (transform.rotation && Math.cos(transform.rotation)), sinAngle = transform.sinAngle ||\n        (transform.rotation && Math.sin(transform.rotation)), rotated = transform.rotation ? [\n        projected[0] * cosAngle + projected[1] * sinAngle,\n        -projected[0] * sinAngle + projected[1] * cosAngle\n    ] : projected;\n    return {\n        x: ((rotated[0] - xoffset) * scale + xpan) * jsonres + jsonmarginX,\n        y: -(((yoffset - rotated[1]) * scale + ypan) * jsonres - jsonmarginY)\n    };\n};\n/**\n * Highcharts Maps only. Get latLon from point using specified transform\n * definition. The method returns an object with the numeric properties `lat`\n * and `lon`.\n *\n * @requires modules/map\n *\n * @sample maps/series/latlon-transform/ Use specific transformation for lat/lon\n *\n * @function Highcharts.Chart#transformToLatLon\n *\n * @param {Highcharts.Point|Highcharts.ProjectedXY} point A `Point` instance, or\n *        any object containing the properties `x` and `y` with numeric values.\n *\n * @param {*} transform The transform definition to use as explained in the\n *        {@link https://www.highcharts.com/docs/maps/latlon|documentation}.\n *\n * @return {Highcharts.MapLonLatObject|undefined} An object with `lat` and `lon`\n *         properties.\n */\nChart.prototype.transformToLatLon = function (point, transform) {\n    var proj4 = this.options.chart.proj4 || win.proj4;\n    if (!proj4) {\n        error(21, false, this);\n        return;\n    }\n    if (point.y === null) {\n        return;\n    }\n    var _a = transform.jsonmarginX, jsonmarginX = _a === void 0 ? 0 : _a, _b = transform.jsonmarginY, jsonmarginY = _b === void 0 ? 0 : _b, _c = transform.jsonres, jsonres = _c === void 0 ? 1 : _c, _d = transform.scale, scale = _d === void 0 ? 1 : _d, _e = transform.xoffset, xoffset = _e === void 0 ? 0 : _e, _f = transform.xpan, xpan = _f === void 0 ? 0 : _f, _g = transform.yoffset, yoffset = _g === void 0 ? 0 : _g, _h = transform.ypan, ypan = _h === void 0 ? 0 : _h;\n    var normalized = {\n        x: ((point.x - jsonmarginX) / jsonres - xpan) / scale + xoffset,\n        y: ((point.y - jsonmarginY) / jsonres + ypan) / scale + yoffset\n    }, cosAngle = transform.cosAngle ||\n        (transform.rotation && Math.cos(transform.rotation)), sinAngle = transform.sinAngle ||\n        (transform.rotation && Math.sin(transform.rotation)), \n    // Note: Inverted sinAngle to reverse rotation direction\n    projected = proj4(transform.crs, 'WGS84', transform.rotation ? {\n        x: normalized.x * cosAngle + normalized.y * -sinAngle,\n        y: normalized.x * sinAngle + normalized.y * cosAngle\n    } : normalized);\n    return { lat: projected.y, lon: projected.x };\n};\n/**\n * Deprecated. Use `MapView.projectedUnitsToLonLat` instead.\n *\n * @deprecated\n *\n * @requires modules/map\n *\n * @function Highcharts.Chart#fromPointToLatLon\n *\n * @param {Highcharts.Point|Highcharts.ProjectedXY} point A `Point`\n *        instance or anything containing `x` and `y` properties with numeric\n *        values.\n *\n * @return {Highcharts.MapLonLatObject|undefined} An object with `lat` and `lon`\n *         properties.\n */\nChart.prototype.fromPointToLatLon = function (point) {\n    return this.mapView && this.mapView.projectedUnitsToLonLat(point);\n};\n/**\n * Deprecated. Use `MapView.lonLatToProjectedUnits` instead.\n *\n * @deprecated\n *\n * @requires modules/map\n *\n * @function Highcharts.Chart#fromLatLonToPoint\n *\n * @param {Highcharts.MapLonLatObject} lonLat Coordinates.\n *\n * @return {Highcharts.ProjectedXY}\n *      X and Y coordinates in terms of projected values\n */\nChart.prototype.fromLatLonToPoint = function (lonLat) {\n    return this.mapView && this.mapView.lonLatToProjectedUnits(lonLat);\n};\n/*\n * Convert a TopoJSON topology to GeoJSON. By default the first object is\n * handled.\n * Based on https://github.com/topojson/topojson-specification\n*/\nfunction topo2geo(topology, objectName) {\n    // Decode first object/feature as default\n    if (!objectName) {\n        objectName = Object.keys(topology.objects)[0];\n    }\n    var object = topology.objects[objectName];\n    // Already decoded => return cache\n    if (object['hc-decoded-geojson']) {\n        return object['hc-decoded-geojson'];\n    }\n    // Do the initial transform\n    var arcsArray = topology.arcs;\n    if (topology.transform) {\n        var _a = topology.transform, scale_1 = _a.scale, translate_1 = _a.translate;\n        arcsArray = topology.arcs.map(function (arc) {\n            var x = 0, y = 0;\n            return arc.map(function (position) {\n                position = position.slice();\n                position[0] = (x += position[0]) * scale_1[0] + translate_1[0];\n                position[1] = (y += position[1]) * scale_1[1] + translate_1[1];\n                return position;\n            });\n        });\n    }\n    // Recurse down any depth of multi-dimentional arrays of arcs and insert\n    // the coordinates\n    var arcsToCoordinates = function (arcs) {\n        if (typeof arcs[0] === 'number') {\n            return arcs.reduce(function (coordinates, arcNo, i) {\n                var arc = arcNo < 0 ? arcsArray[~arcNo] : arcsArray[arcNo];\n                // The first point of an arc is always identical to the last\n                // point of the previes arc, so slice it off to save further\n                // processing.\n                if (arcNo < 0) {\n                    arc = arc.slice(0, i === 0 ? arc.length : arc.length - 1);\n                    arc.reverse();\n                }\n                else if (i) {\n                    arc = arc.slice(1);\n                }\n                return coordinates.concat(arc);\n            }, []);\n        }\n        return arcs.map(arcsToCoordinates);\n    };\n    var features = object.geometries\n        .map(function (geometry) { return ({\n        type: 'Feature',\n        properties: geometry.properties,\n        geometry: {\n            type: geometry.type,\n            coordinates: geometry.coordinates ||\n                arcsToCoordinates(geometry.arcs)\n        }\n    }); });\n    var geojson = {\n        type: 'FeatureCollection',\n        copyright: topology.copyright,\n        copyrightShort: topology.copyrightShort,\n        copyrightUrl: topology.copyrightUrl,\n        features: features,\n        'hc-recommended-mapview': object['hc-recommended-mapview'],\n        bbox: topology.bbox,\n        title: topology.title\n    };\n    object['hc-decoded-geojson'] = geojson;\n    return geojson;\n}\n/**\n * Highcharts Maps only. Restructure a GeoJSON or TopoJSON object in preparation\n * to be read directly by the\n * {@link https://api.highcharts.com/highmaps/plotOptions.series.mapData|series.mapData}\n * option. The object will be broken down to fit a specific Highcharts type,\n * either `map`, `mapline` or `mappoint`. Meta data in GeoJSON's properties\n * object will be copied directly over to {@link Point.properties} in Highcharts\n * Maps.\n *\n * @requires modules/map\n *\n * @sample maps/demo/geojson/ Simple areas\n * @sample maps/demo/mapline-mappoint/ Multiple types\n * @sample maps/series/mapdata-multiple/ Multiple map sources\n *\n * @function Highcharts.geojson\n *\n * @param {Highcharts.GeoJSON|Highcharts.TopoJSON} json The GeoJSON or TopoJSON\n *        structure to parse, represented as a JavaScript object.\n *\n * @param {string} [hType=map] The Highcharts Maps series type to prepare for.\n *        Setting \"map\" will return GeoJSON polygons and multipolygons. Setting\n *        \"mapline\" will return GeoJSON linestrings and multilinestrings.\n *        Setting \"mappoint\" will return GeoJSON points and multipoints.\n *\n *\n * @return {Array<*>} An object ready for the `mapData` option.\n */\nfunction geojson(json, hType, series) {\n    if (hType === void 0) { hType = 'map'; }\n    var mapData = [];\n    var geojson = json.type === 'Topology' ? topo2geo(json) : json;\n    geojson.features.forEach(function (feature) {\n        var geometry = feature.geometry || {}, type = geometry.type, coordinates = geometry.coordinates, properties = feature.properties;\n        var pointOptions;\n        if ((hType === 'map' || hType === 'mapbubble') &&\n            (type === 'Polygon' || type === 'MultiPolygon')) {\n            if (coordinates.length) {\n                pointOptions = { geometry: { coordinates: coordinates, type: type } };\n            }\n        }\n        else if (hType === 'mapline' &&\n            (type === 'LineString' ||\n                type === 'MultiLineString')) {\n            if (coordinates.length) {\n                pointOptions = { geometry: { coordinates: coordinates, type: type } };\n            }\n        }\n        else if (hType === 'mappoint' && type === 'Point') {\n            if (coordinates.length) {\n                pointOptions = { geometry: { coordinates: coordinates, type: type } };\n            }\n        }\n        if (pointOptions) {\n            var name_1 = properties && (properties.name || properties.NAME), lon = properties && properties.lon, lat = properties && properties.lat;\n            mapData.push(extend(pointOptions, {\n                lat: typeof lat === 'number' ? lat : void 0,\n                lon: typeof lon === 'number' ? lon : void 0,\n                name: typeof name_1 === 'string' ? name_1 : void 0,\n                /**\n                 * In Highcharts Maps, when data is loaded from GeoJSON, the\n                 * GeoJSON item's properies are copied over here.\n                 *\n                 * @requires modules/map\n                 * @name Highcharts.Point#properties\n                 * @type {*}\n                 */\n                properties: properties\n            }));\n        }\n    });\n    // Create a credits text that includes map source, to be picked up in\n    // Chart.addCredits\n    if (series && geojson.copyrightShort) {\n        series.chart.mapCredits = format(series.chart.options.credits.mapText, { geojson: geojson });\n        series.chart.mapCreditsFull = format(series.chart.options.credits.mapTextFull, { geojson: geojson });\n    }\n    return mapData;\n}\n// Override addCredits to include map source by default\nwrap(Chart.prototype, 'addCredits', function (proceed, credits) {\n    credits = merge(true, this.options.credits, credits);\n    // Disable credits link if map credits enabled. This to allow for in-text\n    // anchors.\n    if (this.mapCredits) {\n        credits.href = null;\n    }\n    proceed.call(this, credits);\n    // Add full map credits to hover\n    if (this.credits && this.mapCreditsFull) {\n        this.credits.attr({\n            title: this.mapCreditsFull\n        });\n    }\n});\nH.geojson = geojson;\nH.topo2geo = topo2geo;\nvar GeoJSONModule = {\n    geojson: geojson,\n    topo2geo: topo2geo\n};\nexport default GeoJSONModule;\n","/* *\n *\n *  (c) 2010-2021 Highsoft AS\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar isInside = function (clipEdge1, clipEdge2, p) {\n    return (clipEdge2[0] - clipEdge1[0]) * (p[1] - clipEdge1[1]) >\n        (clipEdge2[1] - clipEdge1[1]) * (p[0] - clipEdge1[0]);\n};\nvar intersection = function (clipEdge1, clipEdge2, prevPoint, currentPoint) {\n    var dc = [\n        clipEdge1[0] - clipEdge2[0],\n        clipEdge1[1] - clipEdge2[1]\n    ], dp = [\n        prevPoint[0] - currentPoint[0],\n        prevPoint[1] - currentPoint[1]\n    ], n1 = clipEdge1[0] * clipEdge2[1] - clipEdge1[1] * clipEdge2[0], n2 = prevPoint[0] * currentPoint[1] - prevPoint[1] * currentPoint[0], n3 = 1 / (dc[0] * dp[1] - dc[1] * dp[0]), intersection = [\n        (n1 * dp[0] - n2 * dc[0]) * n3,\n        (n1 * dp[1] - n2 * dc[1]) * n3\n    ];\n    intersection.isIntersection = true;\n    return intersection;\n};\nvar PolygonClip;\n(function (PolygonClip) {\n    // Simple line string clipping. Clip to bounds and insert intersection\n    // points.\n    PolygonClip.clipLineString = function (line, boundsPolygon) {\n        var ret = [], l = PolygonClip.clipPolygon(line, boundsPolygon, false);\n        for (var i = 1; i < l.length; i++) {\n            // Insert gap where two intersections follow each other\n            if (l[i].isIntersection && l[i - 1].isIntersection) {\n                ret.push(l.splice(0, i));\n                i = 0;\n            }\n            // Push the rest\n            if (i === l.length - 1) {\n                ret.push(l);\n            }\n        }\n        return ret;\n    };\n    // Clip a polygon to another polygon using the Sutherland/Hodgman algorithm.\n    PolygonClip.clipPolygon = function (subjectPolygon, boundsPolygon, closed) {\n        if (closed === void 0) { closed = true; }\n        var clipEdge1 = boundsPolygon[boundsPolygon.length - 1], clipEdge2, prevPoint, currentPoint, outputList = subjectPolygon;\n        for (var j = 0; j < boundsPolygon.length; j++) {\n            var inputList = outputList;\n            clipEdge2 = boundsPolygon[j];\n            outputList = [];\n            prevPoint = closed ?\n                // Polygon, wrap around\n                inputList[inputList.length - 1] :\n                // Open line string, don't wrap\n                inputList[0];\n            for (var i = 0; i < inputList.length; i++) {\n                currentPoint = inputList[i];\n                if (isInside(clipEdge1, clipEdge2, currentPoint)) {\n                    if (!isInside(clipEdge1, clipEdge2, prevPoint)) {\n                        outputList.push(intersection(clipEdge1, clipEdge2, prevPoint, currentPoint));\n                    }\n                    outputList.push(currentPoint);\n                }\n                else if (isInside(clipEdge1, clipEdge2, prevPoint)) {\n                    outputList.push(intersection(clipEdge1, clipEdge2, prevPoint, currentPoint));\n                }\n                prevPoint = currentPoint;\n            }\n            clipEdge1 = clipEdge2;\n        }\n        return outputList;\n    };\n})(PolygonClip || (PolygonClip = {}));\n/* *\n *\n *  Default Export\n *\n * */\nexport default PolygonClip;\n","/* *\n * Lambert Conformal Conic projection\n * */\n'use strict';\nvar sign = Math.sign ||\n    (function (n) { return (n === 0 ? 0 : n > 0 ? 1 : -1); }), scale = 63.78137, deg2rad = Math.PI / 180, halfPI = Math.PI / 2, eps10 = 1e-6, tany = function (y) { return Math.tan((halfPI + y) / 2); };\nvar LambertConformalConic = /** @class */ (function () {\n    function LambertConformalConic(options) {\n        var _a;\n        var parallels = (options.parallels || [])\n            .map(function (n) { return n * deg2rad; }), lat1 = parallels[0] || 0, lat2 = (_a = parallels[1]) !== null && _a !== void 0 ? _a : lat1, cosLat1 = Math.cos(lat1);\n        if (typeof options.projectedBounds === 'object') {\n            this.projectedBounds = options.projectedBounds;\n        }\n        // Apply the global variables\n        var n = lat1 === lat2 ?\n            Math.sin(lat1) :\n            Math.log(cosLat1 / Math.cos(lat2)) / Math.log(tany(lat2) / tany(lat1));\n        if (Math.abs(n) < 1e-10) {\n            n = (sign(n) || 1) * 1e-10;\n        }\n        this.n = n;\n        this.c = cosLat1 * Math.pow(tany(lat1), n) / n;\n    }\n    LambertConformalConic.prototype.forward = function (lonLat) {\n        var lon = lonLat[0] * deg2rad, _a = this, c = _a.c, n = _a.n, projectedBounds = _a.projectedBounds;\n        var lat = lonLat[1] * deg2rad;\n        if (c > 0) {\n            if (lat < -halfPI + eps10) {\n                lat = -halfPI + eps10;\n            }\n        }\n        else {\n            if (lat > halfPI - eps10) {\n                lat = halfPI - eps10;\n            }\n        }\n        var r = c / Math.pow(tany(lat), n), x = r * Math.sin(n * lon) * scale, y = (c - r * Math.cos(n * lon)) * scale, xy = [x, y];\n        if (projectedBounds && (x < projectedBounds.x1 ||\n            x > projectedBounds.x2 ||\n            y < projectedBounds.y1 ||\n            y > projectedBounds.y2)) {\n            xy.outside = true;\n        }\n        return xy;\n    };\n    LambertConformalConic.prototype.inverse = function (xy) {\n        var x = xy[0] / scale, y = xy[1] / scale, _a = this, c = _a.c, n = _a.n, cy = c - y, rho = sign(n) * Math.sqrt(x * x + cy * cy);\n        var l = Math.atan2(x, Math.abs(cy)) * sign(cy);\n        if (cy * n < 0) {\n            l -= Math.PI * sign(x) * sign(cy);\n        }\n        return [\n            (l / n) / deg2rad,\n            (2 * Math.atan(Math.pow(c / rho, 1 / n)) - halfPI) / deg2rad\n        ];\n    };\n    return LambertConformalConic;\n}());\nexport default LambertConformalConic;\n","/* *\n *\n * Equal Earth projection, an equal-area projection designed to minimize\n * distortion and remain pleasing to the eye.\n *\n * Invented by Bojan Šavrič, Bernhard Jenny, and Tom Patterson in 2018. It is\n * inspired by the widely used Robinson projection.\n *\n * */\n'use strict';\nvar A1 = 1.340264, A2 = -0.081106, A3 = 0.000893, A4 = 0.003796, M = Math.sqrt(3) / 2.0, scale = 74.03120656864502;\nvar EqualEarth = /** @class */ (function () {\n    function EqualEarth() {\n        this.bounds = {\n            x1: -200.37508342789243,\n            x2: 200.37508342789243,\n            y1: -97.52595454902263,\n            y2: 97.52595454902263\n        };\n    }\n    EqualEarth.prototype.forward = function (lonLat) {\n        var d = Math.PI / 180, paramLat = Math.asin(M * Math.sin(lonLat[1] * d)), paramLatSq = paramLat * paramLat, paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n        var x = lonLat[0] * d * Math.cos(paramLat) * scale / (M *\n            (A1 +\n                3 * A2 * paramLatSq +\n                paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)));\n        var y = paramLat * scale * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq));\n        return [x, y];\n    };\n    EqualEarth.prototype.inverse = function (xy) {\n        var x = xy[0] / scale, y = xy[1] / scale, d = 180 / Math.PI, epsilon = 1e-9, iterations = 12;\n        var paramLat = y, paramLatSq, paramLatPow6, fy, fpy, dlat, i;\n        for (i = 0; i < iterations; ++i) {\n            paramLatSq = paramLat * paramLat;\n            paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n            fy = paramLat * (A1 + A2 * paramLatSq + paramLatPow6 * (A3 + A4 * paramLatSq)) - y;\n            fpy = A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq);\n            paramLat -= dlat = fy / fpy;\n            if (Math.abs(dlat) < epsilon) {\n                break;\n            }\n        }\n        paramLatSq = paramLat * paramLat;\n        paramLatPow6 = paramLatSq * paramLatSq * paramLatSq;\n        var lon = d * M * x * (A1 + 3 * A2 * paramLatSq + paramLatPow6 * (7 * A3 + 9 * A4 * paramLatSq)) / Math.cos(paramLat);\n        var lat = d * Math.asin(Math.sin(paramLat) / M);\n        return [lon, lat];\n    };\n    return EqualEarth;\n}());\nexport default EqualEarth;\n","/* *\n * Miller projection\n * */\n'use strict';\nvar quarterPI = Math.PI / 4, deg2rad = Math.PI / 180, scale = 63.78137;\nvar Miller = /** @class */ (function () {\n    function Miller() {\n        this.bounds = {\n            x1: -200.37508342789243,\n            x2: 200.37508342789243,\n            y1: -146.91480769173063,\n            y2: 146.91480769173063\n        };\n    }\n    Miller.prototype.forward = function (lonLat) {\n        return [\n            lonLat[0] * deg2rad * scale,\n            1.25 * scale * Math.log(Math.tan(quarterPI + 0.4 * lonLat[1] * deg2rad))\n        ];\n    };\n    Miller.prototype.inverse = function (xy) {\n        return [\n            (xy[0] / scale) / deg2rad,\n            2.5 * (Math.atan(Math.exp(0.8 * (xy[1] / scale))) - quarterPI) / deg2rad\n        ];\n    };\n    return Miller;\n}());\nexport default Miller;\n","/* *\n * Orthographic projection\n * */\n'use strict';\nvar deg2rad = Math.PI / 180, scale = 63.78460826781007;\nvar Orthographic = /** @class */ (function () {\n    function Orthographic() {\n        this.antimeridianCutting = false;\n        this.bounds = {\n            x1: -scale,\n            x2: scale,\n            y1: -scale,\n            y2: scale\n        };\n    }\n    Orthographic.prototype.forward = function (lonLat) {\n        var lonDeg = lonLat[0], latDeg = lonLat[1];\n        var lat = latDeg * deg2rad;\n        var xy = [\n            Math.cos(lat) * Math.sin(lonDeg * deg2rad) * scale,\n            Math.sin(lat) * scale\n        ];\n        if (lonDeg < -90 || lonDeg > 90) {\n            xy.outside = true;\n        }\n        return xy;\n    };\n    Orthographic.prototype.inverse = function (xy) {\n        var x = xy[0] / scale, y = xy[1] / scale, z = Math.sqrt(x * x + y * y), c = Math.asin(z), cSin = Math.sin(c), cCos = Math.cos(c);\n        return [\n            Math.atan2(x * cSin, z * cCos) / deg2rad,\n            Math.asin(z && y * cSin / z) / deg2rad\n        ];\n    };\n    return Orthographic;\n}());\nexport default Orthographic;\n","/* *\n * Web Mercator projection, used for most online map tile services\n * */\n'use strict';\nvar maxLatitude = 85.0511287798, // The latitude that defines a square\nr = 63.78137, deg2rad = Math.PI / 180;\nvar WebMercator = /** @class */ (function () {\n    function WebMercator() {\n        this.bounds = {\n            x1: -200.37508342789243,\n            x2: 200.37508342789243,\n            y1: -200.3750834278071,\n            y2: 200.3750834278071\n        };\n        this.maxLatitude = maxLatitude;\n    }\n    WebMercator.prototype.forward = function (lonLat) {\n        var sinLat = Math.sin(lonLat[1] * deg2rad);\n        var xy = [\n            r * lonLat[0] * deg2rad,\n            r * Math.log((1 + sinLat) / (1 - sinLat)) / 2\n        ];\n        if (Math.abs(lonLat[1]) > maxLatitude) {\n            xy.outside = true;\n        }\n        return xy;\n    };\n    WebMercator.prototype.inverse = function (xy) {\n        return [\n            xy[0] / (r * deg2rad),\n            (2 * Math.atan(Math.exp(xy[1] / r)) - (Math.PI / 2)) / deg2rad\n        ];\n    };\n    return WebMercator;\n}());\nexport default WebMercator;\n","/* *\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nimport LambertConformalConic from './LambertConformalConic.js';\nimport EqualEarth from './EqualEarth.js';\nimport Miller from './Miller.js';\nimport Orthographic from './Orthographic.js';\nimport WebMercator from './WebMercator.js';\nvar registry = {\n    EqualEarth: EqualEarth,\n    LambertConformalConic: LambertConformalConic,\n    Miller: Miller,\n    Orthographic: Orthographic,\n    WebMercator: WebMercator\n};\nexport default registry;\n","/* *\n *\n *  (c) 2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport PC from '../Core/Geometry/PolygonClip.js';\nvar clipLineString = PC.clipLineString, clipPolygon = PC.clipPolygon;\nimport registry from './Projections/ProjectionRegistry.js';\nimport U from '../Core/Utilities.js';\nvar clamp = U.clamp, erase = U.erase;\nvar deg2rad = Math.PI * 2 / 360;\n// Safe padding on either side of the antimeridian to avoid points being\n// projected to the wrong side of the plane\nvar floatCorrection = 0.000001;\n// Keep longitude within -180 and 180. This is faster than using the modulo\n// operator, and preserves the distinction between -180 and 180.\nvar wrapLon = function (lon) {\n    // Replacing the if's with while would increase the range, but make it prone\n    // to crashes on bad data\n    if (lon < -180) {\n        lon += 360;\n    }\n    if (lon > 180) {\n        lon -= 360;\n    }\n    return lon;\n};\nvar Projection = /** @class */ (function () {\n    function Projection(options) {\n        if (options === void 0) { options = {}; }\n        // Whether the chart has points, lines or polygons given as coordinates\n        // with positive up, as opposed to paths in the SVG plane with positive\n        // down.\n        this.hasCoordinates = false;\n        // Whether the chart has true projection as opposed to pre-projected geojson\n        // as in the legacy map collection.\n        this.hasGeoProjection = false;\n        this.maxLatitude = 90;\n        this.options = options;\n        var name = options.name, projectedBounds = options.projectedBounds, rotation = options.rotation;\n        this.rotator = rotation ? this.getRotator(rotation) : void 0;\n        var ProjectionDefinition = name ? Projection.registry[name] : void 0;\n        if (ProjectionDefinition) {\n            this.def = new ProjectionDefinition(options);\n        }\n        var _a = this, def = _a.def, rotator = _a.rotator;\n        if (def) {\n            this.maxLatitude = def.maxLatitude || 90;\n            this.hasGeoProjection = true;\n        }\n        if (rotator && def) {\n            this.forward = function (lonLat) {\n                return def.forward(rotator.forward(lonLat));\n            };\n            this.inverse = function (xy) {\n                return rotator.inverse(def.inverse(xy));\n            };\n        }\n        else if (def) {\n            this.forward = function (lonLat) { return def.forward(lonLat); };\n            this.inverse = function (xy) { return def.inverse(xy); };\n        }\n        else if (rotator) {\n            this.forward = rotator.forward;\n            this.inverse = rotator.inverse;\n        }\n        // Projected bounds/clipping\n        this.bounds = projectedBounds === 'world' ?\n            def && def.bounds :\n            projectedBounds;\n    }\n    // Add a projection definition to the registry, accessible by its `name`.\n    Projection.add = function (name, definition) {\n        Projection.registry[name] = definition;\n    };\n    // Calculate the great circle between two given coordinates\n    Projection.greatCircle = function (point1, point2, inclusive) {\n        var atan2 = Math.atan2, cos = Math.cos, sin = Math.sin, sqrt = Math.sqrt;\n        var lat1 = point1[1] * deg2rad;\n        var lon1 = point1[0] * deg2rad;\n        var lat2 = point2[1] * deg2rad;\n        var lon2 = point2[0] * deg2rad;\n        var deltaLat = lat2 - lat1;\n        var deltaLng = lon2 - lon1;\n        var calcA = sin(deltaLat / 2) * sin(deltaLat / 2) +\n            cos(lat1) * cos(lat2) * sin(deltaLng / 2) * sin(deltaLng / 2);\n        var calcB = 2 * atan2(sqrt(calcA), sqrt(1 - calcA));\n        var distance = calcB * 6371e3; // in meters\n        var jumps = Math.round(distance / 500000); // 500 km each jump\n        var lineString = [];\n        if (inclusive) {\n            lineString.push(point1);\n        }\n        if (jumps > 1) {\n            var step = 1 / jumps;\n            for (var fraction = step; fraction < 0.999; // Account for float errors\n             fraction += step) {\n                var A = sin((1 - fraction) * calcB) / sin(calcB);\n                var B = sin(fraction * calcB) / sin(calcB);\n                var x = A * cos(lat1) * cos(lon1) + B * cos(lat2) * cos(lon2);\n                var y = A * cos(lat1) * sin(lon1) + B * cos(lat2) * sin(lon2);\n                var z = A * sin(lat1) + B * sin(lat2);\n                var lat3 = atan2(z, sqrt(x * x + y * y));\n                var lon3 = atan2(y, x);\n                lineString.push([lon3 / deg2rad, lat3 / deg2rad]);\n            }\n        }\n        if (inclusive) {\n            lineString.push(point2);\n        }\n        return lineString;\n    };\n    Projection.insertGreatCircles = function (poly) {\n        var i = poly.length - 1;\n        while (i--) {\n            // Distance in degrees, either in lon or lat. Avoid heavy\n            // calculation of true distance.\n            var roughDistance = Math.max(Math.abs(poly[i][0] - poly[i + 1][0]), Math.abs(poly[i][1] - poly[i + 1][1]));\n            if (roughDistance > 10) {\n                var greatCircle = Projection.greatCircle(poly[i], poly[i + 1]);\n                if (greatCircle.length) {\n                    poly.splice.apply(poly, __spreadArray([i + 1, 0], greatCircle, false));\n                }\n            }\n        }\n    };\n    Projection.toString = function (options) {\n        var _a = options || {}, name = _a.name, rotation = _a.rotation;\n        return [name, rotation && rotation.join(',')].join(';');\n    };\n    Projection.prototype.lineIntersectsBounds = function (line) {\n        var _a = this.bounds || {}, x1 = _a.x1, x2 = _a.x2, y1 = _a.y1, y2 = _a.y2;\n        var getIntersect = function (line, dim, val) {\n            var p1 = line[0], p2 = line[1], otherDim = dim ? 0 : 1;\n            // Check if points are on either side of the line\n            if (typeof val === 'number' && p1[dim] >= val !== p2[dim] >= val) {\n                var fraction = ((val - p1[dim]) / (p2[dim] - p1[dim])), crossingVal = p1[otherDim] +\n                    fraction * (p2[otherDim] - p1[otherDim]);\n                return dim ? [crossingVal, val] : [val, crossingVal];\n            }\n        };\n        var intersection, ret = line[0];\n        if ((intersection = getIntersect(line, 0, x1))) {\n            ret = intersection;\n            // Assuming line[1] was originally outside, replace it with the\n            // intersection point so that the horizontal intersection will\n            // be correct.\n            line[1] = intersection;\n        }\n        else if ((intersection = getIntersect(line, 0, x2))) {\n            ret = intersection;\n            line[1] = intersection;\n        }\n        if ((intersection = getIntersect(line, 1, y1))) {\n            ret = intersection;\n        }\n        else if ((intersection = getIntersect(line, 1, y2))) {\n            ret = intersection;\n        }\n        return ret;\n    };\n    /*\n     * Take the rotation options and return the appropriate projection functions\n     */\n    Projection.prototype.getRotator = function (rotation) {\n        var deltaLambda = rotation[0] * deg2rad, deltaPhi = (rotation[1] || 0) * deg2rad, deltaGamma = (rotation[2] || 0) * deg2rad;\n        var cosDeltaPhi = Math.cos(deltaPhi), sinDeltaPhi = Math.sin(deltaPhi), cosDeltaGamma = Math.cos(deltaGamma), sinDeltaGamma = Math.sin(deltaGamma);\n        if (deltaLambda === 0 && deltaPhi === 0 && deltaGamma === 0) {\n            // Don't waste processing time\n            return;\n        }\n        return {\n            forward: function (lonLat) {\n                // Lambda (lon) rotation\n                var lon = lonLat[0] * deg2rad + deltaLambda;\n                // Phi (lat) and gamma rotation\n                var lat = lonLat[1] * deg2rad, cosLat = Math.cos(lat), x = Math.cos(lon) * cosLat, y = Math.sin(lon) * cosLat, sinLat = Math.sin(lat), k = sinLat * cosDeltaPhi + x * sinDeltaPhi;\n                return [\n                    Math.atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - sinLat * sinDeltaPhi) / deg2rad,\n                    Math.asin(k * cosDeltaGamma + y * sinDeltaGamma) / deg2rad\n                ];\n            },\n            inverse: function (rLonLat) {\n                // Lambda (lon) unrotation\n                var lon = rLonLat[0] * deg2rad;\n                // Phi (lat) and gamma unrotation\n                var lat = rLonLat[1] * deg2rad, cosLat = Math.cos(lat), x = Math.cos(lon) * cosLat, y = Math.sin(lon) * cosLat, sinLat = Math.sin(lat), k = sinLat * cosDeltaGamma - y * sinDeltaGamma;\n                return [\n                    (Math.atan2(y * cosDeltaGamma + sinLat * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi) - deltaLambda) / deg2rad,\n                    Math.asin(k * cosDeltaPhi - x * sinDeltaPhi) / deg2rad\n                ];\n            }\n        };\n    };\n    // Project a lonlat coordinate position to xy. Dynamically overridden when\n    // projection is set.\n    Projection.prototype.forward = function (lonLat) {\n        return lonLat;\n    };\n    // Unproject an xy chart coordinate position to lonlat. Dynamically\n    // overridden when projection is set.\n    Projection.prototype.inverse = function (xy) {\n        return xy;\n    };\n    Projection.prototype.cutOnAntimeridian = function (poly, isPolygon) {\n        var antimeridian = 180;\n        var intersections = [];\n        var polygons = [poly];\n        poly.forEach(function (lonLat, i) {\n            var previousLonLat = poly[i - 1];\n            if (!i) {\n                if (!isPolygon) {\n                    return;\n                }\n                // Else, wrap to beginning\n                previousLonLat = poly[poly.length - 1];\n            }\n            var lon1 = previousLonLat[0], lon2 = lonLat[0];\n            if (\n            // Both points, after rotating for antimeridian, are on the far\n            // side of the Earth\n            (lon1 < -90 || lon1 > 90) &&\n                (lon2 < -90 || lon2 > 90) &&\n                // ... and on either side of the plane\n                (lon1 > 0) !== (lon2 > 0)) {\n                // Interpolate to the intersection latitude\n                var fraction = clamp((antimeridian - (lon1 + 360) % 360) /\n                    ((lon2 + 360) % 360 - (lon1 + 360) % 360), 0, 1), lat = (previousLonLat[1] +\n                    fraction * (lonLat[1] - previousLonLat[1]));\n                intersections.push({\n                    i: i,\n                    lat: lat,\n                    direction: lon1 < 0 ? 1 : -1,\n                    previousLonLat: previousLonLat,\n                    lonLat: lonLat\n                });\n            }\n        });\n        var polarIntersection;\n        if (intersections.length) {\n            if (isPolygon) {\n                // Simplified use of the even-odd rule, if there is an odd\n                // amount of intersections between the polygon and the\n                // antimeridian, the pole is inside the polygon. Applies\n                // primarily to Antarctica.\n                if (intersections.length % 2 === 1) {\n                    polarIntersection = intersections.slice().sort(function (a, b) { return Math.abs(b.lat) - Math.abs(a.lat); })[0];\n                    erase(intersections, polarIntersection);\n                }\n                // Pull out slices of the polygon that is on the opposite side\n                // of the antimeridian compared to the starting point\n                var i = intersections.length - 2;\n                while (i >= 0) {\n                    var index = intersections[i].i;\n                    var lonPlus = wrapLon(antimeridian +\n                        intersections[i].direction * floatCorrection);\n                    var lonMinus = wrapLon(antimeridian -\n                        intersections[i].direction * floatCorrection);\n                    var slice = poly.splice.apply(poly, __spreadArray([index,\n                        intersections[i + 1].i - index], Projection.greatCircle([lonPlus, intersections[i].lat], [lonPlus, intersections[i + 1].lat], true), false));\n                    // Add interpolated points close to the cut\n                    slice.push.apply(slice, Projection.greatCircle([lonMinus, intersections[i + 1].lat], [lonMinus, intersections[i].lat], true));\n                    polygons.push(slice);\n                    i -= 2;\n                }\n                // Insert dummy points close to the pole\n                if (polarIntersection) {\n                    for (var i_1 = 0; i_1 < polygons.length; i_1++) {\n                        var direction = polarIntersection.direction, lat = polarIntersection.lat, poly_1 = polygons[i_1], indexOf = poly_1.indexOf(polarIntersection.lonLat);\n                        if (indexOf > -1) {\n                            var polarLatitude = (lat < 0 ? -1 : 1) *\n                                this.maxLatitude;\n                            var lon1 = wrapLon(antimeridian +\n                                direction * floatCorrection);\n                            var lon2 = wrapLon(antimeridian -\n                                direction * floatCorrection);\n                            var polarSegment = Projection.greatCircle([lon1, lat], [lon1, polarLatitude], true);\n                            // Circle around the pole point in order to make\n                            // polygon clipping right. Without this, Antarctica\n                            // would wrap the wrong way in an LLC projection\n                            // with parallels [30, 40].\n                            for (var lon = lon1 + 120 * direction; lon > -180 && lon < 180; lon += 120 * direction) {\n                                polarSegment.push([lon, polarLatitude]);\n                            }\n                            polarSegment.push.apply(polarSegment, Projection.greatCircle([lon2, polarLatitude], [lon2, polarIntersection.lat], true));\n                            poly_1.splice.apply(poly_1, __spreadArray([indexOf,\n                                0], polarSegment, false));\n                            break;\n                        }\n                    }\n                }\n                // Map lines, not closed\n            }\n            else {\n                var i = intersections.length;\n                while (i--) {\n                    var index = intersections[i].i;\n                    var slice = poly.splice(index, poly.length, \n                    // Add interpolated point close to the cut\n                    [\n                        wrapLon(antimeridian +\n                            intersections[i].direction * floatCorrection),\n                        intersections[i].lat\n                    ]);\n                    // Add interpolated point close to the cut\n                    slice.unshift([\n                        wrapLon(antimeridian -\n                            intersections[i].direction * floatCorrection),\n                        intersections[i].lat\n                    ]);\n                    polygons.push(slice);\n                }\n            }\n        }\n        return polygons;\n    };\n    // Take a GeoJSON geometry and return a translated SVGPath\n    Projection.prototype.path = function (geometry) {\n        var _this = this;\n        var _a = this, bounds = _a.bounds, def = _a.def, rotator = _a.rotator;\n        var antimeridian = 180;\n        var path = [];\n        var isPolygon = geometry.type === 'Polygon' ||\n            geometry.type === 'MultiPolygon';\n        // @todo: It doesn't really have to do with whether north is\n        // positive. It depends on whether the coordinates are\n        // pre-projected.\n        var hasGeoProjection = this.hasGeoProjection;\n        // Detect whether we need to do antimeridian cutting and clipping to\n        // bounds. The alternative (currently for Orthographic) is to apply a\n        // clip angle.\n        var projectingToPlane = !def || def.antimeridianCutting !== false;\n        // We need to rotate in a separate step before applying antimeridian\n        // cutting\n        var preclip = projectingToPlane ? rotator : void 0;\n        var postclip = projectingToPlane ? (def || this) : this;\n        var boundsPolygon;\n        if (bounds) {\n            boundsPolygon = [\n                [bounds.x1, bounds.y1],\n                [bounds.x2, bounds.y1],\n                [bounds.x2, bounds.y2],\n                [bounds.x1, bounds.y2]\n            ];\n        }\n        var addToPath = function (polygon) {\n            // Create a copy of the original coordinates. The copy applies a\n            // correction of points close to the antimeridian in order to\n            // prevent the points to be projected to the wrong side of the\n            // plane. Float errors in topojson or in the projection may cause\n            // that.\n            var poly = polygon.map(function (lonLat) {\n                if (projectingToPlane) {\n                    if (preclip) {\n                        lonLat = preclip.forward(lonLat);\n                    }\n                    var lon = lonLat[0];\n                    if (Math.abs(lon - antimeridian) < floatCorrection) {\n                        if (lon < antimeridian) {\n                            lon = antimeridian - floatCorrection;\n                        }\n                        else {\n                            lon = antimeridian + floatCorrection;\n                        }\n                    }\n                    lonLat = [lon, lonLat[1]];\n                }\n                return lonLat;\n            });\n            var polygons = [poly];\n            if (hasGeoProjection) {\n                // Insert great circles into long straight lines\n                Projection.insertGreatCircles(poly);\n                if (projectingToPlane) {\n                    polygons = _this.cutOnAntimeridian(poly, isPolygon);\n                }\n            }\n            polygons.forEach(function (poly) {\n                if (poly.length < 2) {\n                    return;\n                }\n                var movedTo = false;\n                var firstValidLonLat;\n                var lastValidLonLat;\n                var gap = false;\n                var pushToPath = function (point) {\n                    if (!movedTo) {\n                        path.push(['M', point[0], point[1]]);\n                        movedTo = true;\n                    }\n                    else {\n                        path.push(['L', point[0], point[1]]);\n                    }\n                };\n                var someOutside = false, someInside = false;\n                var points = poly.map(function (lonLat) {\n                    var xy = postclip.forward(lonLat);\n                    if (xy.outside) {\n                        someOutside = true;\n                    }\n                    else {\n                        someInside = true;\n                    }\n                    // Mercator projects pole points to Infinity, and\n                    // clipPolygon is not able to handle it.\n                    if (xy[1] === Infinity) {\n                        xy[1] = 10e9;\n                    }\n                    else if (xy[1] === -Infinity) {\n                        xy[1] = -10e9;\n                    }\n                    return xy;\n                });\n                if (projectingToPlane) {\n                    // Wrap around in order for pointInPolygon to work\n                    if (isPolygon) {\n                        points.push(points[0]);\n                    }\n                    if (someOutside) {\n                        // All points are outside\n                        if (!someInside) {\n                            return;\n                        }\n                        // Some inside, some outside. Clip to the bounds.\n                        if (boundsPolygon) {\n                            // Polygons\n                            if (isPolygon) {\n                                points = clipPolygon(points, boundsPolygon);\n                                // Linestrings\n                            }\n                            else if (bounds) {\n                                clipLineString(points, boundsPolygon)\n                                    .forEach(function (points) {\n                                    movedTo = false;\n                                    points.forEach(pushToPath);\n                                });\n                                return;\n                            }\n                        }\n                    }\n                    points.forEach(pushToPath);\n                    // For orthographic projection, or when a clipAngle applies\n                }\n                else {\n                    for (var i = 0; i < points.length; i++) {\n                        var lonLat = poly[i], point = points[i];\n                        if (!point.outside) {\n                            // In order to be able to interpolate if the first\n                            // or last point is invalid (on the far side of the\n                            // globe in an orthographic projection), we need to\n                            // push the first valid point to the end of the\n                            // polygon.\n                            if (isPolygon && !firstValidLonLat) {\n                                firstValidLonLat = lonLat;\n                                poly.push(lonLat);\n                                points.push(point);\n                            }\n                            // When entering the first valid point after a gap\n                            // of invalid points, typically on the far side of\n                            // the globe in an orthographic projection.\n                            if (gap && lastValidLonLat) {\n                                // For areas, in an orthographic projection, the\n                                // great circle between two visible points will\n                                // be close to the horizon. A possible exception\n                                // may be when the two points are on opposite\n                                // sides of the globe. It that poses a problem,\n                                // we may have to rewrite this to use the small\n                                // circle related to the current lon0 and lat0.\n                                if (isPolygon && hasGeoProjection) {\n                                    var greatCircle = Projection.greatCircle(lastValidLonLat, lonLat);\n                                    greatCircle.forEach(function (lonLat) {\n                                        return pushToPath(postclip.forward(lonLat));\n                                    });\n                                    // For lines, just jump over the gap\n                                }\n                                else {\n                                    movedTo = false;\n                                }\n                            }\n                            pushToPath(point);\n                            lastValidLonLat = lonLat;\n                            gap = false;\n                        }\n                        else {\n                            gap = true;\n                        }\n                    }\n                }\n            });\n        };\n        if (geometry.type === 'LineString') {\n            addToPath(geometry.coordinates);\n        }\n        else if (geometry.type === 'MultiLineString') {\n            geometry.coordinates.forEach(function (c) { return addToPath(c); });\n        }\n        else if (geometry.type === 'Polygon') {\n            geometry.coordinates.forEach(function (c) { return addToPath(c); });\n            if (path.length) {\n                path.push(['Z']);\n            }\n        }\n        else if (geometry.type === 'MultiPolygon') {\n            geometry.coordinates.forEach(function (polygons) {\n                polygons.forEach(function (c) { return addToPath(c); });\n            });\n            if (path.length) {\n                path.push(['Z']);\n            }\n        }\n        return path;\n    };\n    Projection.registry = registry;\n    return Projection;\n}());\nexport default Projection;\n","/* *\n *\n *  (c) 2010-2020 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport defaultOptions from './MapViewOptionsDefault.js';\nimport defaultInsetsOptions from './MapViewInsetsOptionsDefault.js';\nimport GeoJSONModule from '../Extensions/GeoJSON.js';\nvar topo2geo = GeoJSONModule.topo2geo;\nimport MapChart from '../Core/Chart/MapChart.js';\nvar maps = MapChart.maps;\nimport MU from './MapUtilities.js';\nvar boundsFromPath = MU.boundsFromPath, pointInPolygon = MU.pointInPolygon;\nimport Projection from './Projection.js';\nimport U from '../Core/Utilities.js';\nvar addEvent = U.addEvent, clamp = U.clamp, fireEvent = U.fireEvent, isArray = U.isArray, isNumber = U.isNumber, isObject = U.isObject, isString = U.isString, merge = U.merge, pick = U.pick, relativeLength = U.relativeLength;\n/**\n * The world size in terms of 10k meters in the Web Mercator projection, to\n * match a 256 square tile to zoom level 0.\n * @private\n */\nvar worldSize = 400.979322;\nvar tileSize = 256;\n// Compute the zoom from given bounds and the size of the playing field. Used in\n// two places, hence the local function.\nvar zoomFromBounds = function (b, playingField) {\n    var width = playingField.width, height = playingField.height, scaleToField = Math.max((b.x2 - b.x1) / (width / tileSize), (b.y2 - b.y1) / (height / tileSize));\n    return Math.log(worldSize / scaleToField) / Math.log(2);\n};\n/*\nconst mergeCollections = <\n    T extends Array<AnyRecord|undefined>\n>(a: T, b: T): T => {\n    b.forEach((newer, i): void => {\n        // Only merge by id supported for now. We may consider later to support\n        // more complex rules like those of `Chart.update` with `oneToOne`, but\n        // it is probably not needed. Existing insets can be disabled by\n        // overwriting the `geoBounds` with empty data.\n        if (newer && isString(newer.id)) {\n            const older = U.find(\n                a,\n                (aItem): boolean => (aItem && aItem.id) === newer.id\n            );\n            if (older) {\n                const aIndex = a.indexOf(older);\n                a[aIndex] = merge(older, newer);\n            }\n        }\n    });\n    return a;\n};\n*/\n/**\n * The map view handles zooming and centering on the map, and various\n * client-side projection capabilities.\n *\n * On a chart instance, the map view is available as `chart.mapView`.\n *\n * @class\n * @name Highcharts.MapView\n *\n * @param {Highcharts.Chart} chart\n *        The Chart instance\n * @param {Highcharts.MapViewOptions} options\n *        MapView options\n */\nvar MapView = /** @class */ (function () {\n    function MapView(chart, options) {\n        var _this = this;\n        this.insets = [];\n        this.padding = [0, 0, 0, 0];\n        this.eventsToUnbind = [];\n        var recommendedMapView;\n        var recommendedProjection;\n        if (!(this instanceof MapViewInset)) {\n            // Handle the global map and series-level mapData\n            var geoMaps = __spreadArray([\n                chart.options.chart.map\n            ], (chart.options.series || []).map(function (s) { return s.mapData; }), true).map(function (mapData) { return _this.getGeoMap(mapData); });\n            var allGeoBounds_1 = [];\n            geoMaps.forEach(function (geoMap) {\n                if (geoMap) {\n                    // Use the first geo map as main\n                    if (!recommendedMapView) {\n                        recommendedMapView = geoMap['hc-recommended-mapview'];\n                    }\n                    // Combine the bounding boxes of all loaded maps\n                    if (geoMap.bbox) {\n                        var _a = geoMap.bbox, x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3];\n                        allGeoBounds_1.push({ x1: x1, y1: y1, x2: x2, y2: y2 });\n                    }\n                }\n            });\n            // Get the composite bounds\n            var geoBounds = (allGeoBounds_1.length &&\n                MapView.compositeBounds(allGeoBounds_1));\n            // Provide a best-guess recommended projection if not set in the map\n            // or in user options\n            if (geoBounds) {\n                var x1 = geoBounds.x1, y1 = geoBounds.y1, x2 = geoBounds.x2, y2 = geoBounds.y2;\n                recommendedProjection = (x2 - x1 > 180 && y2 - y1 > 90) ?\n                    // Wide angle, go for the world view\n                    {\n                        name: 'EqualEarth'\n                    } :\n                    // Narrower angle, use a projection better suited for local\n                    // view\n                    {\n                        name: 'LambertConformalConic',\n                        parallels: [y1, y2],\n                        rotation: [-(x1 + x2) / 2]\n                    };\n            }\n            // Register the main geo map (from options.chart.map) if set\n            this.geoMap = geoMaps[0];\n        }\n        this.userOptions = options || {};\n        var o = merge(defaultOptions, { projection: recommendedProjection }, recommendedMapView, options);\n        // Merge the inset collections by id, or index if id missing\n        var recInsets = recommendedMapView && recommendedMapView.insets, optInsets = options && options.insets;\n        if (recInsets && optInsets) {\n            o.insets = MapView.mergeInsets(recInsets, optInsets);\n        }\n        this.chart = chart;\n        /**\n         * The current center of the view in terms of `[longitude, latitude]`.\n         * @name Highcharts.MapView#center\n         * @readonly\n         * @type {LonLatArray}\n         */\n        this.center = o.center;\n        this.options = o;\n        this.projection = new Projection(o.projection);\n        // Initialize with full plot box so we don't have to check for undefined\n        // every time we use it\n        this.playingField = chart.plotBox;\n        /**\n         * The current zoom level of the view.\n         * @name Highcharts.MapView#zoom\n         * @readonly\n         * @type {number}\n         */\n        this.zoom = o.zoom || 0;\n        // Create the insets\n        this.createInsets();\n        // Initialize and respond to chart size changes\n        this.eventsToUnbind.push(addEvent(chart, 'afterSetChartSize', function () {\n            _this.playingField = _this.getField();\n            if (_this.minZoom === void 0 || // When initializing the chart\n                _this.minZoom === _this.zoom // When resizing the chart\n            ) {\n                _this.fitToBounds(void 0, void 0, false);\n                if (\n                // Set zoom only when initializing the chart\n                // (do not overwrite when zooming in/out, #17082)\n                !_this.chart.hasRendered &&\n                    isNumber(_this.userOptions.zoom)) {\n                    _this.zoom = _this.userOptions.zoom;\n                }\n                if (_this.userOptions.center) {\n                    merge(true, _this.center, _this.userOptions.center);\n                }\n            }\n        }));\n        this.setUpEvents();\n    }\n    // Merge two collections of insets by the id\n    MapView.mergeInsets = function (a, b) {\n        var toObject = function (insets) {\n            var ob = {};\n            insets.forEach(function (inset, i) {\n                ob[inset && inset.id || \"i\".concat(i)] = inset;\n            });\n            return ob;\n        };\n        var insetsObj = merge(toObject(a), toObject(b)), insets = Object\n            .keys(insetsObj)\n            .map(function (key) { return insetsObj[key]; });\n        return insets;\n    };\n    // Create MapViewInset instances from insets options\n    MapView.prototype.createInsets = function () {\n        var _this = this;\n        var options = this.options, insets = options.insets;\n        if (insets) {\n            insets.forEach(function (item) {\n                var inset = new MapViewInset(_this, merge(options.insetOptions, item));\n                _this.insets.push(inset);\n            });\n        }\n    };\n    /**\n     * Fit the view to given bounds\n     *\n     * @function Highcharts.MapView#fitToBounds\n     * @param {Object} bounds\n     *        Bounds in terms of projected units given as  `{ x1, y1, x2, y2 }`.\n     *        If not set, fit to the bounds of the current data set\n     * @param {number|string} [padding=0]\n     *        Padding inside the bounds. A number signifies pixels, while a\n     *        percentage string (like `5%`) can be used as a fraction of the\n     *        plot area size.\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw the chart immediately\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        What animation to use for redraw\n     */\n    MapView.prototype.fitToBounds = function (bounds, padding, redraw, animation) {\n        if (redraw === void 0) { redraw = true; }\n        var b = bounds || this.getProjectedBounds();\n        if (b) {\n            var pad = pick(padding, bounds ? 0 : this.options.padding), fullField = this.getField(false), padArr = isArray(pad) ? pad : [pad, pad, pad, pad];\n            this.padding = [\n                relativeLength(padArr[0], fullField.height),\n                relativeLength(padArr[1], fullField.width),\n                relativeLength(padArr[2], fullField.height),\n                relativeLength(padArr[3], fullField.width)\n            ];\n            // Apply the playing field, corrected with padding\n            this.playingField = this.getField();\n            var zoom = zoomFromBounds(b, this.playingField);\n            // Reset minZoom when fitting to natural bounds\n            if (!bounds) {\n                this.minZoom = zoom;\n            }\n            var center = this.projection.inverse([\n                (b.x2 + b.x1) / 2,\n                (b.y2 + b.y1) / 2\n            ]);\n            this.setView(center, zoom, redraw, animation);\n        }\n    };\n    MapView.prototype.getField = function (padded) {\n        if (padded === void 0) { padded = true; }\n        var padding = padded ? this.padding : [0, 0, 0, 0];\n        return {\n            x: padding[3],\n            y: padding[0],\n            width: this.chart.plotWidth - padding[1] - padding[3],\n            height: this.chart.plotHeight - padding[0] - padding[2]\n        };\n    };\n    MapView.prototype.getGeoMap = function (map) {\n        if (isString(map)) {\n            return maps[map];\n        }\n        if (isObject(map, true)) {\n            if (map.type === 'FeatureCollection') {\n                return map;\n            }\n            if (map.type === 'Topology') {\n                return topo2geo(map);\n            }\n        }\n    };\n    MapView.prototype.getMapBBox = function () {\n        var bounds = this.getProjectedBounds(), scale = this.getScale();\n        if (bounds) {\n            var padding = this.padding, p1 = this.projectedUnitsToPixels({\n                x: bounds.x1,\n                y: bounds.y2\n            }), width = ((bounds.x2 - bounds.x1) * scale +\n                padding[1] + padding[3]), height = ((bounds.y2 - bounds.y1) * scale +\n                padding[0] + padding[2]);\n            return {\n                width: width,\n                height: height,\n                x: p1.x - padding[3],\n                y: p1.y - padding[0]\n            };\n        }\n    };\n    MapView.prototype.getProjectedBounds = function () {\n        var projection = this.projection;\n        var allBounds = this.chart.series.reduce(function (acc, s) {\n            var bounds = s.getProjectedBounds && s.getProjectedBounds();\n            if (bounds &&\n                s.options.affectsMapView !== false) {\n                acc.push(bounds);\n            }\n            return acc;\n        }, []);\n        // The bounds option\n        var fitToGeometry = this.options.fitToGeometry;\n        if (fitToGeometry) {\n            if (!this.fitToGeometryCache) {\n                if (fitToGeometry.type === 'MultiPoint') {\n                    var positions = fitToGeometry.coordinates\n                        .map(function (lonLat) {\n                        return projection.forward(lonLat);\n                    }), xs = positions.map(function (pos) { return pos[0]; }), ys = positions.map(function (pos) { return pos[1]; });\n                    this.fitToGeometryCache = {\n                        x1: Math.min.apply(0, xs),\n                        x2: Math.max.apply(0, xs),\n                        y1: Math.min.apply(0, ys),\n                        y2: Math.max.apply(0, ys)\n                    };\n                }\n                else {\n                    this.fitToGeometryCache = boundsFromPath(projection.path(fitToGeometry));\n                }\n            }\n            return this.fitToGeometryCache;\n        }\n        return this.projection.bounds || MapView.compositeBounds(allBounds);\n    };\n    MapView.prototype.getScale = function () {\n        // A zoom of 0 means the world (360x360 degrees) fits in a 256x256 px\n        // tile\n        return (tileSize / worldSize) * Math.pow(2, this.zoom);\n    };\n    // Calculate the SVG transform to be applied to series groups\n    MapView.prototype.getSVGTransform = function () {\n        var _a = this.playingField, x = _a.x, y = _a.y, width = _a.width, height = _a.height, projectedCenter = this.projection.forward(this.center), flipFactor = this.projection.hasCoordinates ? -1 : 1, scaleX = this.getScale(), scaleY = scaleX * flipFactor, translateX = x + width / 2 - projectedCenter[0] * scaleX, translateY = y + height / 2 - projectedCenter[1] * scaleY;\n        return { scaleX: scaleX, scaleY: scaleY, translateX: translateX, translateY: translateY };\n    };\n    /**\n     * Convert map coordinates in longitude/latitude to pixels\n     *\n     * @function Highcharts.MapView#lonLatToPixels\n     * @since 10.0.0\n     * @param  {Highcharts.MapLonLatObject} lonLat\n     *         The map coordinates\n     * @return {Highcharts.PositionObject|undefined}\n     *         The pixel position\n     */\n    MapView.prototype.lonLatToPixels = function (lonLat) {\n        var pos = this.lonLatToProjectedUnits(lonLat);\n        if (pos) {\n            return this.projectedUnitsToPixels(pos);\n        }\n    };\n    /**\n     * Get projected units from longitude/latitude. Insets are accounted for.\n     * Returns an object with x and y values corresponding to positions on the\n     * projected plane.\n     *\n     * @requires modules/map\n     *\n     * @function Highcharts.MapView#lonLatToProjectedUnits\n     *\n     * @since 10.0.0\n     * @sample maps/series/latlon-to-point/ Find a point from lon/lat\n     *\n     * @param {Highcharts.MapLonLatObject} lonLat Coordinates.\n     *\n     * @return {Highcharts.ProjectedXY} X and Y coordinates in terms of\n     *      projected values\n     */\n    MapView.prototype.lonLatToProjectedUnits = function (lonLat) {\n        var chart = this.chart, mapTransforms = chart.mapTransforms;\n        // Legacy, built-in transforms\n        if (mapTransforms) {\n            for (var transform in mapTransforms) {\n                if (Object.hasOwnProperty.call(mapTransforms, transform) &&\n                    mapTransforms[transform].hitZone) {\n                    var coords = chart.transformFromLatLon(lonLat, mapTransforms[transform]);\n                    if (coords && pointInPolygon(coords, mapTransforms[transform].hitZone.coordinates[0])) {\n                        return coords;\n                    }\n                }\n            }\n            return chart.transformFromLatLon(lonLat, mapTransforms['default'] // eslint-disable-line dot-notation\n            );\n        }\n        // Handle insets\n        for (var _i = 0, _a = this.insets; _i < _a.length; _i++) {\n            var inset = _a[_i];\n            if (inset.options.geoBounds &&\n                pointInPolygon({ x: lonLat.lon, y: lonLat.lat }, inset.options.geoBounds.coordinates[0])) {\n                var insetProjectedPoint = inset.projection.forward([lonLat.lon, lonLat.lat]), pxPoint = inset.projectedUnitsToPixels({ x: insetProjectedPoint[0], y: insetProjectedPoint[1] });\n                return this.pixelsToProjectedUnits(pxPoint);\n            }\n        }\n        var point = this.projection.forward([lonLat.lon, lonLat.lat]);\n        if (!point.outside) {\n            return { x: point[0], y: point[1] };\n        }\n    };\n    /**\n     * Calculate longitude/latitude values for a point or position. Returns an\n     * object with the numeric properties `lon` and `lat`.\n     *\n     * @requires modules/map\n     *\n     * @function Highcharts.MapView#projectedUnitsToLonLat\n     *\n     * @since 10.0.0\n     *\n     * @sample maps/demo/latlon-advanced/ Advanced lat/lon demo\n     *\n     * @param {Highcharts.Point|Highcharts.ProjectedXY} point\n     *        A `Point` instance or anything containing `x` and `y` properties\n     *        with numeric values.\n     *\n     * @return {Highcharts.MapLonLatObject|undefined} An object with `lat` and\n     *         `lon` properties.\n     */\n    MapView.prototype.projectedUnitsToLonLat = function (point) {\n        var chart = this.chart, mapTransforms = chart.mapTransforms;\n        // Legacy, built-in transforms\n        if (mapTransforms) {\n            for (var transform in mapTransforms) {\n                if (Object.hasOwnProperty.call(mapTransforms, transform) &&\n                    mapTransforms[transform].hitZone &&\n                    pointInPolygon(point, mapTransforms[transform].hitZone.coordinates[0])) {\n                    return chart.transformToLatLon(point, mapTransforms[transform]);\n                }\n            }\n            return chart.transformToLatLon(point, mapTransforms['default'] // eslint-disable-line dot-notation\n            );\n        }\n        var pxPoint = this.projectedUnitsToPixels(point);\n        for (var _i = 0, _a = this.insets; _i < _a.length; _i++) {\n            var inset = _a[_i];\n            if (inset.hitZone &&\n                pointInPolygon(pxPoint, inset.hitZone.coordinates[0])) {\n                var insetProjectedPoint = inset\n                    .pixelsToProjectedUnits(pxPoint), coordinates_1 = inset.projection.inverse([insetProjectedPoint.x, insetProjectedPoint.y]);\n                return { lon: coordinates_1[0], lat: coordinates_1[1] };\n            }\n        }\n        var coordinates = this.projection.inverse([point.x, point.y]);\n        return { lon: coordinates[0], lat: coordinates[1] };\n    };\n    MapView.prototype.redraw = function (animation) {\n        this.chart.series.forEach(function (s) {\n            if (s.useMapGeometry) {\n                s.isDirty = true;\n            }\n        });\n        this.chart.redraw(animation);\n    };\n    /**\n     * Set the view to given center and zoom values.\n     * @function Highcharts.MapView#setView\n     * @param {Highcharts.LonLatArray|undefined} center\n     *        The center point\n     * @param {number} zoom\n     *        The zoom level\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw immediately\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        Animation options for the redraw\n     *\n     * @sample maps/mapview/setview\n     *        Set the view programmatically\n     */\n    MapView.prototype.setView = function (center, zoom, redraw, animation) {\n        if (redraw === void 0) { redraw = true; }\n        if (center) {\n            this.center = center;\n        }\n        if (typeof zoom === 'number') {\n            if (typeof this.minZoom === 'number') {\n                zoom = Math.max(zoom, this.minZoom);\n            }\n            if (typeof this.options.maxZoom === 'number') {\n                zoom = Math.min(zoom, this.options.maxZoom);\n            }\n            // Use isNumber to prevent Infinity (#17205)\n            if (isNumber(zoom)) {\n                this.zoom = zoom;\n            }\n        }\n        var bounds = this.getProjectedBounds();\n        if (bounds) {\n            var projectedCenter = this.projection.forward(this.center), _a = this.playingField, x = _a.x, y = _a.y, width = _a.width, height = _a.height, scale = this.getScale(), bottomLeft = this.projectedUnitsToPixels({\n                x: bounds.x1,\n                y: bounds.y1\n            }), topRight = this.projectedUnitsToPixels({\n                x: bounds.x2,\n                y: bounds.y2\n            }), boundsCenterProjected = [\n                (bounds.x1 + bounds.x2) / 2,\n                (bounds.y1 + bounds.y2) / 2\n            ];\n            // Constrain to data bounds\n            // Pixel coordinate system is reversed vs projected\n            var x1 = bottomLeft.x, y1 = topRight.y, x2 = topRight.x, y2 = bottomLeft.y;\n            // Map smaller than plot area, center it\n            if (x2 - x1 < width) {\n                projectedCenter[0] = boundsCenterProjected[0];\n                // Off west\n            }\n            else if (x1 < x && x2 < x + width) {\n                // Adjust eastwards\n                projectedCenter[0] += Math.max(x1 - x, x2 - width - x) / scale;\n                // Off east\n            }\n            else if (x2 > x + width && x1 > x) {\n                // Adjust westwards\n                projectedCenter[0] += Math.min(x2 - width - x, x1 - x) / scale;\n            }\n            // Map smaller than plot area, center it\n            if (y2 - y1 < height) {\n                projectedCenter[1] = boundsCenterProjected[1];\n                // Off north\n            }\n            else if (y1 < y && y2 < y + height) {\n                // Adjust southwards\n                projectedCenter[1] -= Math.max(y1 - y, y2 - height - y) / scale;\n                // Off south\n            }\n            else if (y2 > y + height && y1 > y) {\n                // Adjust northwards\n                projectedCenter[1] -= Math.min(y2 - height - y, y1 - y) / scale;\n            }\n            this.center = this.projection.inverse(projectedCenter);\n            this.insets.forEach(function (inset) {\n                if (inset.options.field) {\n                    inset.hitZone = inset.getHitZone();\n                    inset.playingField = inset.getField();\n                }\n            });\n            this.render();\n        }\n        fireEvent(this, 'afterSetView');\n        if (redraw) {\n            this.redraw(animation);\n        }\n    };\n    /**\n     * Convert projected units to pixel position\n     *\n     * @function Highcharts.MapView#projectedUnitsToPixels\n     * @param {Highcharts.PositionObject} pos\n     *        The position in projected units\n     * @return {Highcharts.PositionObject} The position in pixels\n     */\n    MapView.prototype.projectedUnitsToPixels = function (pos) {\n        var scale = this.getScale(), projectedCenter = this.projection.forward(this.center), field = this.playingField, centerPxX = field.x + field.width / 2, centerPxY = field.y + field.height / 2;\n        var x = centerPxX - scale * (projectedCenter[0] - pos.x);\n        var y = centerPxY + scale * (projectedCenter[1] - pos.y);\n        return { x: x, y: y };\n    };\n    /**\n     * Convert pixel position to longitude and latitude.\n     *\n     * @function Highcharts.MapView#pixelsToLonLat\n     * @since 10.0.0\n     * @param  {Highcharts.PositionObject} pos\n     *         The position in pixels\n     * @return {Highcharts.MapLonLatObject|undefined}\n     *         The map coordinates\n     */\n    MapView.prototype.pixelsToLonLat = function (pos) {\n        return this.projectedUnitsToLonLat(this.pixelsToProjectedUnits(pos));\n    };\n    /**\n     * Convert pixel position to projected units\n     *\n     * @function Highcharts.MapView#pixelsToProjectedUnits\n     * @param {Highcharts.PositionObject} pos\n     *        The position in pixels\n     * @return {Highcharts.PositionObject} The position in projected units\n     */\n    MapView.prototype.pixelsToProjectedUnits = function (pos) {\n        var x = pos.x, y = pos.y, scale = this.getScale(), projectedCenter = this.projection.forward(this.center), field = this.playingField, centerPxX = field.x + field.width / 2, centerPxY = field.y + field.height / 2;\n        var projectedX = projectedCenter[0] + (x - centerPxX) / scale;\n        var projectedY = projectedCenter[1] - (y - centerPxY) / scale;\n        return { x: projectedX, y: projectedY };\n    };\n    MapView.prototype.setUpEvents = function () {\n        var _this = this;\n        var chart = this.chart;\n        // Set up panning for maps. In orthographic projections the globe will\n        // rotate, otherwise adjust the map center.\n        var mouseDownCenterProjected;\n        var mouseDownKey;\n        var mouseDownRotation;\n        var onPan = function (e) {\n            var pinchDown = chart.pointer.pinchDown, projection = _this.projection;\n            var mouseDownX = chart.mouseDownX, mouseDownY = chart.mouseDownY;\n            if (pinchDown.length === 1) {\n                mouseDownX = pinchDown[0].chartX;\n                mouseDownY = pinchDown[0].chartY;\n            }\n            if (typeof mouseDownX === 'number' &&\n                typeof mouseDownY === 'number') {\n                var key = \"\".concat(mouseDownX, \",\").concat(mouseDownY), _a = e.originalEvent, chartX = _a.chartX, chartY = _a.chartY;\n                // Reset starting position\n                if (key !== mouseDownKey) {\n                    mouseDownKey = key;\n                    mouseDownCenterProjected = _this.projection\n                        .forward(_this.center);\n                    mouseDownRotation = (_this.projection.options.rotation || [0, 0]).slice();\n                }\n                // Get the natural zoom level of the projection itself when\n                // zoomed to view the full world\n                var worldBounds = projection.def && projection.def.bounds, worldZoom = (worldBounds &&\n                    zoomFromBounds(worldBounds, _this.playingField)) || -Infinity;\n                // Panning rotates the globe\n                if (projection.options.name === 'Orthographic' &&\n                    // ... but don't rotate if we're loading only a part of the\n                    // world\n                    (_this.minZoom || Infinity) < worldZoom * 1.1) {\n                    // Empirical ratio where the globe rotates roughly the same\n                    // speed as moving the pointer across the center of the\n                    // projection\n                    var ratio = 440 / (_this.getScale() * Math.min(chart.plotWidth, chart.plotHeight));\n                    if (mouseDownRotation) {\n                        var lon = (mouseDownX - chartX) * ratio -\n                            mouseDownRotation[0], lat = clamp(-mouseDownRotation[1] -\n                            (mouseDownY - chartY) * ratio, -80, 80), zoom = _this.zoom;\n                        _this.update({\n                            projection: {\n                                rotation: [-lon, -lat]\n                            }\n                        }, false);\n                        _this.zoom = zoom;\n                        chart.redraw(false);\n                    }\n                    // #17925 Skip NaN values\n                }\n                else if (isNumber(chartX) && isNumber(chartY)) {\n                    // #17238\n                    var scale = _this.getScale(), flipFactor = _this.projection.hasCoordinates ? 1 : -1;\n                    var newCenter = _this.projection.inverse([\n                        mouseDownCenterProjected[0] +\n                            (mouseDownX - chartX) / scale,\n                        mouseDownCenterProjected[1] -\n                            (mouseDownY - chartY) / scale * flipFactor\n                    ]);\n                    _this.setView(newCenter, void 0, true, false);\n                }\n                e.preventDefault();\n            }\n        };\n        addEvent(chart, 'pan', onPan);\n        addEvent(chart, 'touchpan', onPan);\n        // Perform the map zoom by selection\n        addEvent(chart, 'selection', function (evt) {\n            // Zoom in\n            if (!evt.resetSelection) {\n                var x = evt.x - chart.plotLeft;\n                var y = evt.y - chart.plotTop;\n                var _a = _this.pixelsToProjectedUnits({ x: x, y: y }), y1 = _a.y, x1 = _a.x;\n                var _b = _this.pixelsToProjectedUnits({ x: x + evt.width, y: y + evt.height }), y2 = _b.y, x2 = _b.x;\n                _this.fitToBounds({ x1: x1, y1: y1, x2: x2, y2: y2 }, void 0, true, evt.originalEvent.touches ?\n                    // On touch zoom, don't animate, since we're already in\n                    // transformed zoom preview\n                    false :\n                    // On mouse zoom, obey the chart-level animation\n                    void 0);\n                // Only for mouse. Touch users can pinch out.\n                if (!/^touch/.test((evt.originalEvent.type))) {\n                    chart.showResetZoom();\n                }\n                evt.preventDefault();\n                // Reset zoom\n            }\n            else {\n                _this.zoomBy();\n            }\n        });\n    };\n    MapView.prototype.render = function () {\n        // We need a group for the insets\n        if (!this.group) {\n            this.group = this.chart.renderer.g('map-view')\n                .attr({ zIndex: 4 })\n                .add();\n        }\n    };\n    /**\n     * Update the view with given options\n     *\n     * @function Highcharts.MapView#update\n     *\n     * @param {Partial<Highcharts.MapViewOptions>} options\n     *        The new map view options to apply\n     * @param {boolean} [redraw=true]\n     *        Whether to redraw immediately\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        The animation to apply to a the redraw\n     */\n    MapView.prototype.update = function (options, redraw, animation) {\n        if (redraw === void 0) { redraw = true; }\n        var newProjection = options.projection;\n        var isDirtyProjection = newProjection && ((Projection.toString(newProjection) !==\n            Projection.toString(this.options.projection))), isDirtyInsets = false;\n        merge(true, this.userOptions, options);\n        merge(true, this.options, options);\n        // If anything changed with the insets, destroy them all and create\n        // again below\n        if ('insets' in options) {\n            this.insets.forEach(function (inset) { return inset.destroy(); });\n            this.insets.length = 0;\n            isDirtyInsets = true;\n        }\n        if (isDirtyProjection || 'fitToGeometry' in options) {\n            delete this.fitToGeometryCache;\n        }\n        if (isDirtyProjection || isDirtyInsets) {\n            this.chart.series.forEach(function (series) {\n                var groups = series.transformGroups;\n                if (series.clearBounds) {\n                    series.clearBounds();\n                }\n                series.isDirty = true;\n                series.isDirtyData = true;\n                // Destroy inset transform groups\n                if (isDirtyInsets && groups) {\n                    while (groups.length > 1) {\n                        var group = groups.pop();\n                        if (group) {\n                            group.destroy();\n                        }\n                    }\n                }\n            });\n            if (isDirtyProjection) {\n                this.projection = new Projection(this.options.projection);\n            }\n            // Create new insets\n            if (isDirtyInsets) {\n                this.createInsets();\n            }\n            // Fit to natural bounds if center/zoom are not explicitly given\n            if (!options.center && !isNumber(options.zoom)) {\n                this.fitToBounds(void 0, void 0, false);\n            }\n        }\n        if (options.center || isNumber(options.zoom)) {\n            this.setView(this.options.center, options.zoom, false);\n        }\n        else if ('fitToGeometry' in options) {\n            this.fitToBounds(void 0, void 0, false);\n        }\n        if (redraw) {\n            this.chart.redraw(animation);\n        }\n    };\n    /**\n     * Zoom the map view by a given number\n     *\n     * @function Highcharts.MapView#zoomBy\n     *\n     * @param {number|undefined} [howMuch]\n     *        The amount of zoom to apply. 1 zooms in on half the current view,\n     *        -1 zooms out. Pass `undefined` to zoom to the full bounds of the\n     *        map.\n     * @param {Highcharts.LonLatArray} [coords]\n     *        Optional map coordinates to keep fixed\n     * @param {Array<number>} [chartCoords]\n     *        Optional chart coordinates to keep fixed, in pixels\n     * @param {boolean|Partial<Highcharts.AnimationOptionsObject>} [animation]\n     *        The animation to apply to a the redraw\n     */\n    MapView.prototype.zoomBy = function (howMuch, coords, chartCoords, animation) {\n        var chart = this.chart;\n        var projectedCenter = this.projection.forward(this.center);\n        // let { x, y } = coords || {};\n        var _a = coords ? this.projection.forward(coords) : [], x = _a[0], y = _a[1];\n        if (typeof howMuch === 'number') {\n            var zoom = this.zoom + howMuch;\n            var center = void 0;\n            // Keep chartX and chartY stationary - convert to lat and lng\n            if (chartCoords) {\n                var chartX = chartCoords[0], chartY = chartCoords[1];\n                var scale = this.getScale();\n                var offsetX = chartX - chart.plotLeft - chart.plotWidth / 2;\n                var offsetY = chartY - chart.plotTop - chart.plotHeight / 2;\n                x = projectedCenter[0] + offsetX / scale;\n                y = projectedCenter[1] + offsetY / scale;\n            }\n            // Keep lon and lat stationary by adjusting the center\n            if (typeof x === 'number' && typeof y === 'number') {\n                var scale = 1 - Math.pow(2, this.zoom) / Math.pow(2, zoom);\n                // const projectedCenter = this.projection.forward(this.center);\n                var offsetX = projectedCenter[0] - x;\n                var offsetY = projectedCenter[1] - y;\n                projectedCenter[0] -= offsetX * scale;\n                projectedCenter[1] += offsetY * scale;\n                center = this.projection.inverse(projectedCenter);\n            }\n            this.setView(center, zoom, void 0, animation);\n            // Undefined howMuch => reset zoom\n        }\n        else {\n            this.fitToBounds(void 0, void 0, void 0, animation);\n        }\n    };\n    /* *\n     * Return the composite bounding box of a collection of bounding boxes\n     */\n    MapView.compositeBounds = function (arrayOfBounds) {\n        if (arrayOfBounds.length) {\n            return arrayOfBounds\n                .slice(1)\n                .reduce(function (acc, cur) {\n                acc.x1 = Math.min(acc.x1, cur.x1);\n                acc.y1 = Math.min(acc.y1, cur.y1);\n                acc.x2 = Math.max(acc.x2, cur.x2);\n                acc.y2 = Math.max(acc.y2, cur.y2);\n                return acc;\n            }, merge(arrayOfBounds[0]));\n        }\n        return;\n    };\n    return MapView;\n}());\n// Putting this in the same file due to circular dependency with MapView\nvar MapViewInset = /** @class */ (function (_super) {\n    __extends(MapViewInset, _super);\n    function MapViewInset(mapView, options) {\n        var _this = _super.call(this, mapView.chart, options) || this;\n        _this.id = options.id;\n        _this.mapView = mapView;\n        _this.options = merge(defaultInsetsOptions, options);\n        _this.allBounds = [];\n        if (_this.options.geoBounds) {\n            // The path in projected units in the map view's main projection.\n            // This is used for hit testing where the points should render.\n            var path = mapView.projection.path(_this.options.geoBounds);\n            _this.geoBoundsProjectedBox = boundsFromPath(path);\n            _this.geoBoundsProjectedPolygon = path.map(function (segment) { return [\n                segment[1] || 0,\n                segment[2] || 0\n            ]; });\n        }\n        return _this;\n    }\n    // Get the playing field in pixels\n    MapViewInset.prototype.getField = function (padded) {\n        if (padded === void 0) { padded = true; }\n        var hitZone = this.hitZone;\n        if (hitZone) {\n            var padding = padded ? this.padding : [0, 0, 0, 0], polygon = hitZone.coordinates[0], xs = polygon.map(function (xy) { return xy[0]; }), ys = polygon.map(function (xy) { return xy[1]; }), x = Math.min.apply(0, xs) + padding[3], x2 = Math.max.apply(0, xs) - padding[1], y = Math.min.apply(0, ys) + padding[0], y2 = Math.max.apply(0, ys) - padding[2];\n            if (isNumber(x) && isNumber(y)) {\n                return {\n                    x: x,\n                    y: y,\n                    width: x2 - x,\n                    height: y2 - y\n                };\n            }\n        }\n        // Fall back to plot area\n        return _super.prototype.getField.call(this, padded);\n    };\n    // Get the hit zone in pixels\n    MapViewInset.prototype.getHitZone = function () {\n        var _a = this, chart = _a.chart, mapView = _a.mapView, options = _a.options, coordinates = (options.field || {}).coordinates;\n        if (coordinates) {\n            var polygon = coordinates[0];\n            if (options.units === 'percent') {\n                var relativeTo_1 = options.relativeTo === 'mapBoundingBox' &&\n                    mapView.getMapBBox() ||\n                    merge(chart.plotBox, { x: 0, y: 0 });\n                polygon = polygon.map(function (xy) { return [\n                    relativeLength(\"\".concat(xy[0], \"%\"), relativeTo_1.width, relativeTo_1.x),\n                    relativeLength(\"\".concat(xy[1], \"%\"), relativeTo_1.height, relativeTo_1.y)\n                ]; });\n            }\n            return {\n                type: 'Polygon',\n                coordinates: [polygon]\n            };\n        }\n    };\n    MapViewInset.prototype.getProjectedBounds = function () {\n        return MapView.compositeBounds(this.allBounds);\n    };\n    // Determine whether a point on the main projected plane is inside the\n    // geoBounds of the inset.\n    MapViewInset.prototype.isInside = function (point) {\n        var _a = this, geoBoundsProjectedBox = _a.geoBoundsProjectedBox, geoBoundsProjectedPolygon = _a.geoBoundsProjectedPolygon;\n        return Boolean(\n        // First we do a pre-pass to check whether the test point is inside\n        // the rectangular bounding box of the polygon. This is less\n        // expensive and will rule out most cases.\n        geoBoundsProjectedBox &&\n            point.x >= geoBoundsProjectedBox.x1 &&\n            point.x <= geoBoundsProjectedBox.x2 &&\n            point.y >= geoBoundsProjectedBox.y1 &&\n            point.y <= geoBoundsProjectedBox.y2 &&\n            // Next, do the more expensive check whether the point is inside the\n            // polygon itself.\n            geoBoundsProjectedPolygon &&\n            pointInPolygon(point, geoBoundsProjectedPolygon));\n    };\n    // Render the map view inset with the border path\n    MapViewInset.prototype.render = function () {\n        var _a = this, chart = _a.chart, mapView = _a.mapView, options = _a.options, borderPath = options.borderPath || options.field;\n        if (borderPath && mapView.group) {\n            var animate = true;\n            if (!this.border) {\n                this.border = chart.renderer\n                    .path()\n                    .addClass('highcharts-mapview-inset-border')\n                    .add(mapView.group);\n                animate = false;\n            }\n            if (!chart.styledMode) {\n                this.border.attr({\n                    stroke: options.borderColor,\n                    'stroke-width': options.borderWidth\n                });\n            }\n            var crisp_1 = Math.round(this.border.strokeWidth()) % 2 / 2, field_1 = (options.relativeTo === 'mapBoundingBox' &&\n                mapView.getMapBBox()) || mapView.playingField;\n            var d = (borderPath.coordinates || []).reduce(function (d, lineString) {\n                return lineString.reduce(function (d, point, i) {\n                    var x = point[0], y = point[1];\n                    if (options.units === 'percent') {\n                        x = chart.plotLeft + relativeLength(\"\".concat(x, \"%\"), field_1.width, field_1.x);\n                        y = chart.plotTop + relativeLength(\"\".concat(y, \"%\"), field_1.height, field_1.y);\n                    }\n                    x = Math.floor(x) + crisp_1;\n                    y = Math.floor(y) + crisp_1;\n                    d.push(i === 0 ? ['M', x, y] : ['L', x, y]);\n                    return d;\n                }, d);\n            }, []);\n            // Apply the border path\n            this.border[animate ? 'animate' : 'attr']({ d: d });\n        }\n    };\n    MapViewInset.prototype.destroy = function () {\n        if (this.border) {\n            this.border = this.border.destroy();\n        }\n        this.eventsToUnbind.forEach(function (f) { return f(); });\n    };\n    // No chart-level events for insets\n    MapViewInset.prototype.setUpEvents = function () { };\n    return MapViewInset;\n}(MapView));\n// Initialize the MapView after initialization, but before firstRender\naddEvent(MapChart, 'afterInit', function () {\n    this.mapView = new MapView(this, this.options.mapView);\n});\nexport default MapView;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport A from '../../Core/Animation/AnimationUtilities.js';\nvar animObject = A.animObject;\nimport ColorMapComposition from '../ColorMapComposition.js';\nimport CU from '../CenteredUtilities.js';\nimport H from '../../Core/Globals.js';\nvar noop = H.noop;\nimport LegendSymbol from '../../Core/Legend/LegendSymbol.js';\nimport MapChart from '../../Core/Chart/MapChart.js';\nvar splitPath = MapChart.splitPath;\nimport MapPoint from './MapPoint.js';\nimport MapView from '../../Maps/MapView.js';\nimport Series from '../../Core/Series/Series.js';\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nvar \n// indirect dependency to keep product size low\n_a = SeriesRegistry.seriesTypes, ColumnSeries = _a.column, ScatterSeries = _a.scatter;\nimport SVGRenderer from '../../Core/Renderer/SVG/SVGRenderer.js';\nimport U from '../../Core/Utilities.js';\nvar extend = U.extend, find = U.find, fireEvent = U.fireEvent, getNestedProperty = U.getNestedProperty, isArray = U.isArray, defined = U.defined, isNumber = U.isNumber, isObject = U.isObject, merge = U.merge, objectEach = U.objectEach, pick = U.pick, splat = U.splat;\n/* *\n *\n *  Class\n *\n * */\n/**\n * @private\n * @class\n * @name Highcharts.seriesTypes.map\n *\n * @augments Highcharts.Series\n */\nvar MapSeries = /** @class */ (function (_super) {\n    __extends(MapSeries, _super);\n    function MapSeries() {\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.chart = void 0;\n        _this.data = void 0;\n        _this.group = void 0;\n        _this.joinBy = void 0;\n        _this.options = void 0;\n        _this.points = void 0;\n        _this.processedData = [];\n        return _this;\n        /* eslint-enable valid-jsdoc */\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * The initial animation for the map series. By default, animation is\n     * disabled. Animation of map shapes is not at all supported in VML\n     * browsers.\n     * @private\n     */\n    MapSeries.prototype.animate = function (init) {\n        var _a = this, chart = _a.chart, group = _a.group, animation = animObject(this.options.animation);\n        if (chart.renderer.isSVG) {\n            // Initialize the animation\n            if (init) {\n                // Scale down the group and place it in the center\n                group.attr({\n                    translateX: chart.plotLeft + chart.plotWidth / 2,\n                    translateY: chart.plotTop + chart.plotHeight / 2,\n                    scaleX: 0.001,\n                    scaleY: 0.001\n                });\n                // Run the animation\n            }\n            else {\n                group.animate({\n                    translateX: chart.plotLeft,\n                    translateY: chart.plotTop,\n                    scaleX: 1,\n                    scaleY: 1\n                }, animation);\n            }\n        }\n    };\n    /**\n     * Animate in the new series. Depends on the drilldown.js module.\n     * @private\n     */\n    MapSeries.prototype.animateDrilldown = function (init) {\n        var chart = this.chart, group = this.group;\n        if (chart.renderer.isSVG) {\n            // Initialize the animation\n            if (init) {\n                // Scale down the group and place it in the center. This is a\n                // regression from <= v9.2, when it animated from the old point.\n                group.attr({\n                    translateX: chart.plotLeft + chart.plotWidth / 2,\n                    translateY: chart.plotTop + chart.plotHeight / 2,\n                    scaleX: 0.1,\n                    scaleY: 0.1,\n                    opacity: 0.01\n                });\n                // Run the animation\n            }\n            else {\n                group.animate({\n                    translateX: chart.plotLeft,\n                    translateY: chart.plotTop,\n                    scaleX: 1,\n                    scaleY: 1,\n                    opacity: 1\n                }, this.chart.options.drilldown.animation);\n                if (chart.drilldown) {\n                    chart.drilldown.fadeInGroup(this.dataLabelsGroup);\n                }\n            }\n        }\n    };\n    /**\n     * When drilling up, pull out the individual point graphics from the lower\n     * series and animate them into the origin point in the upper series.\n     * @private\n     */\n    MapSeries.prototype.animateDrillupFrom = function () {\n        var chart = this.chart;\n        if (chart.renderer.isSVG) {\n            this.group.animate({\n                translateX: chart.plotLeft + chart.plotWidth / 2,\n                translateY: chart.plotTop + chart.plotHeight / 2,\n                scaleX: 0.1,\n                scaleY: 0.1,\n                opacity: 0.01\n            });\n        }\n    };\n    /**\n     * When drilling up, keep the upper series invisible until the lower series\n     * has moved into place.\n     * @private\n     */\n    MapSeries.prototype.animateDrillupTo = function (init) {\n        ColumnSeries.prototype.animateDrillupTo.call(this, init);\n    };\n    MapSeries.prototype.clearBounds = function () {\n        this.points.forEach(function (point) {\n            delete point.bounds;\n            delete point.insetIndex;\n            delete point.projectedPath;\n        });\n        delete this.bounds;\n    };\n    /**\n     * Allow a quick redraw by just translating the area group. Used for zooming\n     * and panning in capable browsers.\n     * @private\n     */\n    MapSeries.prototype.doFullTranslate = function () {\n        return Boolean(this.isDirtyData ||\n            this.chart.isResizing ||\n            this.chart.renderer.isVML ||\n            !this.hasRendered);\n    };\n    /**\n     * Draw the data labels. Special for maps is the time that the data labels\n     * are drawn (after points), and the clipping of the dataLabelsGroup.\n     * @private\n     */\n    MapSeries.prototype.drawMapDataLabels = function () {\n        Series.prototype.drawDataLabels.call(this);\n        if (this.dataLabelsGroup) {\n            this.dataLabelsGroup.clip(this.chart.clipRect);\n        }\n    };\n    /**\n     * Use the drawPoints method of column, that is able to handle simple\n     * shapeArgs. Extend it by assigning the tooltip position.\n     * @private\n     */\n    MapSeries.prototype.drawPoints = function () {\n        var _this = this;\n        var series = this, _a = this, chart = _a.chart, group = _a.group, _b = _a.transformGroups, transformGroups = _b === void 0 ? [] : _b, mapView = chart.mapView, renderer = chart.renderer;\n        if (!mapView) {\n            return;\n        }\n        // Set groups that handle transform during zooming and panning in order\n        // to preserve clipping on series.group\n        this.transformGroups = transformGroups;\n        if (!transformGroups[0]) {\n            transformGroups[0] = renderer.g().add(group);\n        }\n        mapView.insets.forEach(function (inset, i) {\n            if (!transformGroups[i + 1]) {\n                transformGroups.push(renderer.g().add(group));\n            }\n        });\n        // Draw the shapes again\n        if (this.doFullTranslate()) {\n            // Individual point actions.\n            this.points.forEach(function (point) {\n                var graphic = point.graphic, shapeArgs = point.shapeArgs;\n                // Points should be added in the corresponding transform group\n                point.group = transformGroups[typeof point.insetIndex === 'number' ?\n                    point.insetIndex + 1 :\n                    0];\n                // When the point has been moved between insets after\n                // MapView.update\n                if (graphic && graphic.parentGroup !== point.group) {\n                    graphic.add(point.group);\n                }\n                // Restore state color on update/redraw (#3529)\n                if (shapeArgs && chart.hasRendered && !chart.styledMode) {\n                    shapeArgs.fill = _this.pointAttribs(point, point.state).fill;\n                }\n            });\n            // Draw the points\n            ColumnSeries.prototype.drawPoints.apply(this);\n            // Add class names\n            this.points.forEach(function (point) {\n                var graphic = point.graphic;\n                if (graphic) {\n                    var animate_1 = graphic.animate;\n                    var className = '';\n                    if (point.name) {\n                        className +=\n                            'highcharts-name-' +\n                                point.name.replace(/ /g, '-').toLowerCase();\n                    }\n                    if (point.properties && point.properties['hc-key']) {\n                        className +=\n                            ' highcharts-key-' +\n                                point.properties['hc-key'].toString().toLowerCase();\n                    }\n                    if (className) {\n                        graphic.addClass(className);\n                    }\n                    // In styled mode, apply point colors by CSS\n                    if (chart.styledMode) {\n                        graphic.css(_this.pointAttribs(point, point.selected && 'select' || void 0));\n                    }\n                    graphic.animate = function (params, options, complete) {\n                        var animateIn = (isNumber(params['stroke-width']) &&\n                            !isNumber(graphic['stroke-width'])), animateOut = (isNumber(graphic['stroke-width']) &&\n                            !isNumber(params['stroke-width']));\n                        // When strokeWidth is animating\n                        if (animateIn || animateOut) {\n                            var strokeWidth = pick(series.getStrokeWidth(series.options), 1 // Styled mode\n                            ), inheritedStrokeWidth = (strokeWidth /\n                                (chart.mapView &&\n                                    chart.mapView.getScale() ||\n                                    1));\n                            // For animating from undefined, .attr() reads the\n                            // property as the starting point\n                            if (animateIn) {\n                                graphic['stroke-width'] = inheritedStrokeWidth;\n                            }\n                            // For animating to undefined\n                            if (animateOut) {\n                                params['stroke-width'] = inheritedStrokeWidth;\n                            }\n                        }\n                        var ret = animate_1.call(graphic, params, options, animateOut ? function () {\n                            // Remove the attribute after finished animation\n                            graphic.element.removeAttribute('stroke-width');\n                            delete graphic['stroke-width'];\n                            // Proceed\n                            if (complete) {\n                                complete.apply(this, arguments);\n                            }\n                        } : complete);\n                        return ret;\n                    };\n                }\n            });\n        }\n        // Apply the SVG transform\n        transformGroups.forEach(function (transformGroup, i) {\n            var view = i === 0 ? mapView : mapView.insets[i - 1], svgTransform = view.getSVGTransform(), strokeWidth = pick(_this.getStrokeWidth(_this.options), 1 // Styled mode\n            );\n            /*\n            Animate or move to the new zoom level. In order to prevent\n            flickering as the different transform components are set out of sync\n            (#5991), we run a fake animator attribute and set scale and\n            translation synchronously in the same step.\n\n            A possible improvement to the API would be to handle this in the\n            renderer or animation engine itself, to ensure that when we are\n            animating multiple properties, we make sure that each step for each\n            property is performed in the same step. Also, for symbols and for\n            transform properties, it should induce a single updateTransform and\n            symbolAttr call.\n            */\n            var scale = svgTransform.scaleX, flipFactor = svgTransform.scaleY > 0 ? 1 : -1;\n            var animatePoints = function (scale) {\n                (series.points || []).forEach(function (point) {\n                    var graphic = point.graphic;\n                    var strokeWidth;\n                    if (graphic &&\n                        graphic['stroke-width'] &&\n                        (strokeWidth = _this.getStrokeWidth(point.options))) {\n                        graphic.attr({\n                            'stroke-width': strokeWidth / scale\n                        });\n                    }\n                });\n            };\n            if (renderer.globalAnimation && chart.hasRendered) {\n                var startTranslateX_1 = Number(transformGroup.attr('translateX'));\n                var startTranslateY_1 = Number(transformGroup.attr('translateY'));\n                var startScale_1 = Number(transformGroup.attr('scaleX'));\n                var step = function (now, fx) {\n                    var scaleStep = startScale_1 +\n                        (scale - startScale_1) * fx.pos;\n                    transformGroup.attr({\n                        translateX: (startTranslateX_1 + (svgTransform.translateX - startTranslateX_1) * fx.pos),\n                        translateY: (startTranslateY_1 + (svgTransform.translateY - startTranslateY_1) * fx.pos),\n                        scaleX: scaleStep,\n                        scaleY: scaleStep * flipFactor,\n                        'stroke-width': strokeWidth / scaleStep\n                    });\n                    animatePoints(scaleStep); // #18166\n                };\n                transformGroup\n                    .attr({ animator: 0 })\n                    .animate({ animator: 1 }, { step: step });\n                // When dragging or first rendering, animation is off\n            }\n            else {\n                transformGroup.attr(merge(svgTransform, { 'stroke-width': strokeWidth / scale }));\n                animatePoints(scale); // #18166\n            }\n        });\n        this.drawMapDataLabels();\n    };\n    /**\n     * Get the bounding box of all paths in the map combined.\n     *\n     */\n    MapSeries.prototype.getProjectedBounds = function () {\n        if (!this.bounds && this.chart.mapView) {\n            var _a = this.chart.mapView, insets_1 = _a.insets, projection_1 = _a.projection, allBounds_1 = [];\n            // Find the bounding box of each point\n            (this.points || []).forEach(function (point) {\n                if (point.path || point.geometry) {\n                    // @todo Try to puth these two conversions in\n                    // MapPoint.applyOptions\n                    if (typeof point.path === 'string') {\n                        point.path = splitPath(point.path);\n                        // Legacy one-dimensional array\n                    }\n                    else if (isArray(point.path) &&\n                        point.path[0] === 'M') {\n                        point.path = SVGRenderer.prototype.pathToSegments(point.path);\n                    }\n                    // The first time a map point is used, analyze its box\n                    if (!point.bounds) {\n                        var bounds = point.getProjectedBounds(projection_1);\n                        if (bounds) {\n                            point.labelrank = pick(point.labelrank, \n                            // Bigger shape, higher rank\n                            ((bounds.x2 - bounds.x1) *\n                                (bounds.y2 - bounds.y1)));\n                            var midX_1 = bounds.midX, midY_1 = bounds.midY;\n                            if (insets_1 && isNumber(midX_1) && isNumber(midY_1)) {\n                                var inset = find(insets_1, function (inset) { return inset.isInside({\n                                    x: midX_1, y: midY_1\n                                }); });\n                                if (inset) {\n                                    // Project again, but with the inset\n                                    // projection\n                                    delete point.projectedPath;\n                                    bounds = point.getProjectedBounds(inset.projection);\n                                    if (bounds) {\n                                        inset.allBounds.push(bounds);\n                                    }\n                                    point.insetIndex = insets_1.indexOf(inset);\n                                }\n                            }\n                            point.bounds = bounds;\n                        }\n                    }\n                    if (point.bounds && point.insetIndex === void 0) {\n                        allBounds_1.push(point.bounds);\n                    }\n                }\n            });\n            this.bounds = MapView.compositeBounds(allBounds_1);\n        }\n        return this.bounds;\n    };\n    /**\n     * Return the stroke-width either from a series options or point options\n     * object. This function is used by both the map series where the\n     * `borderWidth` sets the stroke-width, and the mapline series where the\n     * `lineWidth` sets the stroke-width.\n     * @private\n     */\n    MapSeries.prototype.getStrokeWidth = function (options) {\n        var pointAttrToOptions = this.pointAttrToOptions;\n        return options[pointAttrToOptions &&\n            pointAttrToOptions['stroke-width'] || 'borderWidth'];\n    };\n    /**\n     * Define hasData function for non-cartesian series. Returns true if the\n     * series has points at all.\n     * @private\n     */\n    MapSeries.prototype.hasData = function () {\n        return !!this.processedXData.length; // != 0\n    };\n    /**\n     * Get presentational attributes. In the maps series this runs in both\n     * styled and non-styled mode, because colors hold data when a colorAxis is\n     * used.\n     * @private\n     */\n    MapSeries.prototype.pointAttribs = function (point, state) {\n        var _a = point.series.chart, mapView = _a.mapView, styledMode = _a.styledMode;\n        var attr = styledMode ?\n            this.colorAttribs(point) :\n            ColumnSeries.prototype.pointAttribs.call(this, point, state);\n        // Individual stroke width\n        var pointStrokeWidth = this.getStrokeWidth(point.options);\n        // Handle state specific border or line width\n        if (state) {\n            var stateOptions = merge(this.options.states[state], point.options.states &&\n                point.options.states[state] ||\n                {}), stateStrokeWidth = this.getStrokeWidth(stateOptions);\n            if (defined(stateStrokeWidth)) {\n                pointStrokeWidth = stateStrokeWidth;\n            }\n        }\n        if (pointStrokeWidth && mapView) {\n            pointStrokeWidth /= mapView.getScale();\n        }\n        // In order for dash style to avoid being scaled, set the transformed\n        // stroke width on the item\n        var seriesStrokeWidth = this.getStrokeWidth(this.options);\n        if (attr.dashstyle &&\n            mapView &&\n            isNumber(seriesStrokeWidth)) {\n            pointStrokeWidth = seriesStrokeWidth / mapView.getScale();\n        }\n        // Invisible map points means that the data value is removed from the\n        // map, but not the map area shape itself. Instead it is rendered like a\n        // null point. To fully remove a map area, it should be removed from the\n        // mapData.\n        if (!point.visible) {\n            attr.fill = this.options.nullColor;\n        }\n        if (defined(pointStrokeWidth)) {\n            attr['stroke-width'] = pointStrokeWidth;\n        }\n        else {\n            delete attr['stroke-width'];\n        }\n        attr['stroke-linecap'] = attr['stroke-linejoin'] = this.options.linecap;\n        return attr;\n    };\n    /**\n     * @private\n     */\n    MapSeries.prototype.updateData = function () {\n        // #16782\n        if (this.processedData) {\n            return false;\n        }\n        return _super.prototype.updateData.apply(this, arguments);\n    };\n    /**\n     * Extend setData to call processData and generatePoints immediately.\n     * @private\n     */\n    MapSeries.prototype.setData = function (data, redraw, animation, updatePoints) {\n        if (redraw === void 0) { redraw = true; }\n        delete this.bounds;\n        _super.prototype.setData.call(this, data, false, void 0, updatePoints);\n        this.processData();\n        this.generatePoints();\n        if (redraw) {\n            this.chart.redraw(animation);\n        }\n    };\n    /**\n     * Extend processData to join in mapData. If the allAreas option is true,\n     * all areas from the mapData are used, and those that don't correspond to a\n     * data value are given null values. The results are stored in\n     * `processedData` in order to avoid mutating `data`.\n     * @private\n     */\n    MapSeries.prototype.processData = function () {\n        var options = this.options, data = options.data, chartOptions = this.chart.options.chart, joinBy = this.joinBy, pointArrayMap = options.keys || this.pointArrayMap, dataUsed = [], mapMap = {};\n        var mapView = this.chart.mapView, mapDataObject = mapView && (\n        // Get map either from series or global\n        isObject(options.mapData, true) ?\n            mapView.getGeoMap(options.mapData) : mapView.geoMap), mapTransforms = this.chart.mapTransforms, mapPoint, props, i;\n        // Pick up transform definitions for chart\n        this.chart.mapTransforms = mapTransforms =\n            chartOptions.mapTransforms ||\n                mapDataObject && mapDataObject['hc-transform'] ||\n                mapTransforms;\n        // Cache cos/sin of transform rotation angle\n        if (mapTransforms) {\n            objectEach(mapTransforms, function (transform) {\n                if (transform.rotation) {\n                    transform.cosAngle = Math.cos(transform.rotation);\n                    transform.sinAngle = Math.sin(transform.rotation);\n                }\n            });\n        }\n        var mapData;\n        if (isArray(options.mapData)) {\n            mapData = options.mapData;\n        }\n        else if (mapDataObject && mapDataObject.type === 'FeatureCollection') {\n            this.mapTitle = mapDataObject.title;\n            mapData = H.geojson(mapDataObject, this.type, this);\n        }\n        // Reset processedData\n        this.processedData = [];\n        var processedData = this.processedData;\n        // Pick up numeric values, add index. Convert Array point definitions to\n        // objects using pointArrayMap.\n        if (data) {\n            data.forEach(function (val, i) {\n                var ix = 0;\n                if (isNumber(val)) {\n                    processedData[i] = {\n                        value: val\n                    };\n                }\n                else if (isArray(val)) {\n                    processedData[i] = {};\n                    // Automatically copy first item to hc-key if there is\n                    // an extra leading string\n                    if (!options.keys &&\n                        val.length > pointArrayMap.length &&\n                        typeof val[0] === 'string') {\n                        processedData[i]['hc-key'] = val[0];\n                        ++ix;\n                    }\n                    // Run through pointArrayMap and what's left of the\n                    // point data array in parallel, copying over the values\n                    for (var j = 0; j < pointArrayMap.length; ++j, ++ix) {\n                        if (pointArrayMap[j] &&\n                            typeof val[ix] !== 'undefined') {\n                            if (pointArrayMap[j].indexOf('.') > 0) {\n                                MapPoint.prototype.setNestedProperty(processedData[i], val[ix], pointArrayMap[j]);\n                            }\n                            else {\n                                processedData[i][pointArrayMap[j]] =\n                                    val[ix];\n                            }\n                        }\n                    }\n                }\n                else {\n                    processedData[i] = data[i];\n                }\n                if (joinBy && joinBy[0] === '_i') {\n                    processedData[i]._i = i;\n                }\n            });\n        }\n        if (mapData) {\n            this.mapData = mapData;\n            this.mapMap = {};\n            for (i = 0; i < mapData.length; i++) {\n                mapPoint = mapData[i];\n                props = mapPoint.properties;\n                mapPoint._i = i;\n                // Copy the property over to root for faster access\n                if (joinBy[0] && props && props[joinBy[0]]) {\n                    mapPoint[joinBy[0]] = props[joinBy[0]];\n                }\n                mapMap[mapPoint[joinBy[0]]] = mapPoint;\n            }\n            this.mapMap = mapMap;\n            // Registered the point codes that actually hold data\n            if (joinBy[1]) {\n                var joinKey_1 = joinBy[1];\n                processedData.forEach(function (pointOptions) {\n                    var mapKey = getNestedProperty(joinKey_1, pointOptions);\n                    if (mapMap[mapKey]) {\n                        dataUsed.push(mapMap[mapKey]);\n                    }\n                });\n            }\n            if (options.allAreas) {\n                // Register the point codes that actually hold data\n                if (joinBy[1]) {\n                    var joinKey_2 = joinBy[1];\n                    processedData.forEach(function (pointOptions) {\n                        dataUsed.push(getNestedProperty(joinKey_2, pointOptions));\n                    });\n                }\n                // Add those map points that don't correspond to data, which\n                // will be drawn as null points. Searching a string is faster\n                // than Array.indexOf\n                var dataUsedString_1 = ('|' +\n                    dataUsed\n                        .map(function (point) {\n                        return point && point[joinBy[0]];\n                    })\n                        .join('|') +\n                    '|');\n                mapData.forEach(function (mapPoint) {\n                    if (!joinBy[0] ||\n                        dataUsedString_1.indexOf('|' + mapPoint[joinBy[0]] + '|') === -1) {\n                        processedData.push(merge(mapPoint, { value: null }));\n                    }\n                });\n            }\n        }\n        // The processedXData array is used by general chart logic for checking\n        // data length in various scanarios\n        this.processedXData = new Array(processedData.length);\n        return void 0;\n    };\n    /**\n     * Extend setOptions by picking up the joinBy option and applying it to a\n     * series property.\n     * @private\n     */\n    MapSeries.prototype.setOptions = function (itemOptions) {\n        var options = Series.prototype.setOptions.call(this, itemOptions), joinBy = options.joinBy, joinByNull = joinBy === null;\n        if (joinByNull) {\n            joinBy = '_i';\n        }\n        joinBy = this.joinBy = splat(joinBy);\n        if (!joinBy[1]) {\n            joinBy[1] = joinBy[0];\n        }\n        return options;\n    };\n    /**\n     * Add the path option for data points. Find the max value for color\n     * calculation.\n     * @private\n     */\n    MapSeries.prototype.translate = function () {\n        var series = this, doFullTranslate = series.doFullTranslate(), mapView = this.chart.mapView, projection = mapView && mapView.projection;\n        // Recalculate box on updated data\n        if (this.chart.hasRendered && (this.isDirtyData || !this.hasRendered)) {\n            this.processData();\n            this.generatePoints();\n            delete this.bounds;\n            if (mapView &&\n                !mapView.userOptions.center &&\n                !isNumber(mapView.userOptions.zoom)) {\n                // Not only recalculate bounds but also fit view\n                mapView.fitToBounds(void 0, void 0, false); // #17012\n            }\n            else {\n                // If center and zoom is defined in user options, get bounds but\n                // don't change view\n                this.getProjectedBounds();\n            }\n        }\n        if (mapView) {\n            var mainSvgTransform_1 = mapView.getSVGTransform();\n            series.points.forEach(function (point) {\n                var svgTransform = (isNumber(point.insetIndex) &&\n                    mapView.insets[point.insetIndex].getSVGTransform()) || mainSvgTransform_1;\n                // Record the middle point (loosely based on centroid),\n                // determined by the middleX and middleY options.\n                if (svgTransform &&\n                    point.bounds &&\n                    isNumber(point.bounds.midX) &&\n                    isNumber(point.bounds.midY)) {\n                    point.plotX = point.bounds.midX * svgTransform.scaleX +\n                        svgTransform.translateX;\n                    point.plotY = point.bounds.midY * svgTransform.scaleY +\n                        svgTransform.translateY;\n                }\n                if (doFullTranslate) {\n                    point.shapeType = 'path';\n                    point.shapeArgs = {\n                        d: MapPoint.getProjectedPath(point, projection)\n                    };\n                }\n            });\n        }\n        fireEvent(series, 'afterTranslate');\n    };\n    /**\n     * The map series is used for basic choropleth maps, where each map area has\n     * a color based on its value.\n     *\n     * @sample maps/demo/all-maps/\n     *         Choropleth map\n     *\n     * @extends      plotOptions.scatter\n     * @excluding    marker, cluster\n     * @product      highmaps\n     * @optionparent plotOptions.map\n     *\n     * @private\n     */\n    MapSeries.defaultOptions = merge(ScatterSeries.defaultOptions, {\n        /**\n         * Whether the MapView takes this series into account when computing the\n         * default zoom and center of the map.\n         *\n         * @sample maps/series/affectsmapview/\n         *         US map with world map backdrop\n         *\n         * @since 10.0.0\n         *\n         * @private\n         */\n        affectsMapView: true,\n        animation: false,\n        dataLabels: {\n            crop: false,\n            formatter: function () {\n                var numberFormatter = this.series.chart.numberFormatter;\n                var value = this.point.value;\n                return isNumber(value) ? numberFormatter(value, -1) : '';\n            },\n            inside: true,\n            overflow: false,\n            padding: 0,\n            verticalAlign: 'middle'\n        },\n        /**\n         * The SVG value used for the `stroke-linecap` and `stroke-linejoin` of\n         * the map borders. Round means that borders are rounded in the ends and\n         * bends.\n         *\n         * @sample maps/demo/mappoint-mapmarker/\n         *         Backdrop coastline with round linecap\n         *\n         * @type   {Highcharts.SeriesLinecapValue}\n         * @since  10.3.3\n         */\n        linecap: 'butt',\n        /**\n         * @ignore-option\n         *\n         * @private\n         */\n        marker: null,\n        /**\n         * The color to apply to null points.\n         *\n         * In styled mode, the null point fill is set in the\n         * `.highcharts-null-point` class.\n         *\n         * @sample maps/demo/all-areas-as-null/\n         *         Null color\n         *\n         * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         *\n         * @private\n         */\n        nullColor: \"#f7f7f7\" /* Palette.neutralColor3 */,\n        /**\n         * Whether to allow pointer interaction like tooltips and mouse events\n         * on null points.\n         *\n         * @type      {boolean}\n         * @since     4.2.7\n         * @apioption plotOptions.map.nullInteraction\n         *\n         * @private\n         */\n        stickyTracking: false,\n        tooltip: {\n            followPointer: true,\n            pointFormat: '{point.name}: {point.value}<br/>'\n        },\n        /**\n         * @ignore-option\n         *\n         * @private\n         */\n        turboThreshold: 0,\n        /**\n         * Whether all areas of the map defined in `mapData` should be rendered.\n         * If `true`, areas which don't correspond to a data point, are rendered\n         * as `null` points. If `false`, those areas are skipped.\n         *\n         * @sample maps/plotoptions/series-allareas-false/\n         *         All areas set to false\n         *\n         * @type      {boolean}\n         * @default   true\n         * @product   highmaps\n         * @apioption plotOptions.series.allAreas\n         *\n         * @private\n         */\n        allAreas: true,\n        /**\n         * The border color of the map areas.\n         *\n         * In styled mode, the border stroke is given in the `.highcharts-point`\n         * class.\n         *\n         * @sample {highmaps} maps/plotoptions/series-border/\n         *         Borders demo\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @default   #cccccc\n         * @product   highmaps\n         * @apioption plotOptions.series.borderColor\n         *\n         * @private\n         */\n        borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n        /**\n         * The border width of each map area.\n         *\n         * In styled mode, the border stroke width is given in the\n         * `.highcharts-point` class.\n         *\n         * @sample maps/plotoptions/series-border/\n         *         Borders demo\n         *\n         * @type      {number}\n         * @default   1\n         * @product   highmaps\n         * @apioption plotOptions.series.borderWidth\n         *\n         * @private\n         */\n        borderWidth: 1,\n        /**\n         * @type      {string}\n         * @default   value\n         * @apioption plotOptions.map.colorKey\n         */\n        /**\n         * What property to join the `mapData` to the value data. For example,\n         * if joinBy is \"code\", the mapData items with a specific code is merged\n         * into the data with the same code. For maps loaded from GeoJSON, the\n         * keys may be held in each point's `properties` object.\n         *\n         * The joinBy option can also be an array of two values, where the first\n         * points to a key in the `mapData`, and the second points to another\n         * key in the `data`.\n         *\n         * When joinBy is `null`, the map items are joined by their position in\n         * the array, which performs much better in maps with many data points.\n         * This is the recommended option if you are printing more than a\n         * thousand data points and have a backend that can preprocess the data\n         * into a parallel array of the mapData.\n         *\n         * @sample maps/plotoptions/series-border/\n         *         Joined by \"code\"\n         * @sample maps/demo/geojson/\n         *         GeoJSON joined by an array\n         * @sample maps/series/joinby-null/\n         *         Simple data joined by null\n         *\n         * @type      {string|Array<string>}\n         * @default   hc-key\n         * @product   highmaps\n         * @apioption plotOptions.series.joinBy\n         *\n         * @private\n         */\n        joinBy: 'hc-key',\n        /**\n         * Define the z index of the series.\n         *\n         * @type      {number}\n         * @product   highmaps\n         * @apioption plotOptions.series.zIndex\n         */\n        /**\n         * @apioption plotOptions.series.states\n         *\n         * @private\n         */\n        states: {\n            /**\n             * @apioption plotOptions.series.states.hover\n             */\n            hover: {\n                /** @ignore-option */\n                halo: null,\n                /**\n                 * The color of the shape in this state.\n                 *\n                 * @sample maps/plotoptions/series-states-hover/\n                 *         Hover options\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @product   highmaps\n                 * @apioption plotOptions.series.states.hover.color\n                 */\n                /**\n                 * The border color of the point in this state.\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @product   highmaps\n                 * @apioption plotOptions.series.states.hover.borderColor\n                 */\n                /**\n                 * The border width of the point in this state\n                 *\n                 * @type      {number}\n                 * @product   highmaps\n                 * @apioption plotOptions.series.states.hover.borderWidth\n                 */\n                /**\n                 * The relative brightness of the point when hovered, relative\n                 * to the normal point color.\n                 *\n                 * @type      {number}\n                 * @product   highmaps\n                 * @default   0.2\n                 * @apioption plotOptions.series.states.hover.brightness\n                 */\n                brightness: 0.2\n            },\n            /**\n             * @apioption plotOptions.series.states.normal\n             */\n            normal: {\n                /**\n                 * @productdesc {highmaps}\n                 * The animation adds some latency in order to reduce the effect\n                 * of flickering when hovering in and out of for example an\n                 * uneven coastline.\n                 *\n                 * @sample {highmaps} maps/plotoptions/series-states-animation-false/\n                 *         No animation of fill color\n                 *\n                 * @apioption plotOptions.series.states.normal.animation\n                 */\n                animation: true\n            },\n            /**\n             * @apioption plotOptions.series.states.select\n             */\n            select: {\n                /**\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #cccccc\n                 * @product   highmaps\n                 * @apioption plotOptions.series.states.select.color\n                 */\n                color: \"#cccccc\" /* Palette.neutralColor20 */\n            }\n        }\n    });\n    return MapSeries;\n}(ScatterSeries));\nextend(MapSeries.prototype, {\n    type: 'map',\n    axisTypes: ColorMapComposition.seriesMembers.axisTypes,\n    colorAttribs: ColorMapComposition.seriesMembers.colorAttribs,\n    colorKey: ColorMapComposition.seriesMembers.colorKey,\n    // When tooltip is not shared, this series (and derivatives) requires\n    // direct touch/hover. KD-tree does not apply.\n    directTouch: true,\n    // We need the points' bounding boxes in order to draw the data labels,\n    // so we skip it now and call it from drawPoints instead.\n    drawDataLabels: noop,\n    // No graph for the map series\n    drawGraph: noop,\n    drawLegendSymbol: LegendSymbol.drawRectangle,\n    forceDL: true,\n    getCenter: CU.getCenter,\n    getExtremesFromAll: true,\n    getSymbol: noop,\n    isCartesian: false,\n    parallelArrays: ColorMapComposition.seriesMembers.parallelArrays,\n    pointArrayMap: ColorMapComposition.seriesMembers.pointArrayMap,\n    pointClass: MapPoint,\n    // X axis and Y axis must have same translation slope\n    preserveAspectRatio: true,\n    searchPoint: noop,\n    trackerGroups: ColorMapComposition.seriesMembers.trackerGroups,\n    // Get axis extremes from paths, not values\n    useMapGeometry: true\n});\nColorMapComposition.compose(MapSeries);\nSeriesRegistry.registerSeriesType('map', MapSeries);\n/* *\n *\n *  Default Export\n *\n * */\nexport default MapSeries;\n/* *\n *\n *  API Options\n *\n * */\n/**\n * An array of objects containing a `geometry` or `path` definition and\n * optionally additional properties to join in the `data` as per the `joinBy`\n * option. GeoJSON and TopoJSON structures can also be passed directly into\n * `mapData`.\n *\n * @sample maps/demo/category-map/\n *         Map data and joinBy\n * @sample maps/series/mapdata-multiple/\n *         Multiple map sources\n *\n * @type      {Array<Highcharts.SeriesMapDataOptions>|Highcharts.GeoJSON|Highcharts.TopoJSON}\n * @product   highmaps\n * @apioption series.mapData\n */\n/**\n * A `map` series. If the [type](#series.map.type) option is not specified, it\n * is inherited from [chart.type](#chart.type).\n *\n * @extends   series,plotOptions.map\n * @excluding dataParser, dataURL, marker\n * @product   highmaps\n * @apioption series.map\n */\n/**\n * An array of data points for the series. For the `map` series type, points can\n * be given in the following ways:\n *\n * 1. An array of numerical values. In this case, the numerical values will be\n *    interpreted as `value` options. Example:\n *    ```js\n *    data: [0, 5, 3, 5]\n *    ```\n *\n * 2. An array of arrays with 2 values. In this case, the values correspond to\n *    `[hc-key, value]`. Example:\n *    ```js\n *        data: [\n *            ['us-ny', 0],\n *            ['us-mi', 5],\n *            ['us-tx', 3],\n *            ['us-ak', 5]\n *        ]\n *    ```\n *\n * 3. An array of objects with named values. The following snippet shows only a\n *    few settings, see the complete options set below. If the total number of\n *    data points exceeds the series'\n *    [turboThreshold](#series.map.turboThreshold),\n *    this option is not available.\n *    ```js\n *        data: [{\n *            value: 6,\n *            name: \"Point2\",\n *            color: \"#00FF00\"\n *        }, {\n *            value: 6,\n *            name: \"Point1\",\n *            color: \"#FF00FF\"\n *        }]\n *    ```\n *\n * @type      {Array<number|Array<string,(number|null)>|null|*>}\n * @product   highmaps\n * @apioption series.map.data\n */\n/**\n * When using automatic point colors pulled from the global\n * [colors](colors) or series-specific\n * [plotOptions.map.colors](series.colors) collections, this option\n * determines whether the chart should receive one color per series or\n * one color per point.\n *\n * In styled mode, the `colors` or `series.colors` arrays are not\n * supported, and instead this option gives the points individual color\n * class names on the form `highcharts-color-{n}`.\n *\n * @see [series colors](#plotOptions.map.colors)\n *\n * @sample {highmaps} maps/plotoptions/mapline-colorbypoint-false/\n *         Mapline colorByPoint set to false by default\n * @sample {highmaps} maps/plotoptions/mapline-colorbypoint-true/\n *         Mapline colorByPoint set to true\n *\n * @type      {boolean}\n * @default   false\n * @since     2.0\n * @product   highmaps\n * @apioption plotOptions.map.colorByPoint\n */\n/**\n * A series specific or series type specific color set to apply instead\n * of the global [colors](#colors) when [colorByPoint](\n * #plotOptions.map.colorByPoint) is true.\n *\n * @type      {Array<Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject>}\n * @since     3.0\n * @product   highmaps\n * @apioption plotOptions.map.colors\n */\n/**\n * Individual color for the point. By default the color is either used\n * to denote the value, or pulled from the global `colors` array.\n *\n * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n * @product   highmaps\n * @apioption series.map.data.color\n */\n/**\n * Individual data label for each point. The options are the same as\n * the ones for [plotOptions.series.dataLabels](\n * #plotOptions.series.dataLabels).\n *\n * @sample maps/series/data-datalabels/\n *         Disable data labels for individual areas\n *\n * @type      {Highcharts.DataLabelsOptions}\n * @product   highmaps\n * @apioption series.map.data.dataLabels\n */\n/**\n * The `id` of a series in the [drilldown.series](#drilldown.series)\n * array to use for a drilldown for this point.\n *\n * @sample maps/demo/map-drilldown/\n *         Basic drilldown\n *\n * @type      {string}\n * @product   highmaps\n * @apioption series.map.data.drilldown\n */\n/**\n * For map and mapline series types, the geometry of a point.\n *\n * To achieve a better separation between the structure and the data,\n * it is recommended to use `mapData` to define the geometry instead\n * of defining it on the data points themselves.\n *\n * The geometry object is compatible to that of a `feature` in GeoJSON, so\n * features of GeoJSON can be passed directly into the `data`, optionally\n * after first filtering and processing it.\n *\n * For pre-projected maps (like GeoJSON maps from our\n * [map collection](https://code.highcharts.com/mapdata/)), user has to specify\n * coordinates in `projectedUnits` for geometry type other than `Point`,\n * instead of `[longitude, latitude]`.\n *\n * @sample maps/series/data-geometry/\n *         Geometry defined in data\n *\n * @type      {Object}\n * @since 9.3.0\n * @product   highmaps\n * @apioption series.map.data.geometry\n */\n/**\n * The geometry type. Can be one of `LineString`, `Polygon`, `MultiLineString`\n * or `MultiPolygon`.\n *\n * @declare   Highcharts.MapGeometryTypeValue\n * @type      {string}\n * @since     9.3.0\n * @product   highmaps\n * @validvalue [\"LineString\", \"Polygon\", \"MultiLineString\", \"MultiPolygon\"]\n * @apioption series.map.data.geometry.type\n */\n/**\n * The geometry coordinates in terms of arrays of `[longitude, latitude]`, or\n * a two dimensional array of the same. The dimensionality must comply with the\n * `type`.\n *\n * @type      {Array<LonLatArray>|Array<Array<LonLatArray>>}\n * @since 9.3.0\n * @product   highmaps\n * @apioption series.map.data.geometry.coordinates\n */\n/**\n * An id for the point. This can be used after render time to get a\n * pointer to the point object through `chart.get()`.\n *\n * @sample maps/series/data-id/\n *         Highlight a point by id\n *\n * @type      {string}\n * @product   highmaps\n * @apioption series.map.data.id\n */\n/**\n * When data labels are laid out on a map, Highmaps runs a simplified\n * algorithm to detect collision. When two labels collide, the one with\n * the lowest rank is hidden. By default the rank is computed from the\n * area.\n *\n * @type      {number}\n * @product   highmaps\n * @apioption series.map.data.labelrank\n */\n/**\n * The relative mid point of an area, used to place the data label.\n * Ranges from 0 to 1\\. When `mapData` is used, middleX can be defined\n * there.\n *\n * @type      {number}\n * @default   0.5\n * @product   highmaps\n * @apioption series.map.data.middleX\n */\n/**\n * The relative mid point of an area, used to place the data label.\n * Ranges from 0 to 1\\. When `mapData` is used, middleY can be defined\n * there.\n *\n * @type      {number}\n * @default   0.5\n * @product   highmaps\n * @apioption series.map.data.middleY\n */\n/**\n * The name of the point as shown in the legend, tooltip, dataLabel\n * etc.\n *\n * @sample maps/series/data-datalabels/\n *         Point names\n *\n * @type      {string}\n * @product   highmaps\n * @apioption series.map.data.name\n */\n/**\n * For map and mapline series types, the SVG path for the shape. For\n * compatibily with old IE, not all SVG path definitions are supported,\n * but M, L and C operators are safe.\n *\n * To achieve a better separation between the structure and the data,\n * it is recommended to use `mapData` to define that paths instead\n * of defining them on the data points themselves.\n *\n * For providing true geographical shapes based on longitude and latitude, use\n * the `geometry` option instead.\n *\n * @sample maps/series/data-path/\n *         Paths defined in data\n *\n * @type      {string}\n * @product   highmaps\n * @apioption series.map.data.path\n */\n/**\n * The numeric value of the data point.\n *\n * @type      {number|null}\n * @product   highmaps\n * @apioption series.map.data.value\n */\n/**\n * Individual point events\n *\n * @extends   plotOptions.series.point.events\n * @product   highmaps\n * @apioption series.map.data.events\n */\n''; // adds doclets above to the transpiled file\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport MapSeries from '../Map/MapSeries.js';\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nvar Series = SeriesRegistry.series;\nimport U from '../../Core/Utilities.js';\nvar extend = U.extend, merge = U.merge;\n/* *\n *\n *  Class\n *\n * */\n/**\n * @private\n * @class\n * @name Highcharts.seriesTypes.mapline\n *\n * @augments Highcharts.Series\n */\nvar MapLineSeries = /** @class */ (function (_super) {\n    __extends(MapLineSeries, _super);\n    function MapLineSeries() {\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        _this.data = void 0;\n        _this.options = void 0;\n        _this.points = void 0;\n        return _this;\n        /* eslint-enable valid-jsdoc */\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Get presentational attributes\n     * @private\n     * @function Highcharts.seriesTypes.mapline#pointAttribs\n     */\n    MapLineSeries.prototype.pointAttribs = function (point, state) {\n        var attr = MapSeries.prototype.pointAttribs.call(this, point, state);\n        // The difference from a map series is that the stroke takes the\n        // point color\n        attr.fill = this.options.fillColor;\n        return attr;\n    };\n    /**\n     * A mapline series is a special case of the map series where the value\n     * colors are applied to the strokes rather than the fills. It can also be\n     * used for freeform drawing, like dividers, in the map.\n     *\n     * @sample maps/demo/mapline-mappoint/\n     *         Mapline and map-point chart\n     * @sample maps/demo/animated-mapline/\n     *         Mapline with CSS keyframe animation\n     * @sample maps/demo/flight-routes\n     *         Flight routes\n     *\n     * @extends      plotOptions.map\n     * @product      highmaps\n     * @optionparent plotOptions.mapline\n     */\n    MapLineSeries.defaultOptions = merge(MapSeries.defaultOptions, {\n        /**\n         * Pixel width of the mapline line.\n         *\n         * @type      {number}\n         * @since 10.3.3\n         * @product   highmaps\n         * @default   1\n         * @apioption plotOptions.mapline.lineWidth\n         */\n        lineWidth: 1,\n        /**\n         * Fill color for the map line shapes\n         *\n         * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         */\n        fillColor: 'none'\n    });\n    return MapLineSeries;\n}(MapSeries));\nextend(MapLineSeries.prototype, {\n    type: 'mapline',\n    colorProp: 'stroke',\n    drawLegendSymbol: Series.prototype.drawLegendSymbol,\n    pointAttrToOptions: {\n        'stroke': 'color',\n        'stroke-width': 'lineWidth'\n    }\n});\nSeriesRegistry.registerSeriesType('mapline', MapLineSeries);\n/* *\n *\n *  Default Export\n *\n * */\nexport default MapLineSeries;\n/* *\n *\n *  API Options\n *\n * */\n/**\n * A `mapline` series. If the [type](#series.mapline.type) option is\n * not specified, it is inherited from [chart.type](#chart.type).\n *\n * @extends   series,plotOptions.mapline\n * @excluding dataParser, dataURL, marker\n * @product   highmaps\n * @apioption series.mapline\n */\n/**\n * An array of data points for the series. For the `mapline` series type,\n * points can be given in the following ways:\n *\n * 1.  An array of numerical values. In this case, the numerical values\n * will be interpreted as `value` options. Example:\n *\n *  ```js\n *  data: [0, 5, 3, 5]\n *  ```\n *\n * 2.  An array of arrays with 2 values. In this case, the values correspond\n * to `[hc-key, value]`. Example:\n *\n *  ```js\n *     data: [\n *         ['us-ny', 0],\n *         ['us-mi', 5],\n *         ['us-tx', 3],\n *         ['us-ak', 5]\n *     ]\n *  ```\n *\n * 3.  An array of objects with named values. The following snippet shows only a\n * few settings, see the complete options set below. If the total number of data\n * points exceeds the series' [turboThreshold](#series.map.turboThreshold),\n * this option is not available.\n *\n *  ```js\n *     data: [{\n *         value: 6,\n *         name: \"Point2\",\n *         color: \"#00FF00\"\n *     }, {\n *         value: 6,\n *         name: \"Point1\",\n *         color: \"#FF00FF\"\n *     }]\n *  ```\n *\n * @type      {Array<number|Array<string,(number|null)>|null|*>}\n * @extends   series.map.data\n * @excluding drilldown\n * @product   highmaps\n * @apioption series.mapline.data\n */\n/**\n * Pixel width of the mapline line.\n *\n * @type      {number}\n * @since 10.2.0\n * @product   highmaps\n * @apioption plotOptions.mapline.states.hover.lineWidth\n */\n/**\n * Pixel width of the mapline line.\n *\n * @type      {number|undefined}\n * @since 10.3.3\n * @product   highmaps\n * @apioption series.mapline.data.lineWidth\n */\n/**\n *\n * @type      {number}\n * @product   highmaps\n * @excluding borderWidth\n * @apioption plotOptions.mapline.states.hover\n */\n''; // adds doclets above to transpiled file\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nvar ScatterSeries = SeriesRegistry.seriesTypes.scatter;\nimport U from '../../Core/Utilities.js';\nvar isNumber = U.isNumber;\n/* *\n *\n *  Class\n *\n * */\nvar MapPointPoint = /** @class */ (function (_super) {\n    __extends(MapPointPoint, _super);\n    function MapPointPoint() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.options = void 0;\n        _this.series = void 0;\n        return _this;\n        /* eslint-enable valid-jsdoc */\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    MapPointPoint.prototype.isValid = function () {\n        return Boolean(this.options.geometry ||\n            (isNumber(this.x) && isNumber(this.y)) ||\n            (isNumber(this.options.lon) && isNumber(this.options.lat)));\n    };\n    return MapPointPoint;\n}(ScatterSeries.prototype.pointClass));\n/* *\n *\n *  Default Export\n *\n * */\nexport default MapPointPoint;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport H from '../../Core/Globals.js';\nvar noop = H.noop;\nimport MapPointPoint from './MapPointPoint.js';\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nvar _a = SeriesRegistry.seriesTypes, MapSeries = _a.map, ScatterSeries = _a.scatter;\nimport SVGRenderer from '../../Core/Renderer/SVG/SVGRenderer.js';\nimport U from '../../Core/Utilities.js';\nvar extend = U.extend, fireEvent = U.fireEvent, isNumber = U.isNumber, merge = U.merge, pick = U.pick;\nimport '../../Core/Defaults.js';\nimport '../Scatter/ScatterSeries.js';\n/* *\n *\n *  Class\n *\n * */\n/**\n * @private\n * @class\n * @name Highcharts.seriesTypes.mappoint\n *\n * @augments Highcharts.Series\n */\nvar MapPointSeries = /** @class */ (function (_super) {\n    __extends(MapPointSeries, _super);\n    function MapPointSeries() {\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        _this.chart = void 0;\n        _this.data = void 0;\n        _this.options = void 0;\n        _this.points = void 0;\n        _this.clearBounds = MapSeries.prototype.clearBounds;\n        return _this;\n        /* eslint-enable valid-jsdoc */\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /* eslint-disable valid-jsdoc */\n    MapPointSeries.prototype.drawDataLabels = function () {\n        _super.prototype.drawDataLabels.call(this);\n        if (this.dataLabelsGroup) {\n            this.dataLabelsGroup.clip(this.chart.clipRect);\n        }\n    };\n    /**\n     * Resolve `lon`, `lat` or `geometry` options and project the resulted\n     * coordinates.\n     *\n     * @private\n     */\n    MapPointSeries.prototype.projectPoint = function (pointOptions) {\n        var mapView = this.chart.mapView;\n        if (mapView) {\n            var geometry = pointOptions.geometry, lon = pointOptions.lon, lat = pointOptions.lat;\n            var coordinates = (geometry &&\n                geometry.type === 'Point' &&\n                geometry.coordinates);\n            if (isNumber(lon) && isNumber(lat)) {\n                coordinates = [lon, lat];\n            }\n            if (coordinates) {\n                return mapView.lonLatToProjectedUnits({\n                    lon: coordinates[0],\n                    lat: coordinates[1]\n                });\n            }\n        }\n    };\n    MapPointSeries.prototype.translate = function () {\n        var _this = this;\n        var mapView = this.chart.mapView;\n        if (!this.processedXData) {\n            this.processData();\n        }\n        this.generatePoints();\n        if (this.getProjectedBounds && this.isDirtyData) {\n            delete this.bounds;\n            this.getProjectedBounds(); // Added point needs bounds(#16598)\n        }\n        // Create map based translation\n        if (mapView) {\n            var mainSvgTransform_1 = mapView.getSVGTransform(), hasCoordinates_1 = mapView.projection.hasCoordinates;\n            this.points.forEach(function (p) {\n                var _a = p.x, x = _a === void 0 ? void 0 : _a, _b = p.y, y = _b === void 0 ? void 0 : _b;\n                var svgTransform = (isNumber(p.insetIndex) &&\n                    mapView.insets[p.insetIndex].getSVGTransform()) || mainSvgTransform_1;\n                var xy = (_this.projectPoint(p.options) ||\n                    (p.properties &&\n                        _this.projectPoint(p.properties)));\n                var didBounds;\n                if (xy) {\n                    x = xy.x;\n                    y = xy.y;\n                    // Map bubbles getting geometry from shape\n                }\n                else if (p.bounds) {\n                    x = p.bounds.midX;\n                    y = p.bounds.midY;\n                    if (svgTransform && isNumber(x) && isNumber(y)) {\n                        p.plotX = x * svgTransform.scaleX +\n                            svgTransform.translateX;\n                        p.plotY = y * svgTransform.scaleY +\n                            svgTransform.translateY;\n                        didBounds = true;\n                    }\n                }\n                if (isNumber(x) && isNumber(y)) {\n                    // Establish plotX and plotY\n                    if (!didBounds) {\n                        var plotCoords = mapView.projectedUnitsToPixels({ x: x, y: y });\n                        p.plotX = plotCoords.x;\n                        p.plotY = hasCoordinates_1 ?\n                            plotCoords.y :\n                            _this.chart.plotHeight - plotCoords.y;\n                    }\n                }\n                else {\n                    p.y = p.plotX = p.plotY = void 0;\n                }\n                p.isInside = _this.isPointInside(p);\n                // Find point zone\n                p.zone = _this.zones.length ? p.getZone() : void 0;\n            });\n        }\n        fireEvent(this, 'afterTranslate');\n    };\n    /**\n     * A mappoint series is a special form of scatter series where the points\n     * can be laid out in map coordinates on top of a map.\n     *\n     * @sample maps/demo/mapline-mappoint/\n     *         Map-line and map-point series.\n     * @sample maps/demo/mappoint-mapmarker\n     *         Using the mapmarker symbol for points\n     * @sample maps/demo/mappoint-datalabels-mapmarker\n     *         Using the mapmarker shape for data labels\n     *\n     * @extends      plotOptions.scatter\n     * @product      highmaps\n     * @optionparent plotOptions.mappoint\n     */\n    MapPointSeries.defaultOptions = merge(ScatterSeries.defaultOptions, {\n        dataLabels: {\n            crop: false,\n            defer: false,\n            enabled: true,\n            formatter: function () {\n                return this.point.name;\n            },\n            overflow: false,\n            style: {\n                /** @internal */\n                color: \"#000000\" /* Palette.neutralColor100 */\n            }\n        }\n    });\n    return MapPointSeries;\n}(ScatterSeries));\n/* *\n *\n * Extra\n *\n * */\n/* *\n * The mapmarker symbol\n */\nvar mapmarker = function (x, y, w, h, options) {\n    var isLegendSymbol = options && options.context === 'legend';\n    var anchorX, anchorY;\n    if (isLegendSymbol) {\n        anchorX = x + w / 2;\n        anchorY = y + h;\n        // Put the pin in the anchor position (dataLabel.shape)\n    }\n    else if (options &&\n        typeof options.anchorX === 'number' &&\n        typeof options.anchorY === 'number') {\n        anchorX = options.anchorX;\n        anchorY = options.anchorY;\n        // Put the pin in the center and shift upwards (point.marker.symbol)\n    }\n    else {\n        anchorX = x + w / 2;\n        anchorY = y + h / 2;\n        y -= h;\n    }\n    var r = isLegendSymbol ? h / 3 : h / 2;\n    return [\n        ['M', anchorX, anchorY],\n        ['C', anchorX, anchorY, anchorX - r, y + r * 1.5, anchorX - r, y + r],\n        // A rx ry x-axis-rotation large-arc-flag sweep-flag x y\n        ['A', r, r, 1, 1, 1, anchorX + r, y + r],\n        ['C', anchorX + r, y + r * 1.5, anchorX, anchorY, anchorX, anchorY],\n        ['Z']\n    ];\n};\nSVGRenderer.prototype.symbols.mapmarker = mapmarker;\nextend(MapPointSeries.prototype, {\n    type: 'mappoint',\n    axisTypes: ['colorAxis'],\n    forceDL: true,\n    isCartesian: false,\n    pointClass: MapPointPoint,\n    searchPoint: noop,\n    useMapGeometry: true // #16534\n});\nSeriesRegistry.registerSeriesType('mappoint', MapPointSeries);\n/* *\n *\n *  Default Export\n *\n * */\nexport default MapPointSeries;\n/* *\n *\n *  API Options\n *\n * */\n/**\n * A `mappoint` series. If the [type](#series.mappoint.type) option\n * is not specified, it is inherited from [chart.type](#chart.type).\n *\n *\n * @extends   series,plotOptions.mappoint\n * @excluding dataParser, dataURL\n * @product   highmaps\n * @apioption series.mappoint\n */\n/**\n * An array of data points for the series. For the `mappoint` series\n * type, points can be given in the following ways:\n *\n * 1. An array of numerical values. In this case, the numerical values will be\n *    interpreted as `y` options. The `x` values will be automatically\n *    calculated, either starting at 0 and incremented by 1, or from\n *    `pointStart` and `pointInterval` given in the series options. If the axis\n *    has categories, these will be used. Example:\n *    ```js\n *    data: [0, 5, 3, 5]\n *    ```\n *\n * 2. An array of arrays with 2 values. In this case, the values correspond\n * to `[hc-key, value]`. Example:\n *\n *  ```js\n *     data: [\n *         ['us-ny', 0],\n *         ['us-mi', 5],\n *         ['us-tx', 3],\n *         ['us-ak', 5]\n *     ]\n *  ```\n *\n * 3. An array of objects with named values. The following snippet shows only a\n *    few settings, see the complete options set below. If the total number of\n *    data points exceeds the series'\n *    [turboThreshold](#series.mappoint.turboThreshold),\n *    this option is not available.\n *    ```js\n *        data: [{\n *            x: 1,\n *            y: 7,\n *            name: \"Point2\",\n *            color: \"#00FF00\"\n *        }, {\n *            x: 1,\n *            y: 4,\n *            name: \"Point1\",\n *            color: \"#FF00FF\"\n *        }]\n *    ```\n *\n * @type      {Array<number|Array<number,(number|null)>|null|*>}\n * @extends   series.map.data\n * @excluding labelrank, middleX, middleY, path, value\n * @product   highmaps\n * @apioption series.mappoint.data\n */\n/**\n * The geometry of a point.\n *\n * To achieve a better separation between the structure and the data,\n * it is recommended to use `mapData` to define the geometry instead\n * of defining it on the data points themselves.\n *\n * The geometry object is compatible to that of a `feature` in geoJSON, so\n * features of geoJSON can be passed directly into the `data`, optionally\n * after first filtering and processing it.\n *\n * @sample maps/series/data-geometry/\n *         geometry defined in data\n *\n * @type      {Object}\n * @since 9.3.0\n * @product   highmaps\n * @apioption series.mappoint.data.geometry\n */\n/**\n * The geometry type, which in case of the `mappoint` series is always `Point`.\n *\n * @type      {string}\n * @since 9.3.0\n * @product   highmaps\n * @validvalue [\"Point\"]\n * @apioption series.mappoint.data.geometry.type\n */\n/**\n * The geometry coordinates in terms of `[longitude, latitude]`.\n *\n * @type      {Highcharts.LonLatArray}\n * @since 9.3.0\n * @product   highmaps\n * @apioption series.mappoint.data.geometry.coordinates\n */\n/**\n * The latitude of the point. Must be combined with the `lon` option\n * to work. Overrides `x` and `y` values.\n *\n * @sample {highmaps} maps/demo/mappoint-latlon/\n *         Point position by lat/lon\n *\n * @type      {number}\n * @since     1.1.0\n * @product   highmaps\n * @apioption series.mappoint.data.lat\n */\n/**\n * The longitude of the point. Must be combined with the `lon` option\n * to work. Overrides `x` and `y` values.\n *\n * @sample {highmaps} maps/demo/mappoint-latlon/\n *         Point position by lat/lon\n *\n * @type      {number}\n * @since     1.1.0\n * @product   highmaps\n * @apioption series.mappoint.data.lon\n */\n/**\n * The x coordinate of the point in terms of projected units.\n *\n * @sample {highmaps} maps/series/mapline-mappoint-path-xy/\n *         Map point demo\n *\n * @type      {number}\n * @product   highmaps\n * @apioption series.mappoint.data.x\n */\n/**\n * The x coordinate of the point in terms of projected units.\n *\n * @sample {highmaps} maps/series/mapline-mappoint-path-xy/\n *         Map point demo\n *\n * @type      {number|null}\n * @product   highmaps\n * @apioption series.mappoint.data.y\n */\n/**\n* @type      {number}\n* @product   highmaps\n* @excluding borderColor, borderWidth\n* @apioption plotOptions.mappoint\n*/\n''; // adds doclets above to transpiled file\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/* *\n *\n *  Imports\n *\n * */\nimport BubblePoint from '../Bubble/BubblePoint.js';\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nvar mapPointProto = SeriesRegistry.seriesTypes.map.prototype.pointClass.prototype;\nimport U from '../../Core/Utilities.js';\nvar extend = U.extend;\n/* *\n *\n *  Class\n *\n * */\nvar MapBubblePoint = /** @class */ (function (_super) {\n    __extends(MapBubblePoint, _super);\n    function MapBubblePoint() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    MapBubblePoint.prototype.isValid = function () {\n        return typeof this.z === 'number';\n    };\n    return MapBubblePoint;\n}(BubblePoint));\nextend(MapBubblePoint.prototype, {\n    applyOptions: mapPointProto.applyOptions,\n    getProjectedBounds: mapPointProto.getProjectedBounds\n});\n/* *\n *\n *  Default Export\n *\n * */\nexport default MapBubblePoint;\n","/* *\n *\n *  (c) 2010-2021 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n'use strict';\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport BubbleSeries from '../Bubble/BubbleSeries.js';\nimport MapBubblePoint from './MapBubblePoint.js';\nimport SeriesRegistry from '../../Core/Series/SeriesRegistry.js';\nvar _a = SeriesRegistry.seriesTypes, mapProto = _a.map.prototype, mapPointProto = _a.mappoint.prototype;\nimport U from '../../Core/Utilities.js';\nvar extend = U.extend, merge = U.merge;\n/* *\n *\n *  Class\n *\n * */\n/**\n * @private\n * @class\n * @name Highcharts.seriesTypes.mapbubble\n *\n * @augments Highcharts.Series\n *\n * @requires BubbleSeries\n * @requires MapPointSeries\n */\nvar MapBubbleSeries = /** @class */ (function (_super) {\n    __extends(MapBubbleSeries, _super);\n    function MapBubbleSeries() {\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /* *\n         *\n         *  Properties\n         *\n         * */\n        _this.data = void 0;\n        _this.options = void 0;\n        _this.points = void 0;\n        _this.clearBounds = mapProto.clearBounds;\n        return _this;\n    }\n    MapBubbleSeries.prototype.searchPoint = function (e, compareX) {\n        return this.searchKDTree({\n            clientX: e.chartX - this.chart.plotLeft,\n            plotY: e.chartY - this.chart.plotTop\n        }, compareX, e);\n    };\n    MapBubbleSeries.prototype.translate = function () {\n        mapPointProto.translate.call(this);\n        this.getRadii();\n        this.translateBubble();\n    };\n    /**\n     * A map bubble series is a bubble series laid out on top of a map\n     * series, where each bubble is tied to a specific map area.\n     *\n     * @sample maps/demo/map-bubble/\n     *         Map bubble chart\n     *\n     * @extends      plotOptions.bubble\n     * @product      highmaps\n     * @optionparent plotOptions.mapbubble\n     */\n    MapBubbleSeries.defaultOptions = merge(BubbleSeries.defaultOptions, {\n        /**\n         * The main color of the series. This color affects both the fill\n         * and the stroke of the bubble. For enhanced control, use `marker`\n         * options.\n         *\n         * @sample {highmaps} maps/plotoptions/mapbubble-color/\n         *         Pink bubbles\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @apioption plotOptions.mapbubble.color\n         */\n        /**\n         * Whether to display negative sized bubbles. The threshold is\n         * given by the [zThreshold](#plotOptions.mapbubble.zThreshold)\n         * option, and negative bubbles can be visualized by setting\n         * [negativeColor](#plotOptions.bubble.negativeColor).\n         *\n         * @type      {boolean}\n         * @default   true\n         * @apioption plotOptions.mapbubble.displayNegative\n         */\n        /**\n         * Color of the line connecting bubbles. The default value is the same\n         * as series' color.\n         *\n         * In styled mode, the color can be defined by the\n         * [colorIndex](#plotOptions.series.colorIndex) option. Also, the series\n         * color can be set with the `.highcharts-series`,\n         * `.highcharts-color-{n}`, `.highcharts-{type}-series` or\n         * `.highcharts-series-{n}` class, or individual classes given by the\n         * `className` option.\n         *\n         *\n         * @sample {highmaps} maps/demo/spider-map/\n         *         Spider map\n         * @sample {highmaps} maps/plotoptions/spider-map-line-color/\n         *         Different line color\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @apioption plotOptions.mapbubble.lineColor\n         */\n        /**\n         * Pixel width of the line connecting bubbles.\n         *\n         * @sample {highmaps} maps/demo/spider-map/\n         *         Spider map\n         *\n         * @product   highmaps\n         * @apioption plotOptions.mapbubble.lineWidth\n         */\n        lineWidth: 0,\n        /**\n         * Maximum bubble size. Bubbles will automatically size between the\n         * `minSize` and `maxSize` to reflect the `z` value of each bubble.\n         * Can be either pixels (when no unit is given), or a percentage of\n         * the smallest one of the plot width and height.\n         *\n         * @sample {highmaps} highcharts/plotoptions/bubble-size/\n         *         Bubble size\n         * @sample {highmaps} maps/demo/spider-map/\n         *         Spider map\n         *\n         * @product   highmaps\n         * @apioption plotOptions.mapbubble.maxSize\n         */\n        /**\n         * Minimum bubble size. Bubbles will automatically size between the\n         * `minSize` and `maxSize` to reflect the `z` value of each bubble.\n         * Can be either pixels (when no unit is given), or a percentage of\n         * the smallest one of the plot width and height.\n         *\n         * @sample {highmaps} maps/demo/map-bubble/\n         *         Bubble size\n         * @sample {highmaps} maps/demo/spider-map/\n         *         Spider map\n         *\n         * @product   highmaps\n         * @apioption plotOptions.mapbubble.minSize\n         */\n        /**\n         * When a point's Z value is below the\n         * [zThreshold](#plotOptions.mapbubble.zThreshold) setting, this\n         * color is used.\n         *\n         * @sample {highmaps} maps/plotoptions/mapbubble-negativecolor/\n         *         Negative color below a threshold\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @apioption plotOptions.mapbubble.negativeColor\n         */\n        /**\n         * Whether the bubble's value should be represented by the area or\n         * the width of the bubble. The default, `area`, corresponds best to\n         * the human perception of the size of each bubble.\n         *\n         * @type       {Highcharts.BubbleSizeByValue}\n         * @default    area\n         * @apioption  plotOptions.mapbubble.sizeBy\n         */\n        /**\n         * When this is true, the absolute value of z determines the size\n         * of the bubble. This means that with the default `zThreshold` of\n         * 0, a bubble of value -1 will have the same size as a bubble of\n         * value 1, while a bubble of value 0 will have a smaller size\n         * according to `minSize`.\n         *\n         * @sample {highmaps} highcharts/plotoptions/bubble-sizebyabsolutevalue/\n         *         Size by absolute value, various thresholds\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     1.1.9\n         * @apioption plotOptions.mapbubble.sizeByAbsoluteValue\n         */\n        /**\n         * The minimum for the Z value range. Defaults to the highest Z\n         * value in the data.\n         *\n         * @see [zMax](#plotOptions.mapbubble.zMin)\n         *\n         * @sample {highmaps} highcharts/plotoptions/bubble-zmin-zmax/\n         *         Z has a possible range of 0-100\n         *\n         * @type      {number}\n         * @since     1.0.3\n         * @apioption plotOptions.mapbubble.zMax\n         */\n        /**\n         * The minimum for the Z value range. Defaults to the lowest Z value\n         * in the data.\n         *\n         * @see [zMax](#plotOptions.mapbubble.zMax)\n         *\n         * @sample {highmaps} highcharts/plotoptions/bubble-zmin-zmax/\n         *         Z has a possible range of 0-100\n         *\n         * @type      {number}\n         * @since     1.0.3\n         * @apioption plotOptions.mapbubble.zMin\n         */\n        /**\n         * When [displayNegative](#plotOptions.mapbubble.displayNegative)\n         * is `false`, bubbles with lower Z values are skipped. When\n         * `displayNegative` is `true` and a\n         * [negativeColor](#plotOptions.mapbubble.negativeColor) is given,\n         * points with lower Z is colored.\n         *\n         * @sample {highmaps} maps/plotoptions/mapbubble-negativecolor/\n         *         Negative color below a threshold\n         *\n         * @type      {number}\n         * @default   0\n         * @apioption plotOptions.mapbubble.zThreshold\n         */\n        /**\n         * @default 500\n         */\n        animationLimit: 500,\n        /**\n         * @type {string|Array<string>}\n         */\n        joinBy: 'hc-key',\n        tooltip: {\n            pointFormat: '{point.name}: {point.z}'\n        }\n    });\n    return MapBubbleSeries;\n}(BubbleSeries));\nextend(MapBubbleSeries.prototype, {\n    type: 'mapbubble',\n    axisTypes: ['colorAxis'],\n    getProjectedBounds: mapProto.getProjectedBounds,\n    isCartesian: false,\n    // If one single value is passed, it is interpreted as z\n    pointArrayMap: ['z'],\n    pointClass: MapBubblePoint,\n    processData: mapProto.processData,\n    projectPoint: mapPointProto.projectPoint,\n    setData: mapProto.setData,\n    setOptions: mapProto.setOptions,\n    updateData: mapProto.updateData,\n    useMapGeometry: true,\n    xyFromShape: true\n});\nSeriesRegistry.registerSeriesType('mapbubble', MapBubbleSeries);\n/* *\n *\n *  Default Export\n *\n * */\nexport default MapBubbleSeries;\n/* *\n *\n *  API Options\n *\n * */\n/**\n * A `mapbubble` series. If the [type](#series.mapbubble.type) option\n * is not specified, it is inherited from [chart.type](#chart.type).\n *\n * @extends   series,plotOptions.mapbubble\n * @excluding dataParser, dataURL\n * @product   highmaps\n * @apioption series.mapbubble\n */\n/**\n * An array of data points for the series. For the `mapbubble` series\n * type, points can be given in the following ways:\n *\n * 1. An array of numerical values. In this case, the numerical values\n *    will be interpreted as `z` options. Example:\n *\n *    ```js\n *    data: [0, 5, 3, 5]\n *    ```\n *\n * 2. An array of objects with named values. The following snippet shows only a\n *    few settings, see the complete options set below. If the total number of\n *    data points exceeds the series'\n *    [turboThreshold](#series.mapbubble.turboThreshold),\n *    this option is not available.\n *\n *    ```js\n *        data: [{\n *            z: 9,\n *            name: \"Point2\",\n *            color: \"#00FF00\"\n *        }, {\n *            z: 10,\n *            name: \"Point1\",\n *            color: \"#FF00FF\"\n *        }]\n *    ```\n *\n * @type      {Array<number|null|*>}\n * @extends   series.mappoint.data\n * @excluding labelrank, middleX, middleY, path, value, x, y, lat, lon\n * @product   highmaps\n * @apioption series.mapbubble.data\n */\n/**\n * While the `x` and `y` values of the bubble are determined by the\n * underlying map, the `z` indicates the actual value that gives the\n * size of the bubble.\n *\n * @sample {highmaps} maps/demo/map-bubble/\n *         Bubble\n *\n * @type      {number|null}\n * @product   highmaps\n * @apioption series.mapbubble.data.z\n */\n/**\n * @excluding enabled, enabledThreshold, height, radius, width\n * @sample {highmaps} maps/plotoptions/mapbubble-symbol\n *         Map bubble with mapmarker symbol\n * @apioption series.mapbubble.marker\n */\n''; // adds doclets above to transpiled file\n","/**\n * @license Highmaps JS v10.3.3 (2023-01-20)\n * @module highcharts/modules/map\n * @requires highcharts\n *\n * Highmaps as a plugin for Highcharts or Highcharts Stock.\n *\n * (c) 2011-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n'use strict';\nimport Highcharts from '../../Core/Globals.js';\nimport ColorAxis from '../../Core/Axis/Color/ColorAxis.js';\nimport '../../Maps/MapNavigation.js';\nimport '../../Maps/MapPointer.js';\nimport '../../Series/Map/MapSeries.js';\nimport '../../Series/MapLine/MapLineSeries.js';\nimport '../../Series/MapPoint/MapPointSeries.js';\nimport MapBubbleSeries from '../../Series/MapBubble/MapBubbleSeries.js';\nimport '../../Series/Heatmap/HeatmapSeries.js';\nimport '../../Extensions/GeoJSON.js';\nimport MapChart from '../../Core/Chart/MapChart.js';\nimport MapView from '../../Maps/MapView.js';\nimport Projection from '../../Maps/Projection.js';\nvar G = Highcharts;\nG.ColorAxis = ColorAxis;\nG.MapChart = MapChart;\nG.mapChart = G.Map = MapChart.mapChart;\nG.MapView = MapView;\nG.maps = MapChart.maps;\nG.Projection = Projection;\nColorAxis.compose(G.Chart, G.Fx, G.Legend, G.Series);\nMapBubbleSeries.compose(G.Axis, G.Chart, G.Legend, G.Series);\n"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}